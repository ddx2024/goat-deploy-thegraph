{"id":"76290542cf1ebda8db67175fb31dc052","_format":"hh-sol-build-info-1","solcVersion":"0.8.26","solcLongVersion":"0.8.26+commit.8a97fa7a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Nonces.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ShortStrings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/bitcoin/Bitcoin.sol":{"content":"// SPDX-License-Identifier: Business Source License 1.1\npragma solidity ^0.8.24;\n\nimport {BaseAccess} from \"../library/utils/BaseAccess.sol\";\nimport {IBitcoin} from \"../interfaces/Bitcoin.sol\";\n\ncontract Bitcoin is BaseAccess, IBitcoin {\n    string public networkName;\n    uint256 public startHeight;\n    uint256 public latestHeight;\n\n    mapping(uint256 height => bytes32 blockHash) internal blocks;\n\n    // precompiled, testing only\n    constructor(uint256 _height, bytes32 _hash, string memory _network) {\n        startHeight = _height;\n        latestHeight = _height;\n        blocks[_height] = _hash;\n        networkName = _network;\n    }\n\n    // newBlockHash adds next finalized block hash\n    // Note: the block hash uses little endian\n    function newBlockHash(bytes32 _hash) external override OnlyRelayer {\n        uint256 height = ++latestHeight;\n        blocks[height] = _hash;\n        emit NewBlockHash(height);\n    }\n\n    function blockHash(\n        uint256 height\n    ) external view override returns (bytes32) {\n        return blocks[height];\n    }\n}\n"},"contracts/bridge/Bridge.sol":{"content":"// SPDX-License-Identifier: Business Source License 1.1\npragma solidity ^0.8.24;\n\nimport {Burner} from \"../library/utils/Burner.sol\";\nimport {BaseAccess} from \"../library/utils/BaseAccess.sol\";\nimport {PreDeployedAddresses} from \"../library/constants/Predeployed.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IBridge} from \"../interfaces/bridge/Bridge.sol\";\nimport {IBridgeParam} from \"../interfaces/bridge/BridgeParam.sol\";\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\ncontract Bridge is Ownable, BaseAccess, IBridge, IBridgeParam, IERC165 {\n    using Address for address payable;\n\n    Param public param;\n\n    mapping(bytes32 txh => bool yes) internal deposits;\n\n    Withdrawal[] public withdrawals;\n\n    // the withdrawal receipts\n    mapping(uint256 id => Receipt receipt) public receipts;\n\n    // 1 satoshi = 10 gwei\n    uint256 internal constant satoshi = 10 gwei;\n\n    // 2 p2wsh input + 1 p2tr/p2wsh output + 1 change output\n    uint256 internal constant baseTxSize = 300;\n\n    // the max tax base points\n    uint256 internal constant maxBasePoints = 1e4;\n\n    // It is only for testing\n    constructor(address owner) Ownable(owner) {\n        param = Param({\n            rateLimit: 300,\n            depositTaxBP: 0,\n            maxDepositTax: 0,\n            withdrawalTaxBP: 20,\n            maxWithdrawalTax: 2_000_000 gwei, // 0.002\n            _res1: 0,\n            _res2: 0\n        });\n    }\n\n    /**\n     * deposit adds balance to the target address\n     * goat performs the adding outside EVM to prevent any errors\n     * @param _txid the txid(LE)\n     * @param _txout the txout\n     * @param _target the depoist address\n     * @param _amount the deposit amount\n     */\n    function deposit(\n        bytes32 _txid,\n        uint32 _txout,\n        address _target,\n        uint256 _amount\n    ) external override OnlyRelayer returns (uint256 tax) {\n        bytes32 depositHash = keccak256(abi.encodePacked(_txid, _txout));\n        require(!deposits[depositHash], \"duplicated\");\n\n        require(_amount > 0 && _amount % satoshi == 0, \"invalid amount\");\n\n        Param memory p = param;\n        if (p.depositTaxBP > 0) {\n            tax = (_amount * p.depositTaxBP) / maxBasePoints;\n            if (tax > p.maxDepositTax) {\n                tax = p.maxDepositTax;\n            }\n            _amount -= tax;\n        }\n\n        deposits[depositHash] = true;\n        emit Deposit(_target, _amount, _txid, _txout, tax);\n\n        // Add balance to the _target and pay the tax to GF in the runtime\n        return tax;\n    }\n\n    /**\n     * isDeposited checks if the deposit is succeed\n     * @param _txid the txid(LE)\n     * @param _txout the txout index\n     */\n    function isDeposited(\n        bytes32 _txid,\n        uint32 _txout\n    ) external view override returns (bool) {\n        bytes32 depositHash = keccak256(abi.encodePacked(_txid, _txout));\n        return deposits[depositHash];\n    }\n\n    /**\n     * withdraw initializes a new withdrawal request by a user\n     * @param _receiver the address to withdraw\n     * @param _maxTxPrice the max allowed tx price in sat/vbyte\n     */\n    function withdraw(\n        string calldata _receiver,\n        uint16 _maxTxPrice\n    ) external payable override {\n        bytes memory addrBytes = bytes(_receiver);\n        if (addrBytes.length < 34 || addrBytes.length > 90) {\n            revert InvalidAddress();\n        }\n\n        uint256 amount = msg.value;\n        uint256 tax = 0;\n\n        Param memory p = param;\n        if (p.withdrawalTaxBP > 0) {\n            tax = (amount * p.withdrawalTaxBP) / maxBasePoints;\n            if (tax > p.maxWithdrawalTax) {\n                tax = p.maxWithdrawalTax;\n            }\n            amount -= tax;\n        }\n\n        // dust as tax\n        uint256 dust = amount % satoshi;\n        if (dust > 0) {\n            tax += dust;\n            amount -= dust;\n        }\n\n        require(_maxTxPrice > 0, \"invalid tx price\");\n        require(amount > _maxTxPrice * baseTxSize * satoshi, \"unaffordable\");\n\n        uint256 id = withdrawals.length;\n        withdrawals.push(\n            Withdrawal({\n                sender: msg.sender,\n                amount: amount,\n                tax: tax,\n                maxTxPrice: _maxTxPrice,\n                updatedAt: block.timestamp,\n                receiver: _receiver,\n                status: WithdrawalStatus.Pending\n            })\n        );\n\n        emit Withdraw(id, msg.sender, amount, tax, _maxTxPrice, _receiver);\n    }\n\n    /**\n     * replaceByFee updates the withdrawal tx price\n     * @param _wid the withdrawal id\n     * @param _maxTxPrice the new max tx price\n     */\n    function replaceByFee(uint256 _wid, uint16 _maxTxPrice) external override {\n        Withdrawal storage withdrawal = withdrawals[_wid];\n\n        if (withdrawal.status != WithdrawalStatus.Pending) {\n            revert Forbidden();\n        }\n\n        if (withdrawal.sender != msg.sender) {\n            revert AccessDenied();\n        }\n\n        if (block.timestamp - withdrawal.updatedAt < param.rateLimit) {\n            revert RateLimitExceeded();\n        }\n\n        require(\n            _maxTxPrice > withdrawal.maxTxPrice,\n            \"the new tx price should be larger than before\"\n        );\n\n        require(\n            withdrawal.amount > _maxTxPrice * baseTxSize * satoshi,\n            \"unaffordable\"\n        );\n\n        withdrawal.maxTxPrice = _maxTxPrice;\n        withdrawal.updatedAt = block.timestamp;\n\n        emit RBF(_wid, _maxTxPrice);\n    }\n\n    /**\n     * cancel1 cancels the withdrawal by origin user\n     * @param _wid the withdrawal id\n     */\n    function cancel1(uint256 _wid) external {\n        Withdrawal storage withdrawal = withdrawals[_wid];\n\n        if (withdrawal.status != WithdrawalStatus.Pending) {\n            revert Forbidden();\n        }\n\n        if (withdrawal.sender != msg.sender) {\n            revert AccessDenied();\n        }\n\n        if (block.timestamp - withdrawal.updatedAt < param.rateLimit) {\n            revert RateLimitExceeded();\n        }\n\n        withdrawal.updatedAt = block.timestamp;\n        withdrawal.status = WithdrawalStatus.Canceling;\n        emit Canceling(_wid);\n    }\n\n    /**\n     * cancel2 apporves the cancellation request by relayer\n     * relayer can pay the withdrawal to disregard the cancellation request\n     * relayer can reject a pending withdrawal as well\n     * @param _wid the withdrwal id\n     */\n    function cancel2(uint256 _wid) external OnlyRelayer {\n        Withdrawal storage withdrawal = withdrawals[_wid];\n        WithdrawalStatus status = withdrawal.status;\n        require(\n            status == WithdrawalStatus.Pending ||\n                status == WithdrawalStatus.Canceling\n        );\n        withdrawal.status = WithdrawalStatus.Canceled;\n        withdrawal.updatedAt = block.timestamp;\n        emit Canceled(_wid);\n    }\n\n    /**\n     * refund refunds the amount of the canceled withdrawal to the origin user\n     * @param _wid the withdrwal id\n     */\n    function refund(uint256 _wid) external {\n        Withdrawal storage withdrawal = withdrawals[_wid];\n\n        if (withdrawal.status != WithdrawalStatus.Canceled) {\n            revert Forbidden();\n        }\n        withdrawal.status = WithdrawalStatus.Refunded;\n\n        address payable owner = payable(withdrawal.sender);\n        if (owner != msg.sender) {\n            revert AccessDenied();\n        }\n        withdrawal.updatedAt = block.timestamp;\n\n        // refund to the owner\n        owner.sendValue(withdrawal.amount + withdrawal.tax);\n        emit Refund(_wid);\n    }\n\n    /**\n     * paid finalizes the withdrawal request and burns the withdrawal amount from network\n     * It aslo transfers the tax to GF address if the tax is enabled\n     * @param _wid withdrawal id\n     * @param _txid the withdrawal txid(little endian)\n     * @param _txout the tx output index\n     * @param _received the actual paid amount\n     */\n    function paid(\n        uint256 _wid,\n        bytes32 _txid,\n        uint32 _txout,\n        uint256 _received\n    ) external OnlyRelayer {\n        Withdrawal storage withdrawal = withdrawals[_wid];\n\n        WithdrawalStatus status = withdrawal.status;\n        require(\n            status == WithdrawalStatus.Pending ||\n                status == WithdrawalStatus.Canceling\n        );\n\n        receipts[_wid] = Receipt(_txid, _txout, _received);\n        withdrawal.status = WithdrawalStatus.Paid;\n        withdrawal.updatedAt = block.timestamp;\n\n        // send the tax to GF\n        uint256 tax = withdrawal.tax;\n        if (tax > 0) {\n            PreDeployedAddresses.GoatFoundation.sendValue(tax);\n        }\n\n        // Burn the withdrawal amount from network\n        new Burner{value: withdrawal.amount, salt: bytes32(0x0)}();\n\n        emit Paid(_wid, _txid, _txout, _received);\n    }\n\n    function setDepositTax(\n        uint16 _bp,\n        uint64 _max\n    ) external override onlyOwner {\n        if (_bp > maxBasePoints) {\n            revert TaxTooHigh();\n        }\n\n        if (_max > 1 ether) {\n            revert TaxTooHigh();\n        }\n\n        if (_bp > 0 && _max == 0) {\n            revert MalformedTax();\n        }\n\n        param.depositTaxBP = _bp;\n        param.maxDepositTax = _max;\n        emit DepositTaxUpdated(_bp, _max);\n    }\n\n    function setWithdrawalTax(\n        uint16 _bp,\n        uint64 _max\n    ) external override onlyOwner {\n        if (_bp > maxBasePoints) {\n            revert TaxTooHigh();\n        }\n\n        if (_max > 1 ether) {\n            revert TaxTooHigh();\n        }\n\n        if (_bp > 0 && _max == 0) {\n            revert MalformedTax();\n        }\n\n        param.withdrawalTaxBP = _bp;\n        param.maxWithdrawalTax = _max;\n        emit WithdrawalTaxUpdated(_bp, _max);\n    }\n\n    function setRateLimit(uint16 _sec) external override onlyOwner {\n        require(_sec > 0, \"invalid throttle setting\");\n        param.rateLimit = _sec;\n        emit RateLimitUpdated(_sec);\n    }\n\n    function supportsInterface(\n        bytes4 id\n    ) external view virtual override returns (bool) {\n        return\n            id == type(IERC165).interfaceId ||\n            id == type(IBridge).interfaceId ||\n            id == type(IBridgeParam).interfaceId;\n    }\n}\n"},"contracts/goat/GoatToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract GoatToken is ERC20Permit, ERC20Burnable, Ownable {\n    constructor()\n        ERC20(\"GOAT\", \"GOAT\")\n        Ownable(msg.sender)\n        ERC20Permit(\"GOAT\")\n    {}\n}\n"},"contracts/interfaces/Bitcoin.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\ninterface IBitcoin {\n    event NewBlockHash(uint256 height);\n\n    function startHeight() external view returns (uint256);\n\n    function latestHeight() external view returns (uint256);\n\n    function blockHash(uint256 _height) external view returns (bytes32);\n\n    function newBlockHash(bytes32 _hash) external;\n\n    function networkName() external view returns (string memory);\n}\n"},"contracts/interfaces/bridge/Bridge.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IBridge {\n    event Deposit(\n        address indexed target,\n        uint256 indexed amount,\n        bytes32 txid,\n        uint32 txout,\n        uint256 tax\n    );\n\n    event Withdraw(\n        uint256 indexed id,\n        address indexed from,\n        uint256 amount,\n        uint256 tax,\n        uint256 maxTxPrice,\n        string receiver\n    );\n\n    event Canceling(uint256 indexed id);\n\n    event Canceled(uint256 indexed id);\n\n    event Refund(uint256 indexed id);\n\n    event RBF(uint256 indexed id, uint256 maxTxPrice);\n\n    event Paid(uint256 indexed id, bytes32 txid, uint32 txout, uint256 value);\n\n    enum WithdrawalStatus {\n        Invalid,\n        Pending,\n        Canceling,\n        Canceled,\n        Refunded,\n        Paid\n    }\n\n    error RateLimitExceeded();\n    error InvalidAddress();\n\n    struct Withdrawal {\n        address sender;\n        uint256 amount; // msg.value - tax\n        uint256 tax; // tax for goat foundation\n        uint256 maxTxPrice;\n        uint256 updatedAt;\n        string receiver;\n        WithdrawalStatus status;\n    }\n\n    // the payment receipt\n    struct Receipt {\n        bytes32 txid;\n        uint32 txout;\n        uint256 received;\n    }\n\n    function isDeposited(\n        bytes32 txid,\n        uint32 txout\n    ) external view returns (bool);\n\n    function deposit(\n        bytes32 txid,\n        uint32 txout,\n        address target,\n        uint256 amount\n    ) external returns (uint256);\n\n    function withdraw(\n        string calldata receiver,\n        uint16 maxTxPrice\n    ) external payable;\n\n    function replaceByFee(uint256 id, uint16 maxTxPrice) external;\n\n    function cancel1(uint256 id) external;\n\n    function refund(uint256 id) external;\n\n    function cancel2(uint256 id) external;\n\n    function paid(\n        uint256 id,\n        bytes32 txid,\n        uint32 txout,\n        uint256 paid\n    ) external;\n}\n"},"contracts/interfaces/bridge/BridgeParam.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IBridgeParam {\n    event DepositTaxUpdated(uint16 rate, uint64 max);\n    event WithdrawalTaxUpdated(uint16 rate, uint64 max);\n    event RateLimitUpdated(uint16);\n\n    struct Param {\n        uint16 rateLimit;\n        uint16 depositTaxBP;\n        uint64 maxDepositTax;\n        uint16 withdrawalTaxBP;\n        uint64 maxWithdrawalTax;\n        uint16 _res1;\n        uint64 _res2;\n    }\n\n    error TaxTooHigh();\n\n    error MalformedTax();\n\n    function setDepositTax(uint16 bp, uint64 max) external;\n\n    function setWithdrawalTax(uint16 bp, uint64 max) external;\n\n    function setRateLimit(uint16 sec) external;\n}\n"},"contracts/interfaces/Relayer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IRelayer {\n    event AddedVoter(bytes20 indexed voter, bytes32 keyHash);\n\n    event RemovedVoter(bytes20 indexed voter);\n\n    function addVoter(bytes20 voter, bytes32 vtkey) external;\n\n    function removeVoter(bytes20 voter) external;\n}\n"},"contracts/library/constants/Executor.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nlibrary Executor {\n    address internal constant Relayer =\n        0xBc10000000000000000000000000000000001000;\n\n    address internal constant Locking =\n        0xBC10000000000000000000000000000000001001;\n}\n"},"contracts/library/constants/Predeployed.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nlibrary PreDeployedAddresses {\n    address internal constant WrappedGoatBitcoin =\n        0xbC10000000000000000000000000000000000000;\n\n    address internal constant GoatDAO =\n        0xBC10000000000000000000000000000000000Da0;\n\n    address internal constant GoatToken =\n        0xbC10000000000000000000000000000000000001;\n\n    address payable internal constant GoatFoundation =\n        payable(0xBc10000000000000000000000000000000000002);\n\n    address internal constant Bridge =\n        0xBC10000000000000000000000000000000000003;\n\n    address internal constant Locking =\n        0xbC10000000000000000000000000000000000004;\n\n    address internal constant BitcoinBlocks =\n        0xbc10000000000000000000000000000000000005;\n\n    address internal constant Relayer =\n        0xBC10000000000000000000000000000000000006;\n}\n"},"contracts/library/utils/BaseAccess.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {Executor} from \"../constants/Executor.sol\";\n\ncontract BaseAccess {\n    error AccessDenied();\n    error Forbidden();\n\n    modifier OnlyRelayer() {\n        if (msg.sender != Executor.Relayer) {\n            revert AccessDenied();\n        }\n        _;\n    }\n}\n"},"contracts/library/utils/Burner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract Burner {\n    constructor() payable {\n        selfdestruct(payable(address(this)));\n    }\n}\n"},"contracts/relayer/relayer.sol":{"content":"// SPDX-License-Identifier: Business Source License 1.1\npragma solidity ^0.8.24;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IRelayer} from \"../interfaces/Relayer.sol\";\n\ncontract Relayer is Ownable, IRelayer {\n    // It ensures efficiency for BLS signature aggregation and TSS operations\n    uint16 public constant MAX_VOTER_COUNT = 256;\n\n    uint16 public total;\n    mapping(bytes32 vtkh => bool exists) public pubkeys;\n    mapping(bytes20 voter => bool exists) public voters;\n\n    constructor(address owner) Ownable(owner) {}\n\n    /**\n     * addVoter adds a new voter to relayer network\n     * @param voter the address which derived from the tx key\n     * @param vtkey the hash which derived from the vote key\n     *\n     * the voter address = ripemd160(sha256(compressed secp256k1 public key))\n     * the voter key hash = sha256(compressed bls12-381 public key in G2 group)\n     *\n     * we don't have heavy workload such as signature verification here\n     * a new voter needs to provide online proof which includes the signature\n     * to join the relayer network\n     *\n     * the adding will be activated after next relayer proposer election\n     */\n    function addVoter(bytes20 voter, bytes32 vtkey) external onlyOwner {\n        require(!pubkeys[vtkey], \"duplicated key\");\n        require(!voters[voter], \"duplicated voter\");\n        require(++total < MAX_VOTER_COUNT, \"too many voters\");\n\n        voters[voter] = true;\n        pubkeys[vtkey] = true;\n        emit AddedVoter(voter, vtkey);\n    }\n\n    /**\n     * removeVoter removes a voter from relayer network\n     * @param voter the voter address\n     *\n     * the removal will be activated after next relayer proposer election\n     */\n    function removeVoter(bytes20 voter) external onlyOwner {\n        require(voters[voter], \"voter not found\");\n        require(total > 1, \"too few voters\");\n        // we don't delete the pubkey, it cant be reused next time\n        voters[voter] = false;\n        total--;\n        emit RemovedVoter(voter);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":800},"evmVersion":"cancun","metadata":{"bytecodeHash":"none","useLiteralContent":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"5159","formattedMessage":"Warning: \"selfdestruct\" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.\n --> contracts/library/utils/Burner.sol:6:9:\n  |\n6 |         selfdestruct(payable(address(this)));\n  |         ^^^^^^^^^^^^\n\n","message":"\"selfdestruct\" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.","severity":"warning","sourceLocation":{"end":124,"file":"contracts/library/utils/Burner.sol","start":112},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1447],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":1448,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1447,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,1447],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","exportedSymbols":{"IERC5267":[172]},"id":173,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":172,"linearizedBaseContracts":[172],"name":"IERC5267","nameLocation":"143:8:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"158:84:1","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":152,"name":"EIP712DomainChanged","nameLocation":"253:19:1","nodeType":"EventDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"272:2:1"},"src":"247:28:1"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"281:140:1","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":171,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"435:12:1","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[],"src":"447:2:1"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"fields","nameLocation":"517:6:1","nodeType":"VariableDeclaration","scope":171,"src":"510:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":155,"name":"bytes1","nodeType":"ElementaryTypeName","src":"510:6:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"name","nameLocation":"551:4:1","nodeType":"VariableDeclaration","scope":171,"src":"537:18:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":157,"name":"string","nodeType":"ElementaryTypeName","src":"537:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"version","nameLocation":"583:7:1","nodeType":"VariableDeclaration","scope":171,"src":"569:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":159,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":162,"mutability":"mutable","name":"chainId","nameLocation":"612:7:1","nodeType":"VariableDeclaration","scope":171,"src":"604:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"verifyingContract","nameLocation":"641:17:1","nodeType":"VariableDeclaration","scope":171,"src":"633:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"633:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"salt","nameLocation":"680:4:1","nodeType":"VariableDeclaration","scope":171,"src":"672:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"672:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":169,"mutability":"mutable","name":"extensions","nameLocation":"715:10:1","nodeType":"VariableDeclaration","scope":171,"src":"698:27:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"698:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":168,"nodeType":"ArrayTypeName","src":"698:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"496:239:1"},"scope":172,"src":"426:310:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":173,"src":"133:605:1","usedErrors":[],"usedEvents":[152]}],"src":"107:632:1"},"id":1},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[309],"IERC20Errors":[214],"IERC721Errors":[262]},"id":310,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":174,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":175,"nodeType":"StructuredDocumentation","src":"138:139:2","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":214,"linearizedBaseContracts":[214],"name":"IERC20Errors","nameLocation":"288:12:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"307:309:2","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":184,"name":"ERC20InsufficientBalance","nameLocation":"627:24:2","nodeType":"ErrorDefinition","parameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"sender","nameLocation":"660:6:2","nodeType":"VariableDeclaration","scope":184,"src":"652:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"balance","nameLocation":"676:7:2","nodeType":"VariableDeclaration","scope":184,"src":"668:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"needed","nameLocation":"693:6:2","nodeType":"VariableDeclaration","scope":184,"src":"685:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:2"},"src":"621:80:2"},{"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"707:152:2","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":189,"name":"ERC20InvalidSender","nameLocation":"870:18:2","nodeType":"ErrorDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"sender","nameLocation":"897:6:2","nodeType":"VariableDeclaration","scope":189,"src":"889:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:2"},"src":"864:41:2"},{"documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"911:159:2","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":194,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:2","nodeType":"ErrorDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:2","nodeType":"VariableDeclaration","scope":194,"src":"1102:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:2"},"src":"1075:45:2"},{"documentation":{"id":195,"nodeType":"StructuredDocumentation","src":"1126:345:2","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":203,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:2","nodeType":"ErrorDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"mutability":"mutable","name":"spender","nameLocation":"1517:7:2","nodeType":"VariableDeclaration","scope":203,"src":"1509:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":199,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:2","nodeType":"VariableDeclaration","scope":203,"src":"1526:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"needed","nameLocation":"1553:6:2","nodeType":"VariableDeclaration","scope":203,"src":"1545:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:2"},"src":"1476:85:2"},{"documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"1567:174:2","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":208,"name":"ERC20InvalidApprover","nameLocation":"1752:20:2","nodeType":"ErrorDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"approver","nameLocation":"1781:8:2","nodeType":"VariableDeclaration","scope":208,"src":"1773:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:2"},"src":"1746:45:2"},{"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"1797:195:2","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":213,"name":"ERC20InvalidSpender","nameLocation":"2003:19:2","nodeType":"ErrorDefinition","parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"mutability":"mutable","name":"spender","nameLocation":"2031:7:2","nodeType":"VariableDeclaration","scope":213,"src":"2023:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":210,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:2"},"src":"1997:43:2"}],"scope":310,"src":"278:1764:2","usedErrors":[184,189,194,203,208,213],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"2044:141:2","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":262,"linearizedBaseContracts":[262],"name":"IERC721Errors","nameLocation":"2196:13:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"2216:219:2","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":220,"name":"ERC721InvalidOwner","nameLocation":"2446:18:2","nodeType":"ErrorDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"owner","nameLocation":"2473:5:2","nodeType":"VariableDeclaration","scope":220,"src":"2465:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:2"},"src":"2440:40:2"},{"documentation":{"id":221,"nodeType":"StructuredDocumentation","src":"2486:132:2","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":225,"name":"ERC721NonexistentToken","nameLocation":"2629:22:2","nodeType":"ErrorDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:2","nodeType":"VariableDeclaration","scope":225,"src":"2652:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:2"},"src":"2623:46:2"},{"documentation":{"id":226,"nodeType":"StructuredDocumentation","src":"2675:289:2","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":234,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:2","nodeType":"ErrorDefinition","parameters":{"id":233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"mutability":"mutable","name":"sender","nameLocation":"3004:6:2","nodeType":"VariableDeclaration","scope":234,"src":"2996:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":227,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":230,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:2","nodeType":"VariableDeclaration","scope":234,"src":"3012:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":229,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"owner","nameLocation":"3037:5:2","nodeType":"VariableDeclaration","scope":234,"src":"3029:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":231,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:2"},"src":"2969:75:2"},{"documentation":{"id":235,"nodeType":"StructuredDocumentation","src":"3050:152:2","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":239,"name":"ERC721InvalidSender","nameLocation":"3213:19:2","nodeType":"ErrorDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"sender","nameLocation":"3241:6:2","nodeType":"VariableDeclaration","scope":239,"src":"3233:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":236,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:2"},"src":"3207:42:2"},{"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"3255:159:2","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":244,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:2","nodeType":"ErrorDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:2","nodeType":"VariableDeclaration","scope":244,"src":"3447:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":241,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:2"},"src":"3419:46:2"},{"documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"3471:247:2","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":251,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:2","nodeType":"ErrorDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"operator","nameLocation":"3764:8:2","nodeType":"VariableDeclaration","scope":251,"src":"3756:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":246,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:2","nodeType":"VariableDeclaration","scope":251,"src":"3774:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:2"},"src":"3723:68:2"},{"documentation":{"id":252,"nodeType":"StructuredDocumentation","src":"3797:174:2","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":256,"name":"ERC721InvalidApprover","nameLocation":"3982:21:2","nodeType":"ErrorDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"approver","nameLocation":"4012:8:2","nodeType":"VariableDeclaration","scope":256,"src":"4004:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":253,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:2"},"src":"3976:46:2"},{"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"4028:197:2","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":261,"name":"ERC721InvalidOperator","nameLocation":"4236:21:2","nodeType":"ErrorDefinition","parameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"operator","nameLocation":"4266:8:2","nodeType":"VariableDeclaration","scope":261,"src":"4258:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":258,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:2"},"src":"4230:46:2"}],"scope":310,"src":"2186:2092:2","usedErrors":[220,225,234,239,244,251,256,261],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":263,"nodeType":"StructuredDocumentation","src":"4280:143:2","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":309,"linearizedBaseContracts":[309],"name":"IERC1155Errors","nameLocation":"4434:14:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"4455:361:2","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":274,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:2","nodeType":"ErrorDefinition","parameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"sender","nameLocation":"4862:6:2","nodeType":"VariableDeclaration","scope":274,"src":"4854:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":268,"mutability":"mutable","name":"balance","nameLocation":"4878:7:2","nodeType":"VariableDeclaration","scope":274,"src":"4870:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":267,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":270,"mutability":"mutable","name":"needed","nameLocation":"4895:6:2","nodeType":"VariableDeclaration","scope":274,"src":"4887:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":272,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:2","nodeType":"VariableDeclaration","scope":274,"src":"4903:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":271,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:2"},"src":"4821:99:2"},{"documentation":{"id":275,"nodeType":"StructuredDocumentation","src":"4926:152:2","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":279,"name":"ERC1155InvalidSender","nameLocation":"5089:20:2","nodeType":"ErrorDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"sender","nameLocation":"5118:6:2","nodeType":"VariableDeclaration","scope":279,"src":"5110:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":276,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:2"},"src":"5083:43:2"},{"documentation":{"id":280,"nodeType":"StructuredDocumentation","src":"5132:159:2","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":284,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:2","nodeType":"ErrorDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:2","nodeType":"VariableDeclaration","scope":284,"src":"5325:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:2"},"src":"5296:47:2"},{"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"5349:256:2","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":291,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:2","nodeType":"ErrorDefinition","parameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"operator","nameLocation":"5653:8:2","nodeType":"VariableDeclaration","scope":291,"src":"5645:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":289,"mutability":"mutable","name":"owner","nameLocation":"5671:5:2","nodeType":"VariableDeclaration","scope":291,"src":"5663:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":288,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:2"},"src":"5610:68:2"},{"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"5684:174:2","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":296,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:2","nodeType":"ErrorDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"approver","nameLocation":"5900:8:2","nodeType":"VariableDeclaration","scope":296,"src":"5892:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:2"},"src":"5863:47:2"},{"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"5916:197:2","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":301,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:2","nodeType":"ErrorDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"operator","nameLocation":"6155:8:2","nodeType":"VariableDeclaration","scope":301,"src":"6147:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":298,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:2"},"src":"6118:47:2"},{"documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"6171:280:2","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":308,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:2","nodeType":"ErrorDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:2","nodeType":"VariableDeclaration","scope":308,"src":"6488:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:2","nodeType":"VariableDeclaration","scope":308,"src":"6507:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":305,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:2"},"src":"6456:73:2"}],"scope":310,"src":"4424:2107:2","usedErrors":[274,279,284,291,296,301,308],"usedEvents":[]}],"src":"112:6420:2"},"id":2},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[1447],"ERC20":[824],"IERC20":[902],"IERC20Errors":[214],"IERC20Metadata":[1128]},"id":825,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":311,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":313,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":825,"sourceUnit":903,"src":"131:36:3","symbolAliases":[{"foreign":{"id":312,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"139:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":315,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":825,"sourceUnit":1129,"src":"168:63:3","symbolAliases":[{"foreign":{"id":314,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"176:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":317,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":825,"sourceUnit":1448,"src":"232:48:3","symbolAliases":[{"foreign":{"id":316,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"240:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":319,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":825,"sourceUnit":310,"src":"281:65:3","symbolAliases":[{"foreign":{"id":318,"name":"IERC20Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"289:12:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":321,"name":"Context","nameLocations":["1428:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1447,"src":"1428:7:3"},"id":322,"nodeType":"InheritanceSpecifier","src":"1428:7:3"},{"baseName":{"id":323,"name":"IERC20","nameLocations":["1437:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":902,"src":"1437:6:3"},"id":324,"nodeType":"InheritanceSpecifier","src":"1437:6:3"},{"baseName":{"id":325,"name":"IERC20Metadata","nameLocations":["1445:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":1128,"src":"1445:14:3"},"id":326,"nodeType":"InheritanceSpecifier","src":"1445:14:3"},{"baseName":{"id":327,"name":"IERC20Errors","nameLocations":["1461:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":214,"src":"1461:12:3"},"id":328,"nodeType":"InheritanceSpecifier","src":"1461:12:3"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"348:1052:3","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."},"fullyImplemented":true,"id":824,"linearizedBaseContracts":[824,214,1128,902,1447],"name":"ERC20","nameLocation":"1419:5:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":332,"mutability":"mutable","name":"_balances","nameLocation":"1524:9:3","nodeType":"VariableDeclaration","scope":824,"src":"1480:53:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":331,"keyName":"account","keyNameLocation":"1496:7:3","keyType":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"1488:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1480:35:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":338,"mutability":"mutable","name":"_allowances","nameLocation":"1612:11:3","nodeType":"VariableDeclaration","scope":824,"src":"1540:83:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":337,"keyName":"account","keyNameLocation":"1556:7:3","keyType":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1540:63:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":336,"keyName":"spender","keyNameLocation":"1583:7:3","keyType":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"1575:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1567:35:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1594:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":340,"mutability":"mutable","name":"_totalSupply","nameLocation":"1646:12:3","nodeType":"VariableDeclaration","scope":824,"src":"1630:28:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1630:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":342,"mutability":"mutable","name":"_name","nameLocation":"1680:5:3","nodeType":"VariableDeclaration","scope":824,"src":"1665:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":341,"name":"string","nodeType":"ElementaryTypeName","src":"1665:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":344,"mutability":"mutable","name":"_symbol","nameLocation":"1706:7:3","nodeType":"VariableDeclaration","scope":824,"src":"1691:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":343,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":360,"nodeType":"Block","src":"1952:57:3","statements":[{"expression":{"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":352,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"1962:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":353,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"1970:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1962:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":355,"nodeType":"ExpressionStatement","src":"1962:13:3"},{"expression":{"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":356,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"1985:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":357,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1995:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1985:17:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":359,"nodeType":"ExpressionStatement","src":"1985:17:3"}]},"documentation":{"id":345,"nodeType":"StructuredDocumentation","src":"1720:171:3","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":361,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"name_","nameLocation":"1922:5:3","nodeType":"VariableDeclaration","scope":361,"src":"1908:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":346,"name":"string","nodeType":"ElementaryTypeName","src":"1908:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"symbol_","nameLocation":"1943:7:3","nodeType":"VariableDeclaration","scope":361,"src":"1929:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":348,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1907:44:3"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"1952:0:3"},"scope":824,"src":"1896:113:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1115],"body":{"id":369,"nodeType":"Block","src":"2134:29:3","statements":[{"expression":{"id":367,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"2151:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":366,"id":368,"nodeType":"Return","src":"2144:12:3"}]},"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"2015:54:3","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":370,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2083:4:3","nodeType":"FunctionDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"2087:2:3"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":370,"src":"2119:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":364,"name":"string","nodeType":"ElementaryTypeName","src":"2119:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2118:15:3"},"scope":824,"src":"2074:89:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1121],"body":{"id":378,"nodeType":"Block","src":"2338:31:3","statements":[{"expression":{"id":376,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"2355:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":375,"id":377,"nodeType":"Return","src":"2348:14:3"}]},"documentation":{"id":371,"nodeType":"StructuredDocumentation","src":"2169:102:3","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":379,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2285:6:3","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"2291:2:3"},"returnParameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":379,"src":"2323:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":373,"name":"string","nodeType":"ElementaryTypeName","src":"2323:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2322:15:3"},"scope":824,"src":"2276:93:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1127],"body":{"id":387,"nodeType":"Block","src":"3058:26:3","statements":[{"expression":{"hexValue":"3138","id":385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3075:2:3","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":384,"id":386,"nodeType":"Return","src":"3068:9:3"}]},"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"2375:622:3","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":388,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3011:8:3","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"3019:2:3"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":388,"src":"3051:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":382,"name":"uint8","nodeType":"ElementaryTypeName","src":"3051:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3050:7:3"},"scope":824,"src":"3002:82:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[851],"body":{"id":396,"nodeType":"Block","src":"3205:36:3","statements":[{"expression":{"id":394,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"3222:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":393,"id":395,"nodeType":"Return","src":"3215:19:3"}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"3090:49:3","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":397,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3153:11:3","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"3164:2:3"},"returnParameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":397,"src":"3196:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":391,"name":"uint256","nodeType":"ElementaryTypeName","src":"3196:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3195:9:3"},"scope":824,"src":"3144:97:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[859],"body":{"id":409,"nodeType":"Block","src":"3373:42:3","statements":[{"expression":{"baseExpression":{"id":405,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"3390:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":407,"indexExpression":{"id":406,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"3400:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3390:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":404,"id":408,"nodeType":"Return","src":"3383:25:3"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"3247:47:3","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":410,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3308:9:3","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"account","nameLocation":"3326:7:3","nodeType":"VariableDeclaration","scope":410,"src":"3318:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"3318:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3317:17:3"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":410,"src":"3364:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"3364:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3363:9:3"},"scope":824,"src":"3299:116:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[869],"body":{"id":433,"nodeType":"Block","src":"3685:103:3","statements":[{"assignments":[421],"declarations":[{"constant":false,"id":421,"mutability":"mutable","name":"owner","nameLocation":"3703:5:3","nodeType":"VariableDeclaration","scope":433,"src":"3695:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"3695:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":424,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":422,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"3711:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3695:28:3"},{"expression":{"arguments":[{"id":426,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3743:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":427,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"3750:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"3754:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":425,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3733:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3733:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":430,"nodeType":"ExpressionStatement","src":"3733:27:3"},{"expression":{"hexValue":"74727565","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3777:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":419,"id":432,"nodeType":"Return","src":"3770:11:3"}]},"documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"3421:184:3","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."},"functionSelector":"a9059cbb","id":434,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3619:8:3","nodeType":"FunctionDefinition","parameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"to","nameLocation":"3636:2:3","nodeType":"VariableDeclaration","scope":434,"src":"3628:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":412,"name":"address","nodeType":"ElementaryTypeName","src":"3628:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"value","nameLocation":"3648:5:3","nodeType":"VariableDeclaration","scope":434,"src":"3640:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":414,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3627:27:3"},"returnParameters":{"id":419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":434,"src":"3679:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":417,"name":"bool","nodeType":"ElementaryTypeName","src":"3679:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3678:6:3"},"scope":824,"src":"3610:178:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[879],"body":{"id":450,"nodeType":"Block","src":"3935:51:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":444,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"3952:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":446,"indexExpression":{"id":445,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"3964:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3952:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":448,"indexExpression":{"id":447,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3971:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3952:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":443,"id":449,"nodeType":"Return","src":"3945:34:3"}]},"documentation":{"id":435,"nodeType":"StructuredDocumentation","src":"3794:47:3","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":451,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3855:9:3","nodeType":"FunctionDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"owner","nameLocation":"3873:5:3","nodeType":"VariableDeclaration","scope":451,"src":"3865:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":436,"name":"address","nodeType":"ElementaryTypeName","src":"3865:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"spender","nameLocation":"3888:7:3","nodeType":"VariableDeclaration","scope":451,"src":"3880:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":438,"name":"address","nodeType":"ElementaryTypeName","src":"3880:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3864:32:3"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":451,"src":"3926:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"3926:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3925:9:3"},"scope":824,"src":"3846:140:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[889],"body":{"id":474,"nodeType":"Block","src":"4372:107:3","statements":[{"assignments":[462],"declarations":[{"constant":false,"id":462,"mutability":"mutable","name":"owner","nameLocation":"4390:5:3","nodeType":"VariableDeclaration","scope":474,"src":"4382:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":461,"name":"address","nodeType":"ElementaryTypeName","src":"4382:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":465,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":463,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"4398:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4398:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4382:28:3"},{"expression":{"arguments":[{"id":467,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"4429:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":468,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"4436:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"4445:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":466,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[715,775],"referencedDeclaration":715,"src":"4420:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4420:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":471,"nodeType":"ExpressionStatement","src":"4420:31:3"},{"expression":{"hexValue":"74727565","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4468:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":460,"id":473,"nodeType":"Return","src":"4461:11:3"}]},"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"3992:296:3","text":" @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":475,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4302:7:3","nodeType":"FunctionDefinition","parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"spender","nameLocation":"4318:7:3","nodeType":"VariableDeclaration","scope":475,"src":"4310:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"4310:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"value","nameLocation":"4335:5:3","nodeType":"VariableDeclaration","scope":475,"src":"4327:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"4327:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4309:32:3"},"returnParameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":475,"src":"4366:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":458,"name":"bool","nodeType":"ElementaryTypeName","src":"4366:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:6:3"},"scope":824,"src":"4293:186:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[901],"body":{"id":506,"nodeType":"Block","src":"5132:151:3","statements":[{"assignments":[488],"declarations":[{"constant":false,"id":488,"mutability":"mutable","name":"spender","nameLocation":"5150:7:3","nodeType":"VariableDeclaration","scope":506,"src":"5142:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"5142:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":491,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":489,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"5160:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5142:30:3"},{"expression":{"arguments":[{"id":493,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"5198:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":494,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"5204:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"5213:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":492,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"5182:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5182:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":497,"nodeType":"ExpressionStatement","src":"5182:37:3"},{"expression":{"arguments":[{"id":499,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"5239:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":500,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"5245:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"5249:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":498,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"5229:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5229:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":503,"nodeType":"ExpressionStatement","src":"5229:26:3"},{"expression":{"hexValue":"74727565","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5272:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":486,"id":505,"nodeType":"Return","src":"5265:11:3"}]},"documentation":{"id":476,"nodeType":"StructuredDocumentation","src":"4485:549:3","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."},"functionSelector":"23b872dd","id":507,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5048:12:3","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"from","nameLocation":"5069:4:3","nodeType":"VariableDeclaration","scope":507,"src":"5061:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":477,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"to","nameLocation":"5083:2:3","nodeType":"VariableDeclaration","scope":507,"src":"5075:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"5075:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"value","nameLocation":"5095:5:3","nodeType":"VariableDeclaration","scope":507,"src":"5087:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"5087:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5060:41:3"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":507,"src":"5126:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":484,"name":"bool","nodeType":"ElementaryTypeName","src":"5126:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5125:6:3"},"scope":824,"src":"5039:244:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":553,"nodeType":"Block","src":"5725:231:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":517,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"5739:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5755:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5747:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":518,"name":"address","nodeType":"ElementaryTypeName","src":"5747:7:3","typeDescriptions":{}}},"id":521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5747:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5739:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":531,"nodeType":"IfStatement","src":"5735:86:3","trueBody":{"id":530,"nodeType":"Block","src":"5759:62:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5807:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5799:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"5799:7:3","typeDescriptions":{}}},"id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5799:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":523,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"5780:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5780:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":529,"nodeType":"RevertStatement","src":"5773:37:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":532,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"5834:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5848:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5840:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":533,"name":"address","nodeType":"ElementaryTypeName","src":"5840:7:3","typeDescriptions":{}}},"id":536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5840:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5834:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":546,"nodeType":"IfStatement","src":"5830:86:3","trueBody":{"id":545,"nodeType":"Block","src":"5852:64:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5902:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5894:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"5894:7:3","typeDescriptions":{}}},"id":542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":538,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5873:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5873:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":544,"nodeType":"RevertStatement","src":"5866:39:3"}]}},{"expression":{"arguments":[{"id":548,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"5933:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":549,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"5939:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"5943:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":547,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"5925:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5925:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":552,"nodeType":"ExpressionStatement","src":"5925:24:3"}]},"documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"5289:362:3","text":" @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":554,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"5665:9:3","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"from","nameLocation":"5683:4:3","nodeType":"VariableDeclaration","scope":554,"src":"5675:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":509,"name":"address","nodeType":"ElementaryTypeName","src":"5675:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"to","nameLocation":"5697:2:3","nodeType":"VariableDeclaration","scope":554,"src":"5689:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":511,"name":"address","nodeType":"ElementaryTypeName","src":"5689:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"value","nameLocation":"5709:5:3","nodeType":"VariableDeclaration","scope":554,"src":"5701:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":513,"name":"uint256","nodeType":"ElementaryTypeName","src":"5701:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5674:41:3"},"returnParameters":{"id":516,"nodeType":"ParameterList","parameters":[],"src":"5725:0:3"},"scope":824,"src":"5656:300:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":630,"nodeType":"Block","src":"6346:1032:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":564,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6360:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6376:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6368:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"6368:7:3","typeDescriptions":{}}},"id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6368:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6360:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":601,"nodeType":"Block","src":"6534:362:3","statements":[{"assignments":[576],"declarations":[{"constant":false,"id":576,"mutability":"mutable","name":"fromBalance","nameLocation":"6556:11:3","nodeType":"VariableDeclaration","scope":601,"src":"6548:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"6548:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":580,"initialValue":{"baseExpression":{"id":577,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"6570:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":579,"indexExpression":{"id":578,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6580:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6570:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6548:37:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":581,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"6603:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6617:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6603:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":591,"nodeType":"IfStatement","src":"6599:115:3","trueBody":{"id":590,"nodeType":"Block","src":"6624:90:3","statements":[{"errorCall":{"arguments":[{"id":585,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6674:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":586,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"6680:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6693:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":584,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"6649:24:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6649:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":589,"nodeType":"RevertStatement","src":"6642:57:3"}]}},{"id":600,"nodeType":"UncheckedBlock","src":"6727:159:3","statements":[{"expression":{"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":592,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"6834:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":594,"indexExpression":{"id":593,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6844:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6834:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":595,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"6852:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6866:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6852:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6834:37:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":599,"nodeType":"ExpressionStatement","src":"6834:37:3"}]}]},"id":602,"nodeType":"IfStatement","src":"6356:540:3","trueBody":{"id":574,"nodeType":"Block","src":"6380:148:3","statements":[{"expression":{"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":570,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"6496:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6512:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6496:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":573,"nodeType":"ExpressionStatement","src":"6496:21:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":603,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"6910:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6924:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6916:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":604,"name":"address","nodeType":"ElementaryTypeName","src":"6916:7:3","typeDescriptions":{}}},"id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6916:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6910:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":622,"nodeType":"Block","src":"7125:206:3","statements":[{"id":621,"nodeType":"UncheckedBlock","src":"7139:182:3","statements":[{"expression":{"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":615,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"7284:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":617,"indexExpression":{"id":616,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"7294:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7284:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7301:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7284:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":620,"nodeType":"ExpressionStatement","src":"7284:22:3"}]}]},"id":623,"nodeType":"IfStatement","src":"6906:425:3","trueBody":{"id":614,"nodeType":"Block","src":"6928:191:3","statements":[{"id":613,"nodeType":"UncheckedBlock","src":"6942:167:3","statements":[{"expression":{"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":609,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"7073:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7089:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7073:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":612,"nodeType":"ExpressionStatement","src":"7073:21:3"}]}]}},{"eventCall":{"arguments":[{"id":625,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"7355:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":626,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"7361:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7365:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":624,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"7346:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7346:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":629,"nodeType":"EmitStatement","src":"7341:30:3"}]},"documentation":{"id":555,"nodeType":"StructuredDocumentation","src":"5962:304:3","text":" @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."},"id":631,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"6280:7:3","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":557,"mutability":"mutable","name":"from","nameLocation":"6296:4:3","nodeType":"VariableDeclaration","scope":631,"src":"6288:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"6288:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"to","nameLocation":"6310:2:3","nodeType":"VariableDeclaration","scope":631,"src":"6302:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":558,"name":"address","nodeType":"ElementaryTypeName","src":"6302:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"value","nameLocation":"6322:5:3","nodeType":"VariableDeclaration","scope":631,"src":"6314:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":560,"name":"uint256","nodeType":"ElementaryTypeName","src":"6314:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6287:41:3"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"6346:0:3"},"scope":824,"src":"6271:1107:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":663,"nodeType":"Block","src":"7777:152:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":639,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"7791:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7810:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7802:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":640,"name":"address","nodeType":"ElementaryTypeName","src":"7802:7:3","typeDescriptions":{}}},"id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7802:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7791:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":653,"nodeType":"IfStatement","src":"7787:91:3","trueBody":{"id":652,"nodeType":"Block","src":"7814:64:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7864:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7856:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"7856:7:3","typeDescriptions":{}}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7856:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":645,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"7835:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7835:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":651,"nodeType":"RevertStatement","src":"7828:39:3"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7903:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7895:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":655,"name":"address","nodeType":"ElementaryTypeName","src":"7895:7:3","typeDescriptions":{}}},"id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7895:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":659,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"7907:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"7916:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":654,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"7887:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7887:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":662,"nodeType":"ExpressionStatement","src":"7887:35:3"}]},"documentation":{"id":632,"nodeType":"StructuredDocumentation","src":"7384:332:3","text":" @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":664,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"7730:5:3","nodeType":"FunctionDefinition","parameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"account","nameLocation":"7744:7:3","nodeType":"VariableDeclaration","scope":664,"src":"7736:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"7736:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"value","nameLocation":"7761:5:3","nodeType":"VariableDeclaration","scope":664,"src":"7753:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"7753:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7735:32:3"},"returnParameters":{"id":638,"nodeType":"ParameterList","parameters":[],"src":"7777:0:3"},"scope":824,"src":"7721:208:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":696,"nodeType":"Block","src":"8303:150:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":672,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"8317:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8336:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8328:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":673,"name":"address","nodeType":"ElementaryTypeName","src":"8328:7:3","typeDescriptions":{}}},"id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8328:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8317:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":686,"nodeType":"IfStatement","src":"8313:89:3","trueBody":{"id":685,"nodeType":"Block","src":"8340:62:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8388:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8380:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"8380:7:3","typeDescriptions":{}}},"id":682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8380:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":678,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"8361:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8361:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":684,"nodeType":"RevertStatement","src":"8354:37:3"}]}},{"expression":{"arguments":[{"id":688,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"8419:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8436:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8428:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"8428:7:3","typeDescriptions":{}}},"id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8428:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"8440:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":687,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"8411:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8411:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":695,"nodeType":"ExpressionStatement","src":"8411:35:3"}]},"documentation":{"id":665,"nodeType":"StructuredDocumentation","src":"7935:307:3","text":" @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"},"id":697,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"8256:5:3","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"account","nameLocation":"8270:7:3","nodeType":"VariableDeclaration","scope":697,"src":"8262:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":666,"name":"address","nodeType":"ElementaryTypeName","src":"8262:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"value","nameLocation":"8287:5:3","nodeType":"VariableDeclaration","scope":697,"src":"8279:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"8279:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8261:32:3"},"returnParameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"8303:0:3"},"scope":824,"src":"8247:206:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":714,"nodeType":"Block","src":"9063:54:3","statements":[{"expression":{"arguments":[{"id":708,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"9082:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":709,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"9089:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":710,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"9098:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9105:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":707,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[715,775],"referencedDeclaration":775,"src":"9073:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9073:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":713,"nodeType":"ExpressionStatement","src":"9073:37:3"}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"8459:525:3","text":" @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":715,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"8998:8:3","nodeType":"FunctionDefinition","parameters":{"id":705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"owner","nameLocation":"9015:5:3","nodeType":"VariableDeclaration","scope":715,"src":"9007:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"9007:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"spender","nameLocation":"9030:7:3","nodeType":"VariableDeclaration","scope":715,"src":"9022:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":701,"name":"address","nodeType":"ElementaryTypeName","src":"9022:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"value","nameLocation":"9047:5:3","nodeType":"VariableDeclaration","scope":715,"src":"9039:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"9039:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9006:47:3"},"returnParameters":{"id":706,"nodeType":"ParameterList","parameters":[],"src":"9063:0:3"},"scope":824,"src":"8989:128:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":774,"nodeType":"Block","src":"10047:334:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":727,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"10061:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10078:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10070:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"10070:7:3","typeDescriptions":{}}},"id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10070:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10061:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":741,"nodeType":"IfStatement","src":"10057:89:3","trueBody":{"id":740,"nodeType":"Block","src":"10082:64:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10132:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10124:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":734,"name":"address","nodeType":"ElementaryTypeName","src":"10124:7:3","typeDescriptions":{}}},"id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10124:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":733,"name":"ERC20InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"10103:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10103:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":739,"nodeType":"RevertStatement","src":"10096:39:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":742,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10159:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10178:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10170:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":743,"name":"address","nodeType":"ElementaryTypeName","src":"10170:7:3","typeDescriptions":{}}},"id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10170:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10159:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":756,"nodeType":"IfStatement","src":"10155:90:3","trueBody":{"id":755,"nodeType":"Block","src":"10182:63:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10231:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10223:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":749,"name":"address","nodeType":"ElementaryTypeName","src":"10223:7:3","typeDescriptions":{}}},"id":752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10223:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":748,"name":"ERC20InvalidSpender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"10203:19:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10203:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":754,"nodeType":"RevertStatement","src":"10196:38:3"}]}},{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":757,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"10254:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":760,"indexExpression":{"id":758,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"10266:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10254:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":761,"indexExpression":{"id":759,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10273:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10254:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"10284:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10254:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":764,"nodeType":"ExpressionStatement","src":"10254:35:3"},{"condition":{"id":765,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"10303:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":773,"nodeType":"IfStatement","src":"10299:76:3","trueBody":{"id":772,"nodeType":"Block","src":"10314:61:3","statements":[{"eventCall":{"arguments":[{"id":767,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"10342:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":768,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10349:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"10358:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":766,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"10333:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10333:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":771,"nodeType":"EmitStatement","src":"10328:36:3"}]}}]},"documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"9123:821:3","text":" @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."},"id":775,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"9958:8:3","nodeType":"FunctionDefinition","parameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"owner","nameLocation":"9975:5:3","nodeType":"VariableDeclaration","scope":775,"src":"9967:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":717,"name":"address","nodeType":"ElementaryTypeName","src":"9967:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":720,"mutability":"mutable","name":"spender","nameLocation":"9990:7:3","nodeType":"VariableDeclaration","scope":775,"src":"9982:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"9982:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"value","nameLocation":"10007:5:3","nodeType":"VariableDeclaration","scope":775,"src":"9999:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":721,"name":"uint256","nodeType":"ElementaryTypeName","src":"9999:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":724,"mutability":"mutable","name":"emitEvent","nameLocation":"10019:9:3","nodeType":"VariableDeclaration","scope":775,"src":"10014:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"10014:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9966:63:3"},"returnParameters":{"id":726,"nodeType":"ParameterList","parameters":[],"src":"10047:0:3"},"scope":824,"src":"9949:432:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":822,"nodeType":"Block","src":"10752:388:3","statements":[{"assignments":[786],"declarations":[{"constant":false,"id":786,"mutability":"mutable","name":"currentAllowance","nameLocation":"10770:16:3","nodeType":"VariableDeclaration","scope":822,"src":"10762:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"10762:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":791,"initialValue":{"arguments":[{"id":788,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"10799:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":789,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"10806:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":787,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"10789:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10789:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10762:52:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":792,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"10828:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10853:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"10853:7:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":793,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10848:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10848:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10862:3:3","memberName":"max","nodeType":"MemberAccess","src":"10848:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10828:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":821,"nodeType":"IfStatement","src":"10824:310:3","trueBody":{"id":820,"nodeType":"Block","src":"10867:267:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":799,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"10885:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"10904:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10885:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":809,"nodeType":"IfStatement","src":"10881:130:3","trueBody":{"id":808,"nodeType":"Block","src":"10911:100:3","statements":[{"errorCall":{"arguments":[{"id":803,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"10963:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":804,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"10972:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"10990:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":802,"name":"ERC20InsufficientAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"10936:26:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10936:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":807,"nodeType":"RevertStatement","src":"10929:67:3"}]}},{"id":819,"nodeType":"UncheckedBlock","src":"11024:100:3","statements":[{"expression":{"arguments":[{"id":811,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"11061:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":812,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"11068:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":813,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"11077:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"11096:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11077:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11103:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":810,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[715,775],"referencedDeclaration":775,"src":"11052:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11052:57:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":818,"nodeType":"ExpressionStatement","src":"11052:57:3"}]}]}}]},"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"10387:271:3","text":" @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."},"id":823,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"10672:15:3","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"owner","nameLocation":"10696:5:3","nodeType":"VariableDeclaration","scope":823,"src":"10688:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"10688:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"spender","nameLocation":"10711:7:3","nodeType":"VariableDeclaration","scope":823,"src":"10703:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":779,"name":"address","nodeType":"ElementaryTypeName","src":"10703:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"value","nameLocation":"10728:5:3","nodeType":"VariableDeclaration","scope":823,"src":"10720:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"10720:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10687:47:3"},"returnParameters":{"id":784,"nodeType":"ParameterList","parameters":[],"src":"10752:0:3"},"scope":824,"src":"10663:477:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":825,"src":"1401:9741:3","usedErrors":[184,189,194,203,208,213],"usedEvents":[836,845]}],"src":"105:11038:3"},"id":3},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[902]},"id":903,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":826,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"132:70:4","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":902,"linearizedBaseContracts":[902],"name":"IERC20","nameLocation":"213:6:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":828,"nodeType":"StructuredDocumentation","src":"226:158:4","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":836,"name":"Transfer","nameLocation":"395:8:4","nodeType":"EventDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":830,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:4","nodeType":"VariableDeclaration","scope":836,"src":"404:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":832,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:4","nodeType":"VariableDeclaration","scope":836,"src":"426:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":834,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:4","nodeType":"VariableDeclaration","scope":836,"src":"446:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:4"},"src":"389:72:4"},{"anonymous":false,"documentation":{"id":837,"nodeType":"StructuredDocumentation","src":"467:148:4","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":845,"name":"Approval","nameLocation":"626:8:4","nodeType":"EventDefinition","parameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:4","nodeType":"VariableDeclaration","scope":845,"src":"635:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":841,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:4","nodeType":"VariableDeclaration","scope":845,"src":"658:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":843,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:4","nodeType":"VariableDeclaration","scope":845,"src":"683:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:4"},"src":"620:78:4"},{"documentation":{"id":846,"nodeType":"StructuredDocumentation","src":"704:65:4","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":851,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:4","nodeType":"FunctionDefinition","parameters":{"id":847,"nodeType":"ParameterList","parameters":[],"src":"794:2:4"},"returnParameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":851,"src":"820:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:4"},"scope":902,"src":"774:55:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":852,"nodeType":"StructuredDocumentation","src":"835:71:4","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":859,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:4","nodeType":"FunctionDefinition","parameters":{"id":855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":854,"mutability":"mutable","name":"account","nameLocation":"938:7:4","nodeType":"VariableDeclaration","scope":859,"src":"930:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":853,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:4"},"returnParameters":{"id":858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":857,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":859,"src":"970:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:4"},"scope":902,"src":"911:68:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":860,"nodeType":"StructuredDocumentation","src":"985:213:4","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":869,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:4","nodeType":"FunctionDefinition","parameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"to","nameLocation":"1229:2:4","nodeType":"VariableDeclaration","scope":869,"src":"1221:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":861,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":864,"mutability":"mutable","name":"value","nameLocation":"1241:5:4","nodeType":"VariableDeclaration","scope":869,"src":"1233:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:4"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":869,"src":"1266:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":866,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:4"},"scope":902,"src":"1203:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"1278:264:4","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":879,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:4","nodeType":"FunctionDefinition","parameters":{"id":875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"owner","nameLocation":"1574:5:4","nodeType":"VariableDeclaration","scope":879,"src":"1566:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":871,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"spender","nameLocation":"1589:7:4","nodeType":"VariableDeclaration","scope":879,"src":"1581:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:4"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":879,"src":"1621:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:4"},"scope":902,"src":"1547:83:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"1636:667:4","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":889,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:4","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":882,"mutability":"mutable","name":"spender","nameLocation":"2333:7:4","nodeType":"VariableDeclaration","scope":889,"src":"2325:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":881,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"value","nameLocation":"2350:5:4","nodeType":"VariableDeclaration","scope":889,"src":"2342:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:4"},"returnParameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":889,"src":"2375:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":886,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:4"},"scope":902,"src":"2308:73:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"2387:297:4","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":901,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:4","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"from","nameLocation":"2719:4:4","nodeType":"VariableDeclaration","scope":901,"src":"2711:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"to","nameLocation":"2733:2:4","nodeType":"VariableDeclaration","scope":901,"src":"2725:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"value","nameLocation":"2745:5:4","nodeType":"VariableDeclaration","scope":901,"src":"2737:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:4"},"returnParameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":901,"src":"2770:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":898,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:4"},"scope":902,"src":"2689:87:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":903,"src":"203:2575:4","usedErrors":[],"usedEvents":[836,845]}],"src":"106:2673:4"},"id":4},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","exportedSymbols":{"Context":[1447],"ERC20":[824],"ERC20Burnable":[948]},"id":949,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":904,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"124:24:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":906,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":949,"sourceUnit":825,"src":"150:35:5","symbolAliases":[{"foreign":{"id":905,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"158:5:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../../utils/Context.sol","id":908,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":949,"sourceUnit":1448,"src":"186:51:5","symbolAliases":[{"foreign":{"id":907,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"194:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":910,"name":"Context","nameLocations":["483:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1447,"src":"483:7:5"},"id":911,"nodeType":"InheritanceSpecifier","src":"483:7:5"},{"baseName":{"id":912,"name":"ERC20","nameLocations":["492:5:5"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"492:5:5"},"id":913,"nodeType":"InheritanceSpecifier","src":"492:5:5"}],"canonicalName":"ERC20Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"239:208:5","text":" @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."},"fullyImplemented":true,"id":948,"linearizedBaseContracts":[948,824,214,1128,902,1447],"name":"ERC20Burnable","nameLocation":"466:13:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":925,"nodeType":"Block","src":"662:43:5","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":920,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"678:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"678:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"692:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":919,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"672:5:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"672:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"672:26:5"}]},"documentation":{"id":914,"nodeType":"StructuredDocumentation","src":"504:109:5","text":" @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."},"functionSelector":"42966c68","id":926,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"627:4:5","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"value","nameLocation":"640:5:5","nodeType":"VariableDeclaration","scope":926,"src":"632:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"632:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"631:15:5"},"returnParameters":{"id":918,"nodeType":"ParameterList","parameters":[],"src":"662:0:5"},"scope":948,"src":"618:87:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":946,"nodeType":"Block","src":"1086:93:5","statements":[{"expression":{"arguments":[{"id":935,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"1112:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":936,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"1121:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1121:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"1135:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":934,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1096:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1096:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":940,"nodeType":"ExpressionStatement","src":"1096:45:5"},{"expression":{"arguments":[{"id":942,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"1157:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"1166:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":941,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"1151:5:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1151:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":945,"nodeType":"ExpressionStatement","src":"1151:21:5"}]},"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"711:305:5","text":" @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."},"functionSelector":"79cc6790","id":947,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1030:8:5","nodeType":"FunctionDefinition","parameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"account","nameLocation":"1047:7:5","nodeType":"VariableDeclaration","scope":947,"src":"1039:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"1039:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"value","nameLocation":"1064:5:5","nodeType":"VariableDeclaration","scope":947,"src":"1056:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1038:32:5"},"returnParameters":{"id":933,"nodeType":"ParameterList","parameters":[],"src":"1086:0:5"},"scope":948,"src":"1021:158:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":949,"src":"448:733:5","usedErrors":[184,189,194,203,208,213],"usedEvents":[836,845]}],"src":"124:1058:5"},"id":5},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol","exportedSymbols":{"ECDSA":[2445],"EIP712":[2672],"ERC20":[824],"ERC20Permit":[1102],"IERC20Permit":[1164],"Nonces":[1515]},"id":1103,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":950,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"122:24:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"./IERC20Permit.sol","id":952,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1103,"sourceUnit":1165,"src":"148:48:6","symbolAliases":[{"foreign":{"id":951,"name":"IERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"156:12:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":954,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1103,"sourceUnit":825,"src":"197:35:6","symbolAliases":[{"foreign":{"id":953,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"205:5:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"../../../utils/cryptography/ECDSA.sol","id":956,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1103,"sourceUnit":2446,"src":"233:60:6","symbolAliases":[{"foreign":{"id":955,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"241:5:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"../../../utils/cryptography/EIP712.sol","id":958,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1103,"sourceUnit":2673,"src":"294:62:6","symbolAliases":[{"foreign":{"id":957,"name":"EIP712","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"302:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Nonces.sol","file":"../../../utils/Nonces.sol","id":960,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1103,"sourceUnit":1516,"src":"357:49:6","symbolAliases":[{"foreign":{"id":959,"name":"Nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"365:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":962,"name":"ERC20","nameLocations":["929:5:6"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"929:5:6"},"id":963,"nodeType":"InheritanceSpecifier","src":"929:5:6"},{"baseName":{"id":964,"name":"IERC20Permit","nameLocations":["936:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":1164,"src":"936:12:6"},"id":965,"nodeType":"InheritanceSpecifier","src":"936:12:6"},{"baseName":{"id":966,"name":"EIP712","nameLocations":["950:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":2672,"src":"950:6:6"},"id":967,"nodeType":"InheritanceSpecifier","src":"950:6:6"},{"baseName":{"id":968,"name":"Nonces","nameLocations":["958:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1515,"src":"958:6:6"},"id":969,"nodeType":"InheritanceSpecifier","src":"958:6:6"}],"canonicalName":"ERC20Permit","contractDependencies":[],"contractKind":"contract","documentation":{"id":961,"nodeType":"StructuredDocumentation","src":"408:487:6","text":" @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":true,"id":1102,"linearizedBaseContracts":[1102,1515,2672,172,1164,824,214,1128,902,1447],"name":"ERC20Permit","nameLocation":"914:11:6","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":974,"mutability":"constant","name":"PERMIT_TYPEHASH","nameLocation":"996:15:6","nodeType":"VariableDeclaration","scope":1102,"src":"971:146:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":970,"name":"bytes32","nodeType":"ElementaryTypeName","src":"971:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1032:84:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":971,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1022:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1022:95:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"documentation":{"id":975,"nodeType":"StructuredDocumentation","src":"1124:52:6","text":" @dev Permit deadline has expired."},"errorSelector":"62791302","id":979,"name":"ERC2612ExpiredSignature","nameLocation":"1187:23:6","nodeType":"ErrorDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":977,"mutability":"mutable","name":"deadline","nameLocation":"1219:8:6","nodeType":"VariableDeclaration","scope":979,"src":"1211:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:18:6"},"src":"1181:48:6"},{"documentation":{"id":980,"nodeType":"StructuredDocumentation","src":"1235:45:6","text":" @dev Mismatched signature."},"errorSelector":"4b800e46","id":986,"name":"ERC2612InvalidSigner","nameLocation":"1291:20:6","nodeType":"ErrorDefinition","parameters":{"id":985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":982,"mutability":"mutable","name":"signer","nameLocation":"1320:6:6","nodeType":"VariableDeclaration","scope":986,"src":"1312:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":981,"name":"address","nodeType":"ElementaryTypeName","src":"1312:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":984,"mutability":"mutable","name":"owner","nameLocation":"1336:5:6","nodeType":"VariableDeclaration","scope":986,"src":"1328:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":983,"name":"address","nodeType":"ElementaryTypeName","src":"1328:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1311:31:6"},"src":"1285:58:6"},{"body":{"id":996,"nodeType":"Block","src":"1624:2:6","statements":[]},"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"1349:220:6","text":" @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."},"id":997,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":992,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"1613:4:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1619:3:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"id":994,"kind":"baseConstructorSpecifier","modifierName":{"id":991,"name":"EIP712","nameLocations":["1606:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":2672,"src":"1606:6:6"},"nodeType":"ModifierInvocation","src":"1606:17:6"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"mutability":"mutable","name":"name","nameLocation":"1600:4:6","nodeType":"VariableDeclaration","scope":997,"src":"1586:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":988,"name":"string","nodeType":"ElementaryTypeName","src":"1586:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1585:20:6"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[],"src":"1624:0:6"},"scope":1102,"src":"1574:52:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1149],"body":{"id":1073,"nodeType":"Block","src":"1869:483:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1015,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1883:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1889:9:6","memberName":"timestamp","nodeType":"MemberAccess","src":"1883:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1017,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"1901:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1883:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1024,"nodeType":"IfStatement","src":"1879:97:6","trueBody":{"id":1023,"nodeType":"Block","src":"1911:65:6","statements":[{"errorCall":{"arguments":[{"id":1020,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"1956:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1019,"name":"ERC2612ExpiredSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"1932:23:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1932:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1022,"nodeType":"RevertStatement","src":"1925:40:6"}]}},{"assignments":[1026],"declarations":[{"constant":false,"id":1026,"mutability":"mutable","name":"structHash","nameLocation":"1994:10:6","nodeType":"VariableDeclaration","scope":1073,"src":"1986:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1986:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1040,"initialValue":{"arguments":[{"arguments":[{"id":1030,"name":"PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"2028:15:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1031,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2045:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1032,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"2052:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1033,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"2061:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1035,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2078:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1034,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"2068:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2068:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1037,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"2086:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1028,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2017:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2021:6:6","memberName":"encode","nodeType":"MemberAccess","src":"2017:10:6","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2017:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1027,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2007:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2007:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1986:110:6"},{"assignments":[1042],"declarations":[{"constant":false,"id":1042,"mutability":"mutable","name":"hash","nameLocation":"2115:4:6","nodeType":"VariableDeclaration","scope":1073,"src":"2107:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2107:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1046,"initialValue":{"arguments":[{"id":1044,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"2139:10:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1043,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"2122:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2122:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2107:43:6"},{"assignments":[1048],"declarations":[{"constant":false,"id":1048,"mutability":"mutable","name":"signer","nameLocation":"2169:6:6","nodeType":"VariableDeclaration","scope":1073,"src":"2161:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"2161:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1056,"initialValue":{"arguments":[{"id":1051,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"2192:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1052,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"2198:1:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1053,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2201:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1054,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"2204:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1049,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"2178:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$2445_$","typeString":"type(library ECDSA)"}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2184:7:6","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2395,"src":"2178:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2178:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2161:45:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1057,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"2220:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1058,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2230:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2220:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1066,"nodeType":"IfStatement","src":"2216:88:6","trueBody":{"id":1065,"nodeType":"Block","src":"2237:67:6","statements":[{"errorCall":{"arguments":[{"id":1061,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"2279:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1062,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2287:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1060,"name":"ERC2612InvalidSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"2258:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$","typeString":"function (address,address) pure returns (error)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1064,"nodeType":"RevertStatement","src":"2251:42:6"}]}},{"expression":{"arguments":[{"id":1068,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2323:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1069,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"2330:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"2339:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1067,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[715,775],"referencedDeclaration":715,"src":"2314:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2314:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1072,"nodeType":"ExpressionStatement","src":"2314:31:6"}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"1632:43:6","text":" @inheritdoc IERC20Permit"},"functionSelector":"d505accf","id":1074,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1689:6:6","nodeType":"FunctionDefinition","parameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"owner","nameLocation":"1713:5:6","nodeType":"VariableDeclaration","scope":1074,"src":"1705:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"1705:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"spender","nameLocation":"1736:7:6","nodeType":"VariableDeclaration","scope":1074,"src":"1728:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1004,"mutability":"mutable","name":"value","nameLocation":"1761:5:6","nodeType":"VariableDeclaration","scope":1074,"src":"1753:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"1753:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"deadline","nameLocation":"1784:8:6","nodeType":"VariableDeclaration","scope":1074,"src":"1776:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"1776:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1008,"mutability":"mutable","name":"v","nameLocation":"1808:1:6","nodeType":"VariableDeclaration","scope":1074,"src":"1802:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1007,"name":"uint8","nodeType":"ElementaryTypeName","src":"1802:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1010,"mutability":"mutable","name":"r","nameLocation":"1827:1:6","nodeType":"VariableDeclaration","scope":1074,"src":"1819:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1009,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1819:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"s","nameLocation":"1846:1:6","nodeType":"VariableDeclaration","scope":1074,"src":"1838:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1011,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1838:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1695:158:6"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[],"src":"1869:0:6"},"scope":1102,"src":"1680:672:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1157,1474],"body":{"id":1090,"nodeType":"Block","src":"2506:43:6","statements":[{"expression":{"arguments":[{"id":1087,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"2536:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1085,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2523:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20Permit_$1102_$","typeString":"type(contract super ERC20Permit)"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2529:6:6","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1474,"src":"2523:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1084,"id":1089,"nodeType":"Return","src":"2516:26:6"}]},"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"2358:43:6","text":" @inheritdoc IERC20Permit"},"functionSelector":"7ecebe00","id":1091,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"2415:6:6","nodeType":"FunctionDefinition","overrides":{"id":1081,"nodeType":"OverrideSpecifier","overrides":[{"id":1079,"name":"IERC20Permit","nameLocations":["2466:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":1164,"src":"2466:12:6"},{"id":1080,"name":"Nonces","nameLocations":["2480:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1515,"src":"2480:6:6"}],"src":"2457:30:6"},"parameters":{"id":1078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"owner","nameLocation":"2430:5:6","nodeType":"VariableDeclaration","scope":1091,"src":"2422:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"2422:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2421:15:6"},"returnParameters":{"id":1084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1083,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1091,"src":"2497:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"2497:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2496:9:6"},"scope":1102,"src":"2406:143:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1163],"body":{"id":1100,"nodeType":"Block","src":"2724:44:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1097,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"2741:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2741:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1096,"id":1099,"nodeType":"Return","src":"2734:27:6"}]},"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"2555:43:6","text":" @inheritdoc IERC20Permit"},"functionSelector":"3644e515","id":1101,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2665:16:6","nodeType":"FunctionDefinition","parameters":{"id":1093,"nodeType":"ParameterList","parameters":[],"src":"2681:2:6"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1101,"src":"2715:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2715:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2714:9:6"},"scope":1102,"src":"2656:112:6","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1103,"src":"896:1874:6","usedErrors":[184,189,194,203,208,213,979,986,1457,1529,1531,2108,2113,2118],"usedEvents":[152,836,845]}],"src":"122:2649:6"},"id":6},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[902],"IERC20Metadata":[1128]},"id":1129,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1104,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"125:24:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1106,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1129,"sourceUnit":903,"src":"151:37:7","symbolAliases":[{"foreign":{"id":1105,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"159:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1108,"name":"IERC20","nameLocations":["305:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":902,"src":"305:6:7"},"id":1109,"nodeType":"InheritanceSpecifier","src":"305:6:7"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"190:86:7","text":" @dev Interface for the optional metadata functions from the ERC20 standard."},"fullyImplemented":false,"id":1128,"linearizedBaseContracts":[1128,902],"name":"IERC20Metadata","nameLocation":"287:14:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1110,"nodeType":"StructuredDocumentation","src":"318:54:7","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1115,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:7","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[],"src":"390:2:7"},"returnParameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1115,"src":"416:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1112,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:7"},"scope":1128,"src":"377:54:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1116,"nodeType":"StructuredDocumentation","src":"437:56:7","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1121,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:7","nodeType":"FunctionDefinition","parameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"513:2:7"},"returnParameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1121,"src":"539:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1118,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:7"},"scope":1128,"src":"498:56:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1122,"nodeType":"StructuredDocumentation","src":"560:65:7","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1127,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:7","nodeType":"FunctionDefinition","parameters":{"id":1123,"nodeType":"ParameterList","parameters":[],"src":"647:2:7"},"returnParameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1127,"src":"673:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1124,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:7"},"scope":1128,"src":"630:50:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1129,"src":"277:405:7","usedErrors":[],"usedEvents":[836,845]}],"src":"125:558:7"},"id":7},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1164]},"id":1165,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1130,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1131,"nodeType":"StructuredDocumentation","src":"149:1963:8","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":1164,"linearizedBaseContracts":[1164],"name":"IERC20Permit","nameLocation":"2123:12:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1132,"nodeType":"StructuredDocumentation","src":"2142:850:8","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":1149,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3006:6:8","nodeType":"FunctionDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1134,"mutability":"mutable","name":"owner","nameLocation":"3030:5:8","nodeType":"VariableDeclaration","scope":1149,"src":"3022:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1133,"name":"address","nodeType":"ElementaryTypeName","src":"3022:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1136,"mutability":"mutable","name":"spender","nameLocation":"3053:7:8","nodeType":"VariableDeclaration","scope":1149,"src":"3045:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1135,"name":"address","nodeType":"ElementaryTypeName","src":"3045:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1138,"mutability":"mutable","name":"value","nameLocation":"3078:5:8","nodeType":"VariableDeclaration","scope":1149,"src":"3070:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"3070:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"deadline","nameLocation":"3101:8:8","nodeType":"VariableDeclaration","scope":1149,"src":"3093:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"3093:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"v","nameLocation":"3125:1:8","nodeType":"VariableDeclaration","scope":1149,"src":"3119:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1141,"name":"uint8","nodeType":"ElementaryTypeName","src":"3119:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"r","nameLocation":"3144:1:8","nodeType":"VariableDeclaration","scope":1149,"src":"3136:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1143,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3136:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1146,"mutability":"mutable","name":"s","nameLocation":"3163:1:8","nodeType":"VariableDeclaration","scope":1149,"src":"3155:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3155:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3012:158:8"},"returnParameters":{"id":1148,"nodeType":"ParameterList","parameters":[],"src":"3179:0:8"},"scope":1164,"src":"2997:183:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1150,"nodeType":"StructuredDocumentation","src":"3186:294:8","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1157,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3494:6:8","nodeType":"FunctionDefinition","parameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1152,"mutability":"mutable","name":"owner","nameLocation":"3509:5:8","nodeType":"VariableDeclaration","scope":1157,"src":"3501:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1151,"name":"address","nodeType":"ElementaryTypeName","src":"3501:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3500:15:8"},"returnParameters":{"id":1156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1157,"src":"3539:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1154,"name":"uint256","nodeType":"ElementaryTypeName","src":"3539:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3538:9:8"},"scope":1164,"src":"3485:63:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1158,"nodeType":"StructuredDocumentation","src":"3554:128:8","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1163,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3749:16:8","nodeType":"FunctionDefinition","parameters":{"id":1159,"nodeType":"ParameterList","parameters":[],"src":"3765:2:8"},"returnParameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"3791:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3791:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3790:9:8"},"scope":1164,"src":"3740:60:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1165,"src":"2113:1689:8","usedErrors":[],"usedEvents":[]}],"src":"123:3680:8"},"id":8},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1417]},"id":1418,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1166,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"127:67:9","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1417,"linearizedBaseContracts":[1417],"name":"Address","nameLocation":"203:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1168,"nodeType":"StructuredDocumentation","src":"217:94:9","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cd786059","id":1172,"name":"AddressInsufficientBalance","nameLocation":"322:26:9","nodeType":"ErrorDefinition","parameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"account","nameLocation":"357:7:9","nodeType":"VariableDeclaration","scope":1172,"src":"349:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:17:9"},"src":"316:50:9"},{"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"372:75:9","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":1177,"name":"AddressEmptyCode","nameLocation":"458:16:9","nodeType":"ErrorDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"target","nameLocation":"483:6:9","nodeType":"VariableDeclaration","scope":1177,"src":"475:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1174,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:9"},"src":"452:39:9"},{"documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"497:89:9","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"1425ea42","id":1180,"name":"FailedInnerCall","nameLocation":"597:15:9","nodeType":"ErrorDefinition","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[],"src":"612:2:9"},"src":"591:24:9"},{"body":{"id":1220,"nodeType":"Block","src":"1602:260:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1190,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1624:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}],"id":1189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1188,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:9","typeDescriptions":{}}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:7:9","memberName":"balance","nodeType":"MemberAccess","src":"1616:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1193,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"1640:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1616:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1203,"nodeType":"IfStatement","src":"1612:109:9","trueBody":{"id":1202,"nodeType":"Block","src":"1648:73:9","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1198,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1704:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}],"id":1197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1696:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:9","typeDescriptions":{}}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1195,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"1669:26:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1201,"nodeType":"RevertStatement","src":"1662:48:9"}]}},{"assignments":[1205,null],"declarations":[{"constant":false,"id":1205,"mutability":"mutable","name":"success","nameLocation":"1737:7:9","nodeType":"VariableDeclaration","scope":1220,"src":"1732:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1204,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1212,"initialValue":{"arguments":[{"hexValue":"","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1206,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1750:9:9","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1760:4:9","memberName":"call","nodeType":"MemberAccess","src":"1750:14:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1208,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"1772:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1750:29:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1731:52:9"},{"condition":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:8:9","subExpression":{"id":1213,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1798:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1219,"nodeType":"IfStatement","src":"1793:63:9","trueBody":{"id":1218,"nodeType":"Block","src":"1807:49:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1215,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"1828:15:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1217,"nodeType":"RevertStatement","src":"1821:24:9"}]}}]},"documentation":{"id":1181,"nodeType":"StructuredDocumentation","src":"621:905:9","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1221,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1540:9:9","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"recipient","nameLocation":"1566:9:9","nodeType":"VariableDeclaration","scope":1221,"src":"1550:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1182,"name":"address","nodeType":"ElementaryTypeName","src":"1550:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"amount","nameLocation":"1585:6:9","nodeType":"VariableDeclaration","scope":1221,"src":"1577:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:43:9"},"returnParameters":{"id":1187,"nodeType":"ParameterList","parameters":[],"src":"1602:0:9"},"scope":1417,"src":"1531:331:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1237,"nodeType":"Block","src":"2794:62:9","statements":[{"expression":{"arguments":[{"id":1232,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"2833:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1233,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"2841:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2847:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1231,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"2811:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2811:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1230,"id":1236,"nodeType":"Return","src":"2804:45:9"}]},"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"1868:832:9","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":1238,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2714:12:9","nodeType":"FunctionDefinition","parameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"target","nameLocation":"2735:6:9","nodeType":"VariableDeclaration","scope":1238,"src":"2727:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1223,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1226,"mutability":"mutable","name":"data","nameLocation":"2756:4:9","nodeType":"VariableDeclaration","scope":1238,"src":"2743:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1225,"name":"bytes","nodeType":"ElementaryTypeName","src":"2743:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2726:35:9"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1238,"src":"2780:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1228,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2779:14:9"},"scope":1417,"src":"2705:151:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1283,"nodeType":"Block","src":"3293:279:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1252,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3315:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}],"id":1251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1250,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:9","typeDescriptions":{}}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:9","memberName":"balance","nodeType":"MemberAccess","src":"3307:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"3331:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3307:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1265,"nodeType":"IfStatement","src":"3303:108:9","trueBody":{"id":1264,"nodeType":"Block","src":"3338:73:9","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1260,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3394:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1417","typeString":"library Address"}],"id":1259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3386:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1258,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:9","typeDescriptions":{}}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1257,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"3359:26:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1263,"nodeType":"RevertStatement","src":"3352:48:9"}]}},{"assignments":[1267,1269],"declarations":[{"constant":false,"id":1267,"mutability":"mutable","name":"success","nameLocation":"3426:7:9","nodeType":"VariableDeclaration","scope":1283,"src":"3421:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1266,"name":"bool","nodeType":"ElementaryTypeName","src":"3421:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"returndata","nameLocation":"3448:10:9","nodeType":"VariableDeclaration","scope":1283,"src":"3435:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1268,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1276,"initialValue":{"arguments":[{"id":1274,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"3488:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1270,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"3462:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:4:9","memberName":"call","nodeType":"MemberAccess","src":"3462:11:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1272,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"3481:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3462:25:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3420:73:9"},{"expression":{"arguments":[{"id":1278,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"3537:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1279,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"3545:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1280,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"3554:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1277,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"3510:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1249,"id":1282,"nodeType":"Return","src":"3503:62:9"}]},"documentation":{"id":1239,"nodeType":"StructuredDocumentation","src":"2862:313:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":1284,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"3189:21:9","nodeType":"FunctionDefinition","parameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"target","nameLocation":"3219:6:9","nodeType":"VariableDeclaration","scope":1284,"src":"3211:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1240,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1243,"mutability":"mutable","name":"data","nameLocation":"3240:4:9","nodeType":"VariableDeclaration","scope":1284,"src":"3227:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1242,"name":"bytes","nodeType":"ElementaryTypeName","src":"3227:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"value","nameLocation":"3254:5:9","nodeType":"VariableDeclaration","scope":1284,"src":"3246:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3210:50:9"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1284,"src":"3279:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1247,"name":"bytes","nodeType":"ElementaryTypeName","src":"3279:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3278:14:9"},"scope":1417,"src":"3180:392:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1309,"nodeType":"Block","src":"3811:154:9","statements":[{"assignments":[1295,1297],"declarations":[{"constant":false,"id":1295,"mutability":"mutable","name":"success","nameLocation":"3827:7:9","nodeType":"VariableDeclaration","scope":1309,"src":"3822:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1294,"name":"bool","nodeType":"ElementaryTypeName","src":"3822:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"returndata","nameLocation":"3849:10:9","nodeType":"VariableDeclaration","scope":1309,"src":"3836:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1296,"name":"bytes","nodeType":"ElementaryTypeName","src":"3836:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1302,"initialValue":{"arguments":[{"id":1300,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"3881:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1298,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"3863:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:10:9","memberName":"staticcall","nodeType":"MemberAccess","src":"3863:17:9","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3821:65:9"},{"expression":{"arguments":[{"id":1304,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"3930:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1305,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"3938:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1306,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"3947:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1303,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"3903:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1293,"id":1308,"nodeType":"Return","src":"3896:62:9"}]},"documentation":{"id":1285,"nodeType":"StructuredDocumentation","src":"3578:128:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":1310,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3720:18:9","nodeType":"FunctionDefinition","parameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1287,"mutability":"mutable","name":"target","nameLocation":"3747:6:9","nodeType":"VariableDeclaration","scope":1310,"src":"3739:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1286,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"data","nameLocation":"3768:4:9","nodeType":"VariableDeclaration","scope":1310,"src":"3755:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1288,"name":"bytes","nodeType":"ElementaryTypeName","src":"3755:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:35:9"},"returnParameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1310,"src":"3797:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1291,"name":"bytes","nodeType":"ElementaryTypeName","src":"3797:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3796:14:9"},"scope":1417,"src":"3711:254:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1335,"nodeType":"Block","src":"4203:156:9","statements":[{"assignments":[1321,1323],"declarations":[{"constant":false,"id":1321,"mutability":"mutable","name":"success","nameLocation":"4219:7:9","nodeType":"VariableDeclaration","scope":1335,"src":"4214:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1320,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1323,"mutability":"mutable","name":"returndata","nameLocation":"4241:10:9","nodeType":"VariableDeclaration","scope":1335,"src":"4228:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1322,"name":"bytes","nodeType":"ElementaryTypeName","src":"4228:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1328,"initialValue":{"arguments":[{"id":1326,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"4275:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1324,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"4255:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:12:9","memberName":"delegatecall","nodeType":"MemberAccess","src":"4255:19:9","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4213:67:9"},{"expression":{"arguments":[{"id":1330,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"4324:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1331,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"4332:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1332,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"4341:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1329,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"4297:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1319,"id":1334,"nodeType":"Return","src":"4290:62:9"}]},"documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"3971:130:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"4115:20:9","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"target","nameLocation":"4144:6:9","nodeType":"VariableDeclaration","scope":1336,"src":"4136:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"4136:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"data","nameLocation":"4165:4:9","nodeType":"VariableDeclaration","scope":1336,"src":"4152:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1314,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4135:35:9"},"returnParameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1336,"src":"4189:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1317,"name":"bytes","nodeType":"ElementaryTypeName","src":"4189:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4188:14:9"},"scope":1417,"src":"4106:253:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1375,"nodeType":"Block","src":"4783:424:9","statements":[{"condition":{"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4797:8:9","subExpression":{"id":1348,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"4798:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1373,"nodeType":"Block","src":"4857:344:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1355,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"5045:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:6:9","memberName":"length","nodeType":"MemberAccess","src":"5045:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5045:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1359,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"5071:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:4:9","memberName":"code","nodeType":"MemberAccess","src":"5071:11:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:9","memberName":"length","nodeType":"MemberAccess","src":"5071:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5071:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5045:49:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1370,"nodeType":"IfStatement","src":"5041:119:9","trueBody":{"id":1369,"nodeType":"Block","src":"5096:64:9","statements":[{"errorCall":{"arguments":[{"id":1366,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"5138:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1365,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"5121:16:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1368,"nodeType":"RevertStatement","src":"5114:31:9"}]}},{"expression":{"id":1371,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"5180:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1347,"id":1372,"nodeType":"Return","src":"5173:17:9"}]},"id":1374,"nodeType":"IfStatement","src":"4793:408:9","trueBody":{"id":1354,"nodeType":"Block","src":"4807:44:9","statements":[{"expression":{"arguments":[{"id":1351,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"4829:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1350,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"4821:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4821:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1353,"nodeType":"ExpressionStatement","src":"4821:19:9"}]}}]},"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"4365:255:9","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."},"id":1376,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4634:26:9","nodeType":"FunctionDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"target","nameLocation":"4678:6:9","nodeType":"VariableDeclaration","scope":1376,"src":"4670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"4670:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"success","nameLocation":"4699:7:9","nodeType":"VariableDeclaration","scope":1376,"src":"4694:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1340,"name":"bool","nodeType":"ElementaryTypeName","src":"4694:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"returndata","nameLocation":"4729:10:9","nodeType":"VariableDeclaration","scope":1376,"src":"4716:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1342,"name":"bytes","nodeType":"ElementaryTypeName","src":"4716:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4660:85:9"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1376,"src":"4769:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1345,"name":"bytes","nodeType":"ElementaryTypeName","src":"4769:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4768:14:9"},"scope":1417,"src":"4625:582:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1397,"nodeType":"Block","src":"5509:122:9","statements":[{"condition":{"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5523:8:9","subExpression":{"id":1386,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"5524:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1395,"nodeType":"Block","src":"5583:42:9","statements":[{"expression":{"id":1393,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"5604:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1385,"id":1394,"nodeType":"Return","src":"5597:17:9"}]},"id":1396,"nodeType":"IfStatement","src":"5519:106:9","trueBody":{"id":1392,"nodeType":"Block","src":"5533:44:9","statements":[{"expression":{"arguments":[{"id":1389,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"5555:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1388,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"5547:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1391,"nodeType":"ExpressionStatement","src":"5547:19:9"}]}}]},"documentation":{"id":1377,"nodeType":"StructuredDocumentation","src":"5213:189:9","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."},"id":1398,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5416:16:9","nodeType":"FunctionDefinition","parameters":{"id":1382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"success","nameLocation":"5438:7:9","nodeType":"VariableDeclaration","scope":1398,"src":"5433:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1378,"name":"bool","nodeType":"ElementaryTypeName","src":"5433:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1381,"mutability":"mutable","name":"returndata","nameLocation":"5460:10:9","nodeType":"VariableDeclaration","scope":1398,"src":"5447:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1380,"name":"bytes","nodeType":"ElementaryTypeName","src":"5447:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5432:39:9"},"returnParameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"5495:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1383,"name":"bytes","nodeType":"ElementaryTypeName","src":"5495:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5494:14:9"},"scope":1417,"src":"5407:224:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1415,"nodeType":"Block","src":"5798:461:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1404,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"5874:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5885:6:9","memberName":"length","nodeType":"MemberAccess","src":"5874:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5874:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1413,"nodeType":"Block","src":"6204:49:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1410,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"6225:15:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1412,"nodeType":"RevertStatement","src":"6218:24:9"}]},"id":1414,"nodeType":"IfStatement","src":"5870:383:9","trueBody":{"id":1409,"nodeType":"Block","src":"5897:301:9","statements":[{"AST":{"nativeSrc":"6055:133:9","nodeType":"YulBlock","src":"6055:133:9","statements":[{"nativeSrc":"6073:40:9","nodeType":"YulVariableDeclaration","src":"6073:40:9","value":{"arguments":[{"name":"returndata","nativeSrc":"6102:10:9","nodeType":"YulIdentifier","src":"6102:10:9"}],"functionName":{"name":"mload","nativeSrc":"6096:5:9","nodeType":"YulIdentifier","src":"6096:5:9"},"nativeSrc":"6096:17:9","nodeType":"YulFunctionCall","src":"6096:17:9"},"variables":[{"name":"returndata_size","nativeSrc":"6077:15:9","nodeType":"YulTypedName","src":"6077:15:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6141:2:9","nodeType":"YulLiteral","src":"6141:2:9","type":"","value":"32"},{"name":"returndata","nativeSrc":"6145:10:9","nodeType":"YulIdentifier","src":"6145:10:9"}],"functionName":{"name":"add","nativeSrc":"6137:3:9","nodeType":"YulIdentifier","src":"6137:3:9"},"nativeSrc":"6137:19:9","nodeType":"YulFunctionCall","src":"6137:19:9"},{"name":"returndata_size","nativeSrc":"6158:15:9","nodeType":"YulIdentifier","src":"6158:15:9"}],"functionName":{"name":"revert","nativeSrc":"6130:6:9","nodeType":"YulIdentifier","src":"6130:6:9"},"nativeSrc":"6130:44:9","nodeType":"YulFunctionCall","src":"6130:44:9"},"nativeSrc":"6130:44:9","nodeType":"YulExpressionStatement","src":"6130:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1401,"isOffset":false,"isSlot":false,"src":"6102:10:9","valueSize":1},{"declaration":1401,"isOffset":false,"isSlot":false,"src":"6145:10:9","valueSize":1}],"id":1408,"nodeType":"InlineAssembly","src":"6046:142:9"}]}}]},"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"5637:101:9","text":" @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."},"id":1416,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5752:7:9","nodeType":"FunctionDefinition","parameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"returndata","nameLocation":"5773:10:9","nodeType":"VariableDeclaration","scope":1416,"src":"5760:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1400,"name":"bytes","nodeType":"ElementaryTypeName","src":"5760:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5759:25:9"},"returnParameters":{"id":1403,"nodeType":"ParameterList","parameters":[],"src":"5798:0:9"},"scope":1417,"src":"5743:516:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1418,"src":"195:6066:9","usedErrors":[1172,1177,1180],"usedEvents":[]}],"src":"101:6161:9"},"id":9},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1447]},"id":1448,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1419,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:10"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1420,"nodeType":"StructuredDocumentation","src":"127:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1447,"linearizedBaseContracts":[1447],"name":"Context","nameLocation":"642:7:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1428,"nodeType":"Block","src":"718:34:10","statements":[{"expression":{"expression":{"id":1425,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:10","memberName":"sender","nodeType":"MemberAccess","src":"735:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1424,"id":1427,"nodeType":"Return","src":"728:17:10"}]},"id":1429,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:10","nodeType":"FunctionDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[],"src":"675:2:10"},"returnParameters":{"id":1424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1429,"src":"709:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1422,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:10"},"scope":1447,"src":"656:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1437,"nodeType":"Block","src":"825:32:10","statements":[{"expression":{"expression":{"id":1434,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:10","memberName":"data","nodeType":"MemberAccess","src":"842:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1433,"id":1436,"nodeType":"Return","src":"835:15:10"}]},"id":1438,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:10","nodeType":"FunctionDefinition","parameters":{"id":1430,"nodeType":"ParameterList","parameters":[],"src":"775:2:10"},"returnParameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1438,"src":"809:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1431,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:10"},"scope":1447,"src":"758:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1445,"nodeType":"Block","src":"935:25:10","statements":[{"expression":{"hexValue":"30","id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1442,"id":1444,"nodeType":"Return","src":"945:8:10"}]},"id":1446,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:10","nodeType":"FunctionDefinition","parameters":{"id":1439,"nodeType":"ParameterList","parameters":[],"src":"892:2:10"},"returnParameters":{"id":1442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1446,"src":"926:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1440,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:10"},"scope":1447,"src":"863:97:10","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1448,"src":"624:338:10","usedErrors":[],"usedEvents":[]}],"src":"101:862:10"},"id":10},"@openzeppelin/contracts/utils/Nonces.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Nonces.sol","exportedSymbols":{"Nonces":[1515]},"id":1516,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1449,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"99:24:11"},{"abstract":true,"baseContracts":[],"canonicalName":"Nonces","contractDependencies":[],"contractKind":"contract","documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"125:83:11","text":" @dev Provides tracking nonces for addresses. Nonces will only increment."},"fullyImplemented":true,"id":1515,"linearizedBaseContracts":[1515],"name":"Nonces","nameLocation":"227:6:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1451,"nodeType":"StructuredDocumentation","src":"240:90:11","text":" @dev The nonce used for an `account` is not the expected current nonce."},"errorSelector":"752d88c0","id":1457,"name":"InvalidAccountNonce","nameLocation":"341:19:11","nodeType":"ErrorDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"account","nameLocation":"369:7:11","nodeType":"VariableDeclaration","scope":1457,"src":"361:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1452,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1455,"mutability":"mutable","name":"currentNonce","nameLocation":"386:12:11","nodeType":"VariableDeclaration","scope":1457,"src":"378:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1454,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"360:39:11"},"src":"335:65:11"},{"constant":false,"id":1461,"mutability":"mutable","name":"_nonces","nameLocation":"450:7:11","nodeType":"VariableDeclaration","scope":1515,"src":"406:51:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1460,"keyName":"account","keyNameLocation":"422:7:11","keyType":{"id":1458,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"406:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1459,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":1473,"nodeType":"Block","src":"607:38:11","statements":[{"expression":{"baseExpression":{"id":1469,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"624:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1471,"indexExpression":{"id":1470,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"632:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"624:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1468,"id":1472,"nodeType":"Return","src":"617:21:11"}]},"documentation":{"id":1462,"nodeType":"StructuredDocumentation","src":"464:69:11","text":" @dev Returns the next unused nonce for an address."},"functionSelector":"7ecebe00","id":1474,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"547:6:11","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1464,"mutability":"mutable","name":"owner","nameLocation":"562:5:11","nodeType":"VariableDeclaration","scope":1474,"src":"554:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1463,"name":"address","nodeType":"ElementaryTypeName","src":"554:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"553:15:11"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1474,"src":"598:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1466,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"597:9:11"},"scope":1515,"src":"538:107:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1488,"nodeType":"Block","src":"828:326:11","statements":[{"id":1487,"nodeType":"UncheckedBlock","src":"1031:117:11","statements":[{"expression":{"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1121:16:11","subExpression":{"baseExpression":{"id":1482,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"1121:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1484,"indexExpression":{"id":1483,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"1129:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1121:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1481,"id":1486,"nodeType":"Return","src":"1114:23:11"}]}]},"documentation":{"id":1475,"nodeType":"StructuredDocumentation","src":"651:103:11","text":" @dev Consumes a nonce.\n Returns the current value and increments nonce."},"id":1489,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"768:9:11","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1477,"mutability":"mutable","name":"owner","nameLocation":"786:5:11","nodeType":"VariableDeclaration","scope":1489,"src":"778:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1476,"name":"address","nodeType":"ElementaryTypeName","src":"778:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"777:15:11"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1489,"src":"819:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1479,"name":"uint256","nodeType":"ElementaryTypeName","src":"819:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"818:9:11"},"scope":1515,"src":"759:395:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1513,"nodeType":"Block","src":"1338:149:11","statements":[{"assignments":[1498],"declarations":[{"constant":false,"id":1498,"mutability":"mutable","name":"current","nameLocation":"1356:7:11","nodeType":"VariableDeclaration","scope":1513,"src":"1348:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1502,"initialValue":{"arguments":[{"id":1500,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1376:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1499,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"1366:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1366:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1348:34:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1503,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"1396:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1504,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"1405:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1396:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1512,"nodeType":"IfStatement","src":"1392:89:11","trueBody":{"id":1511,"nodeType":"Block","src":"1414:67:11","statements":[{"errorCall":{"arguments":[{"id":1507,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1455:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1508,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"1462:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1506,"name":"InvalidAccountNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"1435:19:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256) pure returns (error)"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1435:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1510,"nodeType":"RevertStatement","src":"1428:42:11"}]}}]},"documentation":{"id":1490,"nodeType":"StructuredDocumentation","src":"1160:100:11","text":" @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."},"id":1514,"implemented":true,"kind":"function","modifiers":[],"name":"_useCheckedNonce","nameLocation":"1274:16:11","nodeType":"FunctionDefinition","parameters":{"id":1495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"owner","nameLocation":"1299:5:11","nodeType":"VariableDeclaration","scope":1514,"src":"1291:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1491,"name":"address","nodeType":"ElementaryTypeName","src":"1291:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1494,"mutability":"mutable","name":"nonce","nameLocation":"1314:5:11","nodeType":"VariableDeclaration","scope":1514,"src":"1306:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1493,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1290:30:11"},"returnParameters":{"id":1496,"nodeType":"ParameterList","parameters":[],"src":"1338:0:11"},"scope":1515,"src":"1265:222:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1516,"src":"209:1280:11","usedErrors":[1457],"usedEvents":[]}],"src":"99:1391:11"},"id":11},"@openzeppelin/contracts/utils/ShortStrings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","exportedSymbols":{"ShortString":[1521],"ShortStrings":[1732],"StorageSlot":[1842]},"id":1733,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1517,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:12"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"./StorageSlot.sol","id":1519,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1733,"sourceUnit":1843,"src":"132:46:12","symbolAliases":[{"foreign":{"id":1518,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"140:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"ShortString","id":1521,"name":"ShortString","nameLocation":"353:11:12","nodeType":"UserDefinedValueTypeDefinition","src":"348:28:12","underlyingType":{"id":1520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"368:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"abstract":false,"baseContracts":[],"canonicalName":"ShortStrings","contractDependencies":[],"contractKind":"library","documentation":{"id":1522,"nodeType":"StructuredDocumentation","src":"378:876:12","text":" @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"},"fullyImplemented":true,"id":1732,"linearizedBaseContracts":[1732],"name":"ShortStrings","nameLocation":"1263:12:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1525,"mutability":"constant","name":"FALLBACK_SENTINEL","nameLocation":"1370:17:12","nodeType":"VariableDeclaration","scope":1732,"src":"1345:111:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1345:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646","id":1524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:66:12","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0x00000000000000000000000000000000000000000000000000000000000000FF"},"visibility":"private"},{"errorSelector":"305a27a9","id":1529,"name":"StringTooLong","nameLocation":"1469:13:12","nodeType":"ErrorDefinition","parameters":{"id":1528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1527,"mutability":"mutable","name":"str","nameLocation":"1490:3:12","nodeType":"VariableDeclaration","scope":1529,"src":"1483:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1526,"name":"string","nodeType":"ElementaryTypeName","src":"1483:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1482:12:12"},"src":"1463:32:12"},{"errorSelector":"b3512b0c","id":1531,"name":"InvalidShortString","nameLocation":"1506:18:12","nodeType":"ErrorDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[],"src":"1524:2:12"},"src":"1500:27:12"},{"body":{"id":1574,"nodeType":"Block","src":"1786:208:12","statements":[{"assignments":[1541],"declarations":[{"constant":false,"id":1541,"mutability":"mutable","name":"bstr","nameLocation":"1809:4:12","nodeType":"VariableDeclaration","scope":1574,"src":"1796:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1540,"name":"bytes","nodeType":"ElementaryTypeName","src":"1796:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1546,"initialValue":{"arguments":[{"id":1544,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"1822:3:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1816:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1542,"name":"bytes","nodeType":"ElementaryTypeName","src":"1816:5:12","typeDescriptions":{}}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1816:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1796:30:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1547,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"1840:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1845:6:12","memberName":"length","nodeType":"MemberAccess","src":"1840:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1854:2:12","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1840:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1556,"nodeType":"IfStatement","src":"1836:72:12","trueBody":{"id":1555,"nodeType":"Block","src":"1858:50:12","statements":[{"errorCall":{"arguments":[{"id":1552,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"1893:3:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1551,"name":"StringTooLong","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"1879:13:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$","typeString":"function (string memory) pure returns (error)"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1879:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1554,"nodeType":"RevertStatement","src":"1872:25:12"}]}},{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1565,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"1965:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1957:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1957:7:12","typeDescriptions":{}}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1949:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1561,"name":"uint256","nodeType":"ElementaryTypeName","src":"1949:7:12","typeDescriptions":{}}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1949:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"expression":{"id":1568,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"1974:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1979:6:12","memberName":"length","nodeType":"MemberAccess","src":"1974:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1949:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1941:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1941:7:12","typeDescriptions":{}}},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1557,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"1924:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"type(ShortString)"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1936:4:12","memberName":"wrap","nodeType":"MemberAccess","src":"1924:16:12","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"functionReturnParameters":1539,"id":1573,"nodeType":"Return","src":"1917:70:12"}]},"documentation":{"id":1532,"nodeType":"StructuredDocumentation","src":"1533:170:12","text":" @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."},"id":1575,"implemented":true,"kind":"function","modifiers":[],"name":"toShortString","nameLocation":"1717:13:12","nodeType":"FunctionDefinition","parameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1534,"mutability":"mutable","name":"str","nameLocation":"1745:3:12","nodeType":"VariableDeclaration","scope":1575,"src":"1731:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1533,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1730:19:12"},"returnParameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1575,"src":"1773:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":1537,"nodeType":"UserDefinedTypeName","pathNode":{"id":1536,"name":"ShortString","nameLocations":["1773:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"1773:11:12"},"referencedDeclaration":1521,"src":"1773:11:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"internal"}],"src":"1772:13:12"},"scope":1732,"src":"1708:286:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1600,"nodeType":"Block","src":"2152:331:12","statements":[{"assignments":[1585],"declarations":[{"constant":false,"id":1585,"mutability":"mutable","name":"len","nameLocation":"2170:3:12","nodeType":"VariableDeclaration","scope":1600,"src":"2162:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1584,"name":"uint256","nodeType":"ElementaryTypeName","src":"2162:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1589,"initialValue":{"arguments":[{"id":1587,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"2187:4:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}],"id":1586,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"2176:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1521_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2162:30:12"},{"assignments":[1591],"declarations":[{"constant":false,"id":1591,"mutability":"mutable","name":"str","nameLocation":"2294:3:12","nodeType":"VariableDeclaration","scope":1600,"src":"2280:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1590,"name":"string","nodeType":"ElementaryTypeName","src":"2280:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1596,"initialValue":{"arguments":[{"hexValue":"3332","id":1594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2311:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":1593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2300:10:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1592,"name":"string","nodeType":"ElementaryTypeName","src":"2304:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2280:34:12"},{"AST":{"nativeSrc":"2376:81:12","nodeType":"YulBlock","src":"2376:81:12","statements":[{"expression":{"arguments":[{"name":"str","nativeSrc":"2397:3:12","nodeType":"YulIdentifier","src":"2397:3:12"},{"name":"len","nativeSrc":"2402:3:12","nodeType":"YulIdentifier","src":"2402:3:12"}],"functionName":{"name":"mstore","nativeSrc":"2390:6:12","nodeType":"YulIdentifier","src":"2390:6:12"},"nativeSrc":"2390:16:12","nodeType":"YulFunctionCall","src":"2390:16:12"},"nativeSrc":"2390:16:12","nodeType":"YulExpressionStatement","src":"2390:16:12"},{"expression":{"arguments":[{"arguments":[{"name":"str","nativeSrc":"2430:3:12","nodeType":"YulIdentifier","src":"2430:3:12"},{"kind":"number","nativeSrc":"2435:4:12","nodeType":"YulLiteral","src":"2435:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2426:3:12","nodeType":"YulIdentifier","src":"2426:3:12"},"nativeSrc":"2426:14:12","nodeType":"YulFunctionCall","src":"2426:14:12"},{"name":"sstr","nativeSrc":"2442:4:12","nodeType":"YulIdentifier","src":"2442:4:12"}],"functionName":{"name":"mstore","nativeSrc":"2419:6:12","nodeType":"YulIdentifier","src":"2419:6:12"},"nativeSrc":"2419:28:12","nodeType":"YulFunctionCall","src":"2419:28:12"},"nativeSrc":"2419:28:12","nodeType":"YulExpressionStatement","src":"2419:28:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1585,"isOffset":false,"isSlot":false,"src":"2402:3:12","valueSize":1},{"declaration":1579,"isOffset":false,"isSlot":false,"src":"2442:4:12","valueSize":1},{"declaration":1591,"isOffset":false,"isSlot":false,"src":"2397:3:12","valueSize":1},{"declaration":1591,"isOffset":false,"isSlot":false,"src":"2430:3:12","valueSize":1}],"id":1597,"nodeType":"InlineAssembly","src":"2367:90:12"},{"expression":{"id":1598,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"2473:3:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1583,"id":1599,"nodeType":"Return","src":"2466:10:12"}]},"documentation":{"id":1576,"nodeType":"StructuredDocumentation","src":"2000:73:12","text":" @dev Decode a `ShortString` back to a \"normal\" string."},"id":1601,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"2087:8:12","nodeType":"FunctionDefinition","parameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"sstr","nameLocation":"2108:4:12","nodeType":"VariableDeclaration","scope":1601,"src":"2096:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":1578,"nodeType":"UserDefinedTypeName","pathNode":{"id":1577,"name":"ShortString","nameLocations":["2096:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"2096:11:12"},"referencedDeclaration":1521,"src":"2096:11:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"internal"}],"src":"2095:18:12"},"returnParameters":{"id":1583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1601,"src":"2137:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1581,"name":"string","nodeType":"ElementaryTypeName","src":"2137:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2136:15:12"},"scope":1732,"src":"2078:405:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1632,"nodeType":"Block","src":"2625:175:12","statements":[{"assignments":[1611],"declarations":[{"constant":false,"id":1611,"mutability":"mutable","name":"result","nameLocation":"2643:6:12","nodeType":"VariableDeclaration","scope":1632,"src":"2635:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1610,"name":"uint256","nodeType":"ElementaryTypeName","src":"2635:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1621,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1616,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"2679:4:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}],"expression":{"id":1614,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"2660:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"type(ShortString)"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2672:6:12","memberName":"unwrap","nodeType":"MemberAccess","src":"2660:18:12","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1521_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2652:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:12","typeDescriptions":{}}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2652:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30784646","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2688:4:12","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"2652:40:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2635:57:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1622,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2706:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":1623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2715:2:12","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"2706:11:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1629,"nodeType":"IfStatement","src":"2702:69:12","trueBody":{"id":1628,"nodeType":"Block","src":"2719:52:12","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1625,"name":"InvalidShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"2740:18:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2740:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1627,"nodeType":"RevertStatement","src":"2733:27:12"}]}},{"expression":{"id":1630,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2787:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1609,"id":1631,"nodeType":"Return","src":"2780:13:12"}]},"documentation":{"id":1602,"nodeType":"StructuredDocumentation","src":"2489:61:12","text":" @dev Return the length of a `ShortString`."},"id":1633,"implemented":true,"kind":"function","modifiers":[],"name":"byteLength","nameLocation":"2564:10:12","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"sstr","nameLocation":"2587:4:12","nodeType":"VariableDeclaration","scope":1633,"src":"2575:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":1604,"nodeType":"UserDefinedTypeName","pathNode":{"id":1603,"name":"ShortString","nameLocations":["2575:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"2575:11:12"},"referencedDeclaration":1521,"src":"2575:11:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"internal"}],"src":"2574:18:12"},"returnParameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1608,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1633,"src":"2616:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1607,"name":"uint256","nodeType":"ElementaryTypeName","src":"2616:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2615:9:12"},"scope":1732,"src":"2555:245:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1672,"nodeType":"Block","src":"3023:231:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"3043:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3037:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1644,"name":"bytes","nodeType":"ElementaryTypeName","src":"3037:5:12","typeDescriptions":{}}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3037:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3050:6:12","memberName":"length","nodeType":"MemberAccess","src":"3037:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":1649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3059:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3037:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1670,"nodeType":"Block","src":"3121:127:12","statements":[{"expression":{"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1659,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"3161:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"expression":{"id":1656,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"3135:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1842_$","typeString":"type(library StorageSlot)"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3147:13:12","memberName":"getStringSlot","nodeType":"MemberAccess","referencedDeclaration":1819,"src":"3135:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1750_storage_ptr_$","typeString":"function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3135:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1750_storage_ptr","typeString":"struct StorageSlot.StringSlot storage pointer"}},"id":1661,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3168:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1749,"src":"3135:38:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"3176:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3135:46:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1664,"nodeType":"ExpressionStatement","src":"3135:46:12"},{"expression":{"arguments":[{"id":1667,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"3219:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1665,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"3202:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"type(ShortString)"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3214:4:12","memberName":"wrap","nodeType":"MemberAccess","src":"3202:16:12","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3202:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"functionReturnParameters":1643,"id":1669,"nodeType":"Return","src":"3195:42:12"}]},"id":1671,"nodeType":"IfStatement","src":"3033:215:12","trueBody":{"id":1655,"nodeType":"Block","src":"3063:52:12","statements":[{"expression":{"arguments":[{"id":1652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"3098:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1651,"name":"toShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"3084:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"function (string memory) pure returns (ShortString)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3084:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"functionReturnParameters":1643,"id":1654,"nodeType":"Return","src":"3077:27:12"}]}}]},"documentation":{"id":1634,"nodeType":"StructuredDocumentation","src":"2806:103:12","text":" @dev Encode a string into a `ShortString`, or write it to storage if it is too long."},"id":1673,"implemented":true,"kind":"function","modifiers":[],"name":"toShortStringWithFallback","nameLocation":"2923:25:12","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1636,"mutability":"mutable","name":"value","nameLocation":"2963:5:12","nodeType":"VariableDeclaration","scope":1673,"src":"2949:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1635,"name":"string","nodeType":"ElementaryTypeName","src":"2949:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"store","nameLocation":"2985:5:12","nodeType":"VariableDeclaration","scope":1673,"src":"2970:20:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1637,"name":"string","nodeType":"ElementaryTypeName","src":"2970:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2948:43:12"},"returnParameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1673,"src":"3010:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":1641,"nodeType":"UserDefinedTypeName","pathNode":{"id":1640,"name":"ShortString","nameLocations":["3010:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"3010:11:12"},"referencedDeclaration":1521,"src":"3010:11:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"internal"}],"src":"3009:13:12"},"scope":1732,"src":"2914:340:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1699,"nodeType":"Block","src":"3494:158:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1686,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"3527:5:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}],"expression":{"id":1684,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"3508:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"type(ShortString)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3520:6:12","memberName":"unwrap","nodeType":"MemberAccess","src":"3508:18:12","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1521_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3508:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1688,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"3537:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3508:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1697,"nodeType":"Block","src":"3609:37:12","statements":[{"expression":{"id":1695,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"3630:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}},"functionReturnParameters":1683,"id":1696,"nodeType":"Return","src":"3623:12:12"}]},"id":1698,"nodeType":"IfStatement","src":"3504:142:12","trueBody":{"id":1694,"nodeType":"Block","src":"3556:47:12","statements":[{"expression":{"arguments":[{"id":1691,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"3586:5:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}],"id":1690,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"3577:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1521_$returns$_t_string_memory_ptr_$","typeString":"function (ShortString) pure returns (string memory)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3577:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1683,"id":1693,"nodeType":"Return","src":"3570:22:12"}]}}]},"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"3260:120:12","text":" @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."},"id":1700,"implemented":true,"kind":"function","modifiers":[],"name":"toStringWithFallback","nameLocation":"3394:20:12","nodeType":"FunctionDefinition","parameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1677,"mutability":"mutable","name":"value","nameLocation":"3427:5:12","nodeType":"VariableDeclaration","scope":1700,"src":"3415:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":1676,"nodeType":"UserDefinedTypeName","pathNode":{"id":1675,"name":"ShortString","nameLocations":["3415:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"3415:11:12"},"referencedDeclaration":1521,"src":"3415:11:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":1679,"mutability":"mutable","name":"store","nameLocation":"3449:5:12","nodeType":"VariableDeclaration","scope":1700,"src":"3434:20:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1678,"name":"string","nodeType":"ElementaryTypeName","src":"3434:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3414:41:12"},"returnParameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1700,"src":"3479:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1681,"name":"string","nodeType":"ElementaryTypeName","src":"3479:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3478:15:12"},"scope":1732,"src":"3385:267:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1730,"nodeType":"Block","src":"4132:174:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"4165:5:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}],"expression":{"id":1711,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"4146:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"type(ShortString)"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4158:6:12","memberName":"unwrap","nodeType":"MemberAccess","src":"4146:18:12","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1521_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4146:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1715,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"4175:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4146:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1728,"nodeType":"Block","src":"4249:51:12","statements":[{"expression":{"expression":{"arguments":[{"id":1724,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"4276:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4270:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1722,"name":"bytes","nodeType":"ElementaryTypeName","src":"4270:5:12","typeDescriptions":{}}},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4270:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4283:6:12","memberName":"length","nodeType":"MemberAccess","src":"4270:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1710,"id":1727,"nodeType":"Return","src":"4263:26:12"}]},"id":1729,"nodeType":"IfStatement","src":"4142:158:12","trueBody":{"id":1721,"nodeType":"Block","src":"4194:49:12","statements":[{"expression":{"arguments":[{"id":1718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"4226:5:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}],"id":1717,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"4215:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1521_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4215:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1710,"id":1720,"nodeType":"Return","src":"4208:24:12"}]}}]},"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"3658:364:12","text":" @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."},"id":1731,"implemented":true,"kind":"function","modifiers":[],"name":"byteLengthWithFallback","nameLocation":"4036:22:12","nodeType":"FunctionDefinition","parameters":{"id":1707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"value","nameLocation":"4071:5:12","nodeType":"VariableDeclaration","scope":1731,"src":"4059:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":1703,"nodeType":"UserDefinedTypeName","pathNode":{"id":1702,"name":"ShortString","nameLocations":["4059:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"4059:11:12"},"referencedDeclaration":1521,"src":"4059:11:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":1706,"mutability":"mutable","name":"store","nameLocation":"4093:5:12","nodeType":"VariableDeclaration","scope":1731,"src":"4078:20:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1705,"name":"string","nodeType":"ElementaryTypeName","src":"4078:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4058:41:12"},"returnParameters":{"id":1710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1709,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1731,"src":"4123:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1708,"name":"uint256","nodeType":"ElementaryTypeName","src":"4123:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4122:9:12"},"scope":1732,"src":"4027:279:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1733,"src":"1255:3053:12","usedErrors":[1529,1531],"usedEvents":[]}],"src":"106:4203:12"},"id":12},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1842]},"id":1843,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1734,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1735,"nodeType":"StructuredDocumentation","src":"219:1025:13","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"},"fullyImplemented":true,"id":1842,"linearizedBaseContracts":[1842],"name":"StorageSlot","nameLocation":"1253:11:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1738,"members":[{"constant":false,"id":1737,"mutability":"mutable","name":"value","nameLocation":"1308:5:13","nodeType":"VariableDeclaration","scope":1738,"src":"1300:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1736,"name":"address","nodeType":"ElementaryTypeName","src":"1300:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1278:11:13","nodeType":"StructDefinition","scope":1842,"src":"1271:49:13","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1741,"members":[{"constant":false,"id":1740,"mutability":"mutable","name":"value","nameLocation":"1360:5:13","nodeType":"VariableDeclaration","scope":1741,"src":"1355:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1739,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1333:11:13","nodeType":"StructDefinition","scope":1842,"src":"1326:46:13","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1744,"members":[{"constant":false,"id":1743,"mutability":"mutable","name":"value","nameLocation":"1415:5:13","nodeType":"VariableDeclaration","scope":1744,"src":"1407:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1407:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1385:11:13","nodeType":"StructDefinition","scope":1842,"src":"1378:49:13","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1747,"members":[{"constant":false,"id":1746,"mutability":"mutable","name":"value","nameLocation":"1470:5:13","nodeType":"VariableDeclaration","scope":1747,"src":"1462:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"1462:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1440:11:13","nodeType":"StructDefinition","scope":1842,"src":"1433:49:13","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":1750,"members":[{"constant":false,"id":1749,"mutability":"mutable","name":"value","nameLocation":"1523:5:13","nodeType":"VariableDeclaration","scope":1750,"src":"1516:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1748,"name":"string","nodeType":"ElementaryTypeName","src":"1516:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1495:10:13","nodeType":"StructDefinition","scope":1842,"src":"1488:47:13","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":1753,"members":[{"constant":false,"id":1752,"mutability":"mutable","name":"value","nameLocation":"1574:5:13","nodeType":"VariableDeclaration","scope":1753,"src":"1568:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1751,"name":"bytes","nodeType":"ElementaryTypeName","src":"1568:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1548:9:13","nodeType":"StructDefinition","scope":1842,"src":"1541:45:13","visibility":"public"},{"body":{"id":1763,"nodeType":"Block","src":"1768:106:13","statements":[{"AST":{"nativeSrc":"1830:38:13","nodeType":"YulBlock","src":"1830:38:13","statements":[{"nativeSrc":"1844:14:13","nodeType":"YulAssignment","src":"1844:14:13","value":{"name":"slot","nativeSrc":"1854:4:13","nodeType":"YulIdentifier","src":"1854:4:13"},"variableNames":[{"name":"r.slot","nativeSrc":"1844:6:13","nodeType":"YulIdentifier","src":"1844:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1760,"isOffset":false,"isSlot":true,"src":"1844:6:13","suffix":"slot","valueSize":1},{"declaration":1756,"isOffset":false,"isSlot":false,"src":"1854:4:13","valueSize":1}],"id":1762,"nodeType":"InlineAssembly","src":"1821:47:13"}]},"documentation":{"id":1754,"nodeType":"StructuredDocumentation","src":"1592:87:13","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1764,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1693:14:13","nodeType":"FunctionDefinition","parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"slot","nameLocation":"1716:4:13","nodeType":"VariableDeclaration","scope":1764,"src":"1708:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1708:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1707:14:13"},"returnParameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"r","nameLocation":"1765:1:13","nodeType":"VariableDeclaration","scope":1764,"src":"1745:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1738_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1759,"nodeType":"UserDefinedTypeName","pathNode":{"id":1758,"name":"AddressSlot","nameLocations":["1745:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1738,"src":"1745:11:13"},"referencedDeclaration":1738,"src":"1745:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1738_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1744:23:13"},"scope":1842,"src":"1684:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1774,"nodeType":"Block","src":"2056:106:13","statements":[{"AST":{"nativeSrc":"2118:38:13","nodeType":"YulBlock","src":"2118:38:13","statements":[{"nativeSrc":"2132:14:13","nodeType":"YulAssignment","src":"2132:14:13","value":{"name":"slot","nativeSrc":"2142:4:13","nodeType":"YulIdentifier","src":"2142:4:13"},"variableNames":[{"name":"r.slot","nativeSrc":"2132:6:13","nodeType":"YulIdentifier","src":"2132:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1771,"isOffset":false,"isSlot":true,"src":"2132:6:13","suffix":"slot","valueSize":1},{"declaration":1767,"isOffset":false,"isSlot":false,"src":"2142:4:13","valueSize":1}],"id":1773,"nodeType":"InlineAssembly","src":"2109:47:13"}]},"documentation":{"id":1765,"nodeType":"StructuredDocumentation","src":"1880:87:13","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1775,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1981:14:13","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"slot","nameLocation":"2004:4:13","nodeType":"VariableDeclaration","scope":1775,"src":"1996:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1766,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1996:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1995:14:13"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"r","nameLocation":"2053:1:13","nodeType":"VariableDeclaration","scope":1775,"src":"2033:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1741_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1770,"nodeType":"UserDefinedTypeName","pathNode":{"id":1769,"name":"BooleanSlot","nameLocations":["2033:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1741,"src":"2033:11:13"},"referencedDeclaration":1741,"src":"2033:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1741_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2032:23:13"},"scope":1842,"src":"1972:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1785,"nodeType":"Block","src":"2344:106:13","statements":[{"AST":{"nativeSrc":"2406:38:13","nodeType":"YulBlock","src":"2406:38:13","statements":[{"nativeSrc":"2420:14:13","nodeType":"YulAssignment","src":"2420:14:13","value":{"name":"slot","nativeSrc":"2430:4:13","nodeType":"YulIdentifier","src":"2430:4:13"},"variableNames":[{"name":"r.slot","nativeSrc":"2420:6:13","nodeType":"YulIdentifier","src":"2420:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1782,"isOffset":false,"isSlot":true,"src":"2420:6:13","suffix":"slot","valueSize":1},{"declaration":1778,"isOffset":false,"isSlot":false,"src":"2430:4:13","valueSize":1}],"id":1784,"nodeType":"InlineAssembly","src":"2397:47:13"}]},"documentation":{"id":1776,"nodeType":"StructuredDocumentation","src":"2168:87:13","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1786,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2269:14:13","nodeType":"FunctionDefinition","parameters":{"id":1779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"slot","nameLocation":"2292:4:13","nodeType":"VariableDeclaration","scope":1786,"src":"2284:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1777,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2284:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2283:14:13"},"returnParameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"r","nameLocation":"2341:1:13","nodeType":"VariableDeclaration","scope":1786,"src":"2321:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1744_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1781,"nodeType":"UserDefinedTypeName","pathNode":{"id":1780,"name":"Bytes32Slot","nameLocations":["2321:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1744,"src":"2321:11:13"},"referencedDeclaration":1744,"src":"2321:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1744_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2320:23:13"},"scope":1842,"src":"2260:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1796,"nodeType":"Block","src":"2632:106:13","statements":[{"AST":{"nativeSrc":"2694:38:13","nodeType":"YulBlock","src":"2694:38:13","statements":[{"nativeSrc":"2708:14:13","nodeType":"YulAssignment","src":"2708:14:13","value":{"name":"slot","nativeSrc":"2718:4:13","nodeType":"YulIdentifier","src":"2718:4:13"},"variableNames":[{"name":"r.slot","nativeSrc":"2708:6:13","nodeType":"YulIdentifier","src":"2708:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1793,"isOffset":false,"isSlot":true,"src":"2708:6:13","suffix":"slot","valueSize":1},{"declaration":1789,"isOffset":false,"isSlot":false,"src":"2718:4:13","valueSize":1}],"id":1795,"nodeType":"InlineAssembly","src":"2685:47:13"}]},"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"2456:87:13","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1797,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2557:14:13","nodeType":"FunctionDefinition","parameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"slot","nameLocation":"2580:4:13","nodeType":"VariableDeclaration","scope":1797,"src":"2572:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2572:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2571:14:13"},"returnParameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"r","nameLocation":"2629:1:13","nodeType":"VariableDeclaration","scope":1797,"src":"2609:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1747_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1792,"nodeType":"UserDefinedTypeName","pathNode":{"id":1791,"name":"Uint256Slot","nameLocations":["2609:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1747,"src":"2609:11:13"},"referencedDeclaration":1747,"src":"2609:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1747_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2608:23:13"},"scope":1842,"src":"2548:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1807,"nodeType":"Block","src":"2917:106:13","statements":[{"AST":{"nativeSrc":"2979:38:13","nodeType":"YulBlock","src":"2979:38:13","statements":[{"nativeSrc":"2993:14:13","nodeType":"YulAssignment","src":"2993:14:13","value":{"name":"slot","nativeSrc":"3003:4:13","nodeType":"YulIdentifier","src":"3003:4:13"},"variableNames":[{"name":"r.slot","nativeSrc":"2993:6:13","nodeType":"YulIdentifier","src":"2993:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1804,"isOffset":false,"isSlot":true,"src":"2993:6:13","suffix":"slot","valueSize":1},{"declaration":1800,"isOffset":false,"isSlot":false,"src":"3003:4:13","valueSize":1}],"id":1806,"nodeType":"InlineAssembly","src":"2970:47:13"}]},"documentation":{"id":1798,"nodeType":"StructuredDocumentation","src":"2744:86:13","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1808,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"2844:13:13","nodeType":"FunctionDefinition","parameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"slot","nameLocation":"2866:4:13","nodeType":"VariableDeclaration","scope":1808,"src":"2858:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1799,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2858:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2857:14:13"},"returnParameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"r","nameLocation":"2914:1:13","nodeType":"VariableDeclaration","scope":1808,"src":"2895:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1750_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1803,"nodeType":"UserDefinedTypeName","pathNode":{"id":1802,"name":"StringSlot","nameLocations":["2895:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":1750,"src":"2895:10:13"},"referencedDeclaration":1750,"src":"2895:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1750_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"2894:22:13"},"scope":1842,"src":"2835:188:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1818,"nodeType":"Block","src":"3225:112:13","statements":[{"AST":{"nativeSrc":"3287:44:13","nodeType":"YulBlock","src":"3287:44:13","statements":[{"nativeSrc":"3301:20:13","nodeType":"YulAssignment","src":"3301:20:13","value":{"name":"store.slot","nativeSrc":"3311:10:13","nodeType":"YulIdentifier","src":"3311:10:13"},"variableNames":[{"name":"r.slot","nativeSrc":"3301:6:13","nodeType":"YulIdentifier","src":"3301:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1815,"isOffset":false,"isSlot":true,"src":"3301:6:13","suffix":"slot","valueSize":1},{"declaration":1811,"isOffset":false,"isSlot":true,"src":"3311:10:13","suffix":"slot","valueSize":1}],"id":1817,"nodeType":"InlineAssembly","src":"3278:53:13"}]},"documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"3029:101:13","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1819,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3144:13:13","nodeType":"FunctionDefinition","parameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"store","nameLocation":"3173:5:13","nodeType":"VariableDeclaration","scope":1819,"src":"3158:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1810,"name":"string","nodeType":"ElementaryTypeName","src":"3158:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3157:22:13"},"returnParameters":{"id":1816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"mutability":"mutable","name":"r","nameLocation":"3222:1:13","nodeType":"VariableDeclaration","scope":1819,"src":"3203:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1750_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1814,"nodeType":"UserDefinedTypeName","pathNode":{"id":1813,"name":"StringSlot","nameLocations":["3203:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":1750,"src":"3203:10:13"},"referencedDeclaration":1750,"src":"3203:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1750_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3202:22:13"},"scope":1842,"src":"3135:202:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1829,"nodeType":"Block","src":"3513:106:13","statements":[{"AST":{"nativeSrc":"3575:38:13","nodeType":"YulBlock","src":"3575:38:13","statements":[{"nativeSrc":"3589:14:13","nodeType":"YulAssignment","src":"3589:14:13","value":{"name":"slot","nativeSrc":"3599:4:13","nodeType":"YulIdentifier","src":"3599:4:13"},"variableNames":[{"name":"r.slot","nativeSrc":"3589:6:13","nodeType":"YulIdentifier","src":"3589:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1826,"isOffset":false,"isSlot":true,"src":"3589:6:13","suffix":"slot","valueSize":1},{"declaration":1822,"isOffset":false,"isSlot":false,"src":"3599:4:13","valueSize":1}],"id":1828,"nodeType":"InlineAssembly","src":"3566:47:13"}]},"documentation":{"id":1820,"nodeType":"StructuredDocumentation","src":"3343:85:13","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1830,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3442:12:13","nodeType":"FunctionDefinition","parameters":{"id":1823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1822,"mutability":"mutable","name":"slot","nameLocation":"3463:4:13","nodeType":"VariableDeclaration","scope":1830,"src":"3455:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1821,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3455:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3454:14:13"},"returnParameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"r","nameLocation":"3510:1:13","nodeType":"VariableDeclaration","scope":1830,"src":"3492:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1753_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1825,"nodeType":"UserDefinedTypeName","pathNode":{"id":1824,"name":"BytesSlot","nameLocations":["3492:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1753,"src":"3492:9:13"},"referencedDeclaration":1753,"src":"3492:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1753_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3491:21:13"},"scope":1842,"src":"3433:186:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1840,"nodeType":"Block","src":"3816:112:13","statements":[{"AST":{"nativeSrc":"3878:44:13","nodeType":"YulBlock","src":"3878:44:13","statements":[{"nativeSrc":"3892:20:13","nodeType":"YulAssignment","src":"3892:20:13","value":{"name":"store.slot","nativeSrc":"3902:10:13","nodeType":"YulIdentifier","src":"3902:10:13"},"variableNames":[{"name":"r.slot","nativeSrc":"3892:6:13","nodeType":"YulIdentifier","src":"3892:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1837,"isOffset":false,"isSlot":true,"src":"3892:6:13","suffix":"slot","valueSize":1},{"declaration":1833,"isOffset":false,"isSlot":true,"src":"3902:10:13","suffix":"slot","valueSize":1}],"id":1839,"nodeType":"InlineAssembly","src":"3869:53:13"}]},"documentation":{"id":1831,"nodeType":"StructuredDocumentation","src":"3625:99:13","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1841,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3738:12:13","nodeType":"FunctionDefinition","parameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"store","nameLocation":"3765:5:13","nodeType":"VariableDeclaration","scope":1841,"src":"3751:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1832,"name":"bytes","nodeType":"ElementaryTypeName","src":"3751:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3750:21:13"},"returnParameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"r","nameLocation":"3813:1:13","nodeType":"VariableDeclaration","scope":1841,"src":"3795:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1753_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1836,"nodeType":"UserDefinedTypeName","pathNode":{"id":1835,"name":"BytesSlot","nameLocations":["3795:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1753,"src":"3795:9:13"},"referencedDeclaration":1753,"src":"3795:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1753_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3794:21:13"},"scope":1842,"src":"3729:199:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1843,"src":"1245:2685:13","usedErrors":[],"usedEvents":[]}],"src":"193:3738:13"},"id":13},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3836],"SignedMath":[3941],"Strings":[2097]},"id":2098,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1844,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:14"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1846,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2098,"sourceUnit":3837,"src":"127:37:14","symbolAliases":[{"foreign":{"id":1845,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"135:4:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1848,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2098,"sourceUnit":3942,"src":"165:49:14","symbolAliases":[{"foreign":{"id":1847,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3941,"src":"173:10:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"216:34:14","text":" @dev String operations."},"fullyImplemented":true,"id":2097,"linearizedBaseContracts":[2097],"name":"Strings","nameLocation":"259:7:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1852,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:14","nodeType":"VariableDeclaration","scope":2097,"src":"273:56:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1850,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1855,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:14","nodeType":"VariableDeclaration","scope":2097,"src":"335:42:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1853,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":1856,"nodeType":"StructuredDocumentation","src":"384:81:14","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":1862,"name":"StringsInsufficientHexLength","nameLocation":"476:28:14","nodeType":"ErrorDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"value","nameLocation":"513:5:14","nodeType":"VariableDeclaration","scope":1862,"src":"505:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"length","nameLocation":"528:6:14","nodeType":"VariableDeclaration","scope":1862,"src":"520:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1859,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:14"},"src":"470:66:14"},{"body":{"id":1909,"nodeType":"Block","src":"708:627:14","statements":[{"id":1908,"nodeType":"UncheckedBlock","src":"718:611:14","statements":[{"assignments":[1871],"declarations":[{"constant":false,"id":1871,"mutability":"mutable","name":"length","nameLocation":"750:6:14","nodeType":"VariableDeclaration","scope":1908,"src":"742:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1878,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"770:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1872,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"759:4:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3836_$","typeString":"type(library Math)"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:14","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3656,"src":"759:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:14"},{"assignments":[1880],"declarations":[{"constant":false,"id":1880,"mutability":"mutable","name":"buffer","nameLocation":"808:6:14","nodeType":"VariableDeclaration","scope":1908,"src":"794:20:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1879,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1885,"initialValue":{"arguments":[{"id":1883,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"828:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1881,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:14"},{"assignments":[1887],"declarations":[{"constant":false,"id":1887,"mutability":"mutable","name":"ptr","nameLocation":"857:3:14","nodeType":"VariableDeclaration","scope":1908,"src":"849:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1888,"nodeType":"VariableDeclarationStatement","src":"849:11:14"},{"AST":{"nativeSrc":"930:67:14","nodeType":"YulBlock","src":"930:67:14","statements":[{"nativeSrc":"948:35:14","nodeType":"YulAssignment","src":"948:35:14","value":{"arguments":[{"name":"buffer","nativeSrc":"959:6:14","nodeType":"YulIdentifier","src":"959:6:14"},{"arguments":[{"kind":"number","nativeSrc":"971:2:14","nodeType":"YulLiteral","src":"971:2:14","type":"","value":"32"},{"name":"length","nativeSrc":"975:6:14","nodeType":"YulIdentifier","src":"975:6:14"}],"functionName":{"name":"add","nativeSrc":"967:3:14","nodeType":"YulIdentifier","src":"967:3:14"},"nativeSrc":"967:15:14","nodeType":"YulFunctionCall","src":"967:15:14"}],"functionName":{"name":"add","nativeSrc":"955:3:14","nodeType":"YulIdentifier","src":"955:3:14"},"nativeSrc":"955:28:14","nodeType":"YulFunctionCall","src":"955:28:14"},"variableNames":[{"name":"ptr","nativeSrc":"948:3:14","nodeType":"YulIdentifier","src":"948:3:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1880,"isOffset":false,"isSlot":false,"src":"959:6:14","valueSize":1},{"declaration":1871,"isOffset":false,"isSlot":false,"src":"975:6:14","valueSize":1},{"declaration":1887,"isOffset":false,"isSlot":false,"src":"948:3:14","valueSize":1}],"id":1889,"nodeType":"InlineAssembly","src":"921:76:14"},{"body":{"id":1904,"nodeType":"Block","src":"1023:269:14","statements":[{"expression":{"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:14","subExpression":{"id":1891,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"1041:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1893,"nodeType":"ExpressionStatement","src":"1041:5:14"},{"AST":{"nativeSrc":"1124:86:14","nodeType":"YulBlock","src":"1124:86:14","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1154:3:14","nodeType":"YulIdentifier","src":"1154:3:14"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:14","nodeType":"YulIdentifier","src":"1168:5:14"},{"kind":"number","nativeSrc":"1175:2:14","nodeType":"YulLiteral","src":"1175:2:14","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1164:3:14","nodeType":"YulIdentifier","src":"1164:3:14"},"nativeSrc":"1164:14:14","nodeType":"YulFunctionCall","src":"1164:14:14"},{"name":"HEX_DIGITS","nativeSrc":"1180:10:14","nodeType":"YulIdentifier","src":"1180:10:14"}],"functionName":{"name":"byte","nativeSrc":"1159:4:14","nodeType":"YulIdentifier","src":"1159:4:14"},"nativeSrc":"1159:32:14","nodeType":"YulFunctionCall","src":"1159:32:14"}],"functionName":{"name":"mstore8","nativeSrc":"1146:7:14","nodeType":"YulIdentifier","src":"1146:7:14"},"nativeSrc":"1146:46:14","nodeType":"YulFunctionCall","src":"1146:46:14"},"nativeSrc":"1146:46:14","nodeType":"YulExpressionStatement","src":"1146:46:14"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":1852,"isOffset":false,"isSlot":false,"src":"1180:10:14","valueSize":1},{"declaration":1887,"isOffset":false,"isSlot":false,"src":"1154:3:14","valueSize":1},{"declaration":1865,"isOffset":false,"isSlot":false,"src":"1168:5:14","valueSize":1}],"id":1894,"nodeType":"InlineAssembly","src":"1115:95:14"},{"expression":{"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"1227:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1898,"nodeType":"ExpressionStatement","src":"1227:11:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"1260:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1903,"nodeType":"IfStatement","src":"1256:21:14","trueBody":{"id":1902,"nodeType":"Break","src":"1272:5:14"}}]},"condition":{"hexValue":"74727565","id":1890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1905,"nodeType":"WhileStatement","src":"1010:282:14"},{"expression":{"id":1906,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"1312:6:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1869,"id":1907,"nodeType":"Return","src":"1305:13:14"}]}]},"documentation":{"id":1863,"nodeType":"StructuredDocumentation","src":"542:90:14","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1910,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:14","nodeType":"FunctionDefinition","parameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"value","nameLocation":"663:5:14","nodeType":"VariableDeclaration","scope":1910,"src":"655:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1864,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:14"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1910,"src":"693:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1867,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:14"},"scope":2097,"src":"637:698:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1935,"nodeType":"Block","src":"1511:92:14","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"1542:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:14","trueExpression":{"hexValue":"2d","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1930,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"1588:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1928,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3941,"src":"1573:10:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3941_$","typeString":"type(library SignedMath)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:14","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3940,"src":"1573:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1927,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1564:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1918,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:14","typeDescriptions":{}}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:14","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:14","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1917,"id":1934,"nodeType":"Return","src":"1521:75:14"}]},"documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"1341:89:14","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1936,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:14","nodeType":"FunctionDefinition","parameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"value","nameLocation":"1466:5:14","nodeType":"VariableDeclaration","scope":1936,"src":"1459:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1912,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:14"},"returnParameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1936,"src":"1496:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1915,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:14"},"scope":2097,"src":"1435:168:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1955,"nodeType":"Block","src":"1782:100:14","statements":[{"id":1954,"nodeType":"UncheckedBlock","src":"1792:84:14","statements":[{"expression":{"arguments":[{"id":1945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"1835:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"1854:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1946,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"1842:4:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3836_$","typeString":"type(library Math)"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:14","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3778,"src":"1842:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1944,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1956,2039,2059],"referencedDeclaration":2039,"src":"1823:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1943,"id":1953,"nodeType":"Return","src":"1816:49:14"}]}]},"documentation":{"id":1937,"nodeType":"StructuredDocumentation","src":"1609:94:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1956,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:14","nodeType":"FunctionDefinition","parameters":{"id":1940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"value","nameLocation":"1737:5:14","nodeType":"VariableDeclaration","scope":1956,"src":"1729:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:14"},"returnParameters":{"id":1943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1956,"src":"1767:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1941,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:14"},"scope":2097,"src":"1708:174:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2038,"nodeType":"Block","src":"2095:435:14","statements":[{"assignments":[1967],"declarations":[{"constant":false,"id":1967,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:14","nodeType":"VariableDeclaration","scope":2038,"src":"2105:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1966,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1969,"initialValue":{"id":1968,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"2126:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:14"},{"assignments":[1971],"declarations":[{"constant":false,"id":1971,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:14","nodeType":"VariableDeclaration","scope":2038,"src":"2141:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1970,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1980,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1975,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2177:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1972,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:14"},{"expression":{"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1981,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"2198:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1983,"indexExpression":{"hexValue":"30","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1986,"nodeType":"ExpressionStatement","src":"2198:15:14"},{"expression":{"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1987,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"2223:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1989,"indexExpression":{"hexValue":"31","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1992,"nodeType":"ExpressionStatement","src":"2223:15:14"},{"body":{"id":2021,"nodeType":"Block","src":"2293:95:14","statements":[{"expression":{"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2007,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"2307:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2009,"indexExpression":{"id":2008,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"2314:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2010,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"2319:10:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2014,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2011,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2330:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:14","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2016,"nodeType":"ExpressionStatement","src":"2307:40:14"},{"expression":{"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2017,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2361:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2020,"nodeType":"ExpressionStatement","src":"2361:16:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2001,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"2281:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2022,"initializationExpression":{"assignments":[1994],"declarations":[{"constant":false,"id":1994,"mutability":"mutable","name":"i","nameLocation":"2261:1:14","nodeType":"VariableDeclaration","scope":2022,"src":"2253:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2000,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1996,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2269:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:14"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:14","subExpression":{"id":2004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"2290:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2006,"nodeType":"ExpressionStatement","src":"2288:3:14"},"nodeType":"ForStatement","src":"2248:140:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2401:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2032,"nodeType":"IfStatement","src":"2397:96:14","trueBody":{"id":2031,"nodeType":"Block","src":"2418:75:14","statements":[{"errorCall":{"arguments":[{"id":2027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"2468:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2028,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2475:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2026,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2439:28:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2030,"nodeType":"RevertStatement","src":"2432:50:14"}]}},{"expression":{"arguments":[{"id":2035,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"2516:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2033,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:14","typeDescriptions":{}}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1965,"id":2037,"nodeType":"Return","src":"2502:21:14"}]},"documentation":{"id":1957,"nodeType":"StructuredDocumentation","src":"1888:112:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2039,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:14","nodeType":"FunctionDefinition","parameters":{"id":1962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1959,"mutability":"mutable","name":"value","nameLocation":"2034:5:14","nodeType":"VariableDeclaration","scope":2039,"src":"2026:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1961,"mutability":"mutable","name":"length","nameLocation":"2049:6:14","nodeType":"VariableDeclaration","scope":2039,"src":"2041:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:14"},"returnParameters":{"id":1965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2039,"src":"2080:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1963,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:14"},"scope":2097,"src":"2005:525:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2058,"nodeType":"Block","src":"2762:75:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2052,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"2807:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2050,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:14","typeDescriptions":{}}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:14","typeDescriptions":{}}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2055,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"2815:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2047,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1956,2039,2059],"referencedDeclaration":2039,"src":"2779:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2046,"id":2057,"nodeType":"Return","src":"2772:58:14"}]},"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"2536:148:14","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":2059,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:14","nodeType":"FunctionDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"addr","nameLocation":"2718:4:14","nodeType":"VariableDeclaration","scope":2059,"src":"2710:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:14"},"returnParameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2059,"src":"2747:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2044,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:14"},"scope":2097,"src":"2689:148:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2095,"nodeType":"Block","src":"2992:104:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2071,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"3015:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2069,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:14","typeDescriptions":{}}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:14","memberName":"length","nodeType":"MemberAccess","src":"3009:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2076,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"3034:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2074,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:14","typeDescriptions":{}}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:14","memberName":"length","nodeType":"MemberAccess","src":"3028:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2083,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"3063:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2081,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:14","typeDescriptions":{}}},"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2080,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2089,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"3086:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2087,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:14","typeDescriptions":{}}},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2086,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2068,"id":2094,"nodeType":"Return","src":"3002:87:14"}]},"documentation":{"id":2060,"nodeType":"StructuredDocumentation","src":"2843:66:14","text":" @dev Returns true if the two strings are equal."},"id":2096,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:14","nodeType":"FunctionDefinition","parameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"mutability":"mutable","name":"a","nameLocation":"2943:1:14","nodeType":"VariableDeclaration","scope":2096,"src":"2929:15:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2061,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2064,"mutability":"mutable","name":"b","nameLocation":"2960:1:14","nodeType":"VariableDeclaration","scope":2096,"src":"2946:15:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2063,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:14"},"returnParameters":{"id":2068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2096,"src":"2986:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2066,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:14"},"scope":2097,"src":"2914:182:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2098,"src":"251:2847:14","usedErrors":[1862],"usedEvents":[]}],"src":"101:2998:14"},"id":14},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[2445]},"id":2446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2099,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":2100,"nodeType":"StructuredDocumentation","src":"138:205:15","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2445,"linearizedBaseContracts":[2445],"name":"ECDSA","nameLocation":"352:5:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":2105,"members":[{"id":2101,"name":"NoError","nameLocation":"392:7:15","nodeType":"EnumValue","src":"392:7:15"},{"id":2102,"name":"InvalidSignature","nameLocation":"409:16:15","nodeType":"EnumValue","src":"409:16:15"},{"id":2103,"name":"InvalidSignatureLength","nameLocation":"435:22:15","nodeType":"EnumValue","src":"435:22:15"},{"id":2104,"name":"InvalidSignatureS","nameLocation":"467:17:15","nodeType":"EnumValue","src":"467:17:15"}],"name":"RecoverError","nameLocation":"369:12:15","nodeType":"EnumDefinition","src":"364:126:15"},{"documentation":{"id":2106,"nodeType":"StructuredDocumentation","src":"496:63:15","text":" @dev The signature derives the `address(0)`."},"errorSelector":"f645eedf","id":2108,"name":"ECDSAInvalidSignature","nameLocation":"570:21:15","nodeType":"ErrorDefinition","parameters":{"id":2107,"nodeType":"ParameterList","parameters":[],"src":"591:2:15"},"src":"564:30:15"},{"documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"600:60:15","text":" @dev The signature has an invalid length."},"errorSelector":"fce698f7","id":2113,"name":"ECDSAInvalidSignatureLength","nameLocation":"671:27:15","nodeType":"ErrorDefinition","parameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"mutability":"mutable","name":"length","nameLocation":"707:6:15","nodeType":"VariableDeclaration","scope":2113,"src":"699:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:16:15"},"src":"665:50:15"},{"documentation":{"id":2114,"nodeType":"StructuredDocumentation","src":"721:85:15","text":" @dev The signature has an S value that is in the upper half order."},"errorSelector":"d78bce0c","id":2118,"name":"ECDSAInvalidSignatureS","nameLocation":"817:22:15","nodeType":"ErrorDefinition","parameters":{"id":2117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"s","nameLocation":"848:1:15","nodeType":"VariableDeclaration","scope":2118,"src":"840:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"840:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"839:11:15"},"src":"811:40:15"},{"body":{"id":2170,"nodeType":"Block","src":"2242:653:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2133,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"2256:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2266:6:15","memberName":"length","nodeType":"MemberAccess","src":"2256:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2276:2:15","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2256:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2168,"nodeType":"Block","src":"2781:108:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2811:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2803:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2155,"name":"address","nodeType":"ElementaryTypeName","src":"2803:7:15","typeDescriptions":{}}},"id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2803:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2159,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"2815:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2828:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2103,"src":"2815:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"expression":{"id":2163,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"2860:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2870:6:15","memberName":"length","nodeType":"MemberAccess","src":"2860:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2852:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2852:7:15","typeDescriptions":{}}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2802:76:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":2132,"id":2167,"nodeType":"Return","src":"2795:83:15"}]},"id":2169,"nodeType":"IfStatement","src":"2252:637:15","trueBody":{"id":2154,"nodeType":"Block","src":"2280:495:15","statements":[{"assignments":[2138],"declarations":[{"constant":false,"id":2138,"mutability":"mutable","name":"r","nameLocation":"2302:1:15","nodeType":"VariableDeclaration","scope":2154,"src":"2294:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2294:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2139,"nodeType":"VariableDeclarationStatement","src":"2294:9:15"},{"assignments":[2141],"declarations":[{"constant":false,"id":2141,"mutability":"mutable","name":"s","nameLocation":"2325:1:15","nodeType":"VariableDeclaration","scope":2154,"src":"2317:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2140,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2317:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2142,"nodeType":"VariableDeclarationStatement","src":"2317:9:15"},{"assignments":[2144],"declarations":[{"constant":false,"id":2144,"mutability":"mutable","name":"v","nameLocation":"2346:1:15","nodeType":"VariableDeclaration","scope":2154,"src":"2340:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2143,"name":"uint8","nodeType":"ElementaryTypeName","src":"2340:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2145,"nodeType":"VariableDeclarationStatement","src":"2340:7:15"},{"AST":{"nativeSrc":"2548:171:15","nodeType":"YulBlock","src":"2548:171:15","statements":[{"nativeSrc":"2566:32:15","nodeType":"YulAssignment","src":"2566:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2581:9:15","nodeType":"YulIdentifier","src":"2581:9:15"},{"kind":"number","nativeSrc":"2592:4:15","nodeType":"YulLiteral","src":"2592:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2577:3:15","nodeType":"YulIdentifier","src":"2577:3:15"},"nativeSrc":"2577:20:15","nodeType":"YulFunctionCall","src":"2577:20:15"}],"functionName":{"name":"mload","nativeSrc":"2571:5:15","nodeType":"YulIdentifier","src":"2571:5:15"},"nativeSrc":"2571:27:15","nodeType":"YulFunctionCall","src":"2571:27:15"},"variableNames":[{"name":"r","nativeSrc":"2566:1:15","nodeType":"YulIdentifier","src":"2566:1:15"}]},{"nativeSrc":"2615:32:15","nodeType":"YulAssignment","src":"2615:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2630:9:15","nodeType":"YulIdentifier","src":"2630:9:15"},{"kind":"number","nativeSrc":"2641:4:15","nodeType":"YulLiteral","src":"2641:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2626:3:15","nodeType":"YulIdentifier","src":"2626:3:15"},"nativeSrc":"2626:20:15","nodeType":"YulFunctionCall","src":"2626:20:15"}],"functionName":{"name":"mload","nativeSrc":"2620:5:15","nodeType":"YulIdentifier","src":"2620:5:15"},"nativeSrc":"2620:27:15","nodeType":"YulFunctionCall","src":"2620:27:15"},"variableNames":[{"name":"s","nativeSrc":"2615:1:15","nodeType":"YulIdentifier","src":"2615:1:15"}]},{"nativeSrc":"2664:41:15","nodeType":"YulAssignment","src":"2664:41:15","value":{"arguments":[{"kind":"number","nativeSrc":"2674:1:15","nodeType":"YulLiteral","src":"2674:1:15","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2687:9:15","nodeType":"YulIdentifier","src":"2687:9:15"},{"kind":"number","nativeSrc":"2698:4:15","nodeType":"YulLiteral","src":"2698:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2683:3:15","nodeType":"YulIdentifier","src":"2683:3:15"},"nativeSrc":"2683:20:15","nodeType":"YulFunctionCall","src":"2683:20:15"}],"functionName":{"name":"mload","nativeSrc":"2677:5:15","nodeType":"YulIdentifier","src":"2677:5:15"},"nativeSrc":"2677:27:15","nodeType":"YulFunctionCall","src":"2677:27:15"}],"functionName":{"name":"byte","nativeSrc":"2669:4:15","nodeType":"YulIdentifier","src":"2669:4:15"},"nativeSrc":"2669:36:15","nodeType":"YulFunctionCall","src":"2669:36:15"},"variableNames":[{"name":"v","nativeSrc":"2664:1:15","nodeType":"YulIdentifier","src":"2664:1:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":2138,"isOffset":false,"isSlot":false,"src":"2566:1:15","valueSize":1},{"declaration":2141,"isOffset":false,"isSlot":false,"src":"2615:1:15","valueSize":1},{"declaration":2123,"isOffset":false,"isSlot":false,"src":"2581:9:15","valueSize":1},{"declaration":2123,"isOffset":false,"isSlot":false,"src":"2630:9:15","valueSize":1},{"declaration":2123,"isOffset":false,"isSlot":false,"src":"2687:9:15","valueSize":1},{"declaration":2144,"isOffset":false,"isSlot":false,"src":"2664:1:15","valueSize":1}],"id":2146,"nodeType":"InlineAssembly","src":"2539:180:15"},{"expression":{"arguments":[{"id":2148,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"2750:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2149,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"2756:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2150,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2759:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2151,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2762:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2147,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2171,2251,2359],"referencedDeclaration":2359,"src":"2739:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":2132,"id":2153,"nodeType":"Return","src":"2732:32:15"}]}}]},"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"857:1267:15","text":" @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":2171,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2138:10:15","nodeType":"FunctionDefinition","parameters":{"id":2124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"hash","nameLocation":"2157:4:15","nodeType":"VariableDeclaration","scope":2171,"src":"2149:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2149:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"signature","nameLocation":"2176:9:15","nodeType":"VariableDeclaration","scope":2171,"src":"2163:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2122,"name":"bytes","nodeType":"ElementaryTypeName","src":"2163:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2148:38:15"},"returnParameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2171,"src":"2210:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2125,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2171,"src":"2219:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2128,"nodeType":"UserDefinedTypeName","pathNode":{"id":2127,"name":"RecoverError","nameLocations":["2219:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"2219:12:15"},"referencedDeclaration":2105,"src":"2219:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":2131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2171,"src":"2233:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2233:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2209:32:15"},"scope":2445,"src":"2129:766:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2200,"nodeType":"Block","src":"3789:168:15","statements":[{"assignments":[2182,2185,2187],"declarations":[{"constant":false,"id":2182,"mutability":"mutable","name":"recovered","nameLocation":"3808:9:15","nodeType":"VariableDeclaration","scope":2200,"src":"3800:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2181,"name":"address","nodeType":"ElementaryTypeName","src":"3800:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2185,"mutability":"mutable","name":"error","nameLocation":"3832:5:15","nodeType":"VariableDeclaration","scope":2200,"src":"3819:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2184,"nodeType":"UserDefinedTypeName","pathNode":{"id":2183,"name":"RecoverError","nameLocations":["3819:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"3819:12:15"},"referencedDeclaration":2105,"src":"3819:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":2187,"mutability":"mutable","name":"errorArg","nameLocation":"3847:8:15","nodeType":"VariableDeclaration","scope":2200,"src":"3839:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3839:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2192,"initialValue":{"arguments":[{"id":2189,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"3870:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2190,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"3876:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2188,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2171,2251,2359],"referencedDeclaration":2171,"src":"3859:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3799:87:15"},{"expression":{"arguments":[{"id":2194,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"3908:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},{"id":2195,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"3915:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2193,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"3896:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2105_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3896:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2197,"nodeType":"ExpressionStatement","src":"3896:28:15"},{"expression":{"id":2198,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"3941:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2180,"id":2199,"nodeType":"Return","src":"3934:16:15"}]},"documentation":{"id":2172,"nodeType":"StructuredDocumentation","src":"2901:796:15","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."},"id":2201,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3711:7:15","nodeType":"FunctionDefinition","parameters":{"id":2177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"hash","nameLocation":"3727:4:15","nodeType":"VariableDeclaration","scope":2201,"src":"3719:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3719:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2176,"mutability":"mutable","name":"signature","nameLocation":"3746:9:15","nodeType":"VariableDeclaration","scope":2201,"src":"3733:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2175,"name":"bytes","nodeType":"ElementaryTypeName","src":"3733:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3718:38:15"},"returnParameters":{"id":2180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2201,"src":"3780:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2178,"name":"address","nodeType":"ElementaryTypeName","src":"3780:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3779:9:15"},"scope":2445,"src":"3702:255:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2250,"nodeType":"Block","src":"4285:342:15","statements":[{"id":2249,"nodeType":"UncheckedBlock","src":"4295:326:15","statements":[{"assignments":[2219],"declarations":[{"constant":false,"id":2219,"mutability":"mutable","name":"s","nameLocation":"4327:1:15","nodeType":"VariableDeclaration","scope":2249,"src":"4319:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4319:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2226,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2220,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"4331:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4344:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4336:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4336:7:15","typeDescriptions":{}}},"id":2224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4336:75:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4331:80:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4319:92:15"},{"assignments":[2228],"declarations":[{"constant":false,"id":2228,"mutability":"mutable","name":"v","nameLocation":"4528:1:15","nodeType":"VariableDeclaration","scope":2249,"src":"4522:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2227,"name":"uint8","nodeType":"ElementaryTypeName","src":"4522:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2241,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2233,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"4547:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4539:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"4539:7:15","typeDescriptions":{}}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4539:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4554:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4539:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2237,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4538:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4561:2:15","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4538:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4532:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2229,"name":"uint8","nodeType":"ElementaryTypeName","src":"4532:5:15","typeDescriptions":{}}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4532:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4522:42:15"},{"expression":{"arguments":[{"id":2243,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"4596:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2244,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"4602:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2245,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"4605:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2246,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"4608:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2242,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2171,2251,2359],"referencedDeclaration":2359,"src":"4585:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4585:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":2217,"id":2248,"nodeType":"Return","src":"4578:32:15"}]}]},"documentation":{"id":2202,"nodeType":"StructuredDocumentation","src":"3963:205:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"},"id":2251,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4182:10:15","nodeType":"FunctionDefinition","parameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2204,"mutability":"mutable","name":"hash","nameLocation":"4201:4:15","nodeType":"VariableDeclaration","scope":2251,"src":"4193:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2206,"mutability":"mutable","name":"r","nameLocation":"4215:1:15","nodeType":"VariableDeclaration","scope":2251,"src":"4207:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4207:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2208,"mutability":"mutable","name":"vs","nameLocation":"4226:2:15","nodeType":"VariableDeclaration","scope":2251,"src":"4218:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4218:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4192:37:15"},"returnParameters":{"id":2217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2251,"src":"4253:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2210,"name":"address","nodeType":"ElementaryTypeName","src":"4253:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2251,"src":"4262:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2213,"nodeType":"UserDefinedTypeName","pathNode":{"id":2212,"name":"RecoverError","nameLocations":["4262:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"4262:12:15"},"referencedDeclaration":2105,"src":"4262:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":2216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2251,"src":"4276:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4276:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4252:32:15"},"scope":2445,"src":"4173:454:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2283,"nodeType":"Block","src":"4840:164:15","statements":[{"assignments":[2264,2267,2269],"declarations":[{"constant":false,"id":2264,"mutability":"mutable","name":"recovered","nameLocation":"4859:9:15","nodeType":"VariableDeclaration","scope":2283,"src":"4851:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2263,"name":"address","nodeType":"ElementaryTypeName","src":"4851:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2267,"mutability":"mutable","name":"error","nameLocation":"4883:5:15","nodeType":"VariableDeclaration","scope":2283,"src":"4870:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2266,"nodeType":"UserDefinedTypeName","pathNode":{"id":2265,"name":"RecoverError","nameLocations":["4870:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"4870:12:15"},"referencedDeclaration":2105,"src":"4870:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":2269,"mutability":"mutable","name":"errorArg","nameLocation":"4898:8:15","nodeType":"VariableDeclaration","scope":2283,"src":"4890:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4890:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2275,"initialValue":{"arguments":[{"id":2271,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"4921:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2272,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"4927:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2273,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"4930:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2270,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2171,2251,2359],"referencedDeclaration":2251,"src":"4910:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4910:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4850:83:15"},{"expression":{"arguments":[{"id":2277,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"4955:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},{"id":2278,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"4962:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2276,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"4943:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2105_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4943:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2280,"nodeType":"ExpressionStatement","src":"4943:28:15"},{"expression":{"id":2281,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"4988:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2262,"id":2282,"nodeType":"Return","src":"4981:16:15"}]},"documentation":{"id":2252,"nodeType":"StructuredDocumentation","src":"4633:116:15","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."},"id":2284,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4763:7:15","nodeType":"FunctionDefinition","parameters":{"id":2259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"hash","nameLocation":"4779:4:15","nodeType":"VariableDeclaration","scope":2284,"src":"4771:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4771:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2256,"mutability":"mutable","name":"r","nameLocation":"4793:1:15","nodeType":"VariableDeclaration","scope":2284,"src":"4785:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2255,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4785:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2258,"mutability":"mutable","name":"vs","nameLocation":"4804:2:15","nodeType":"VariableDeclaration","scope":2284,"src":"4796:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4796:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4770:37:15"},"returnParameters":{"id":2262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2284,"src":"4831:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2260,"name":"address","nodeType":"ElementaryTypeName","src":"4831:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4830:9:15"},"scope":2445,"src":"4754:250:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2358,"nodeType":"Block","src":"5298:1372:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2305,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6194:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6186:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"6186:7:15","typeDescriptions":{}}},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6199:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6186:79:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2319,"nodeType":"IfStatement","src":"6182:164:15","trueBody":{"id":2318,"nodeType":"Block","src":"6267:79:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6297:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6289:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2309,"name":"address","nodeType":"ElementaryTypeName","src":"6289:7:15","typeDescriptions":{}}},"id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6289:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2313,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"6301:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6314:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2104,"src":"6301:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},{"id":2315,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6333:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6288:47:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":2302,"id":2317,"nodeType":"Return","src":"6281:54:15"}]}},{"assignments":[2321],"declarations":[{"constant":false,"id":2321,"mutability":"mutable","name":"signer","nameLocation":"6448:6:15","nodeType":"VariableDeclaration","scope":2358,"src":"6440:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2320,"name":"address","nodeType":"ElementaryTypeName","src":"6440:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2328,"initialValue":{"arguments":[{"id":2323,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6467:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2324,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"6473:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2325,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"6476:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2326,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6479:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2322,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6457:9:15","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6457:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6440:41:15"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"6495:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6513:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6505:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2330,"name":"address","nodeType":"ElementaryTypeName","src":"6505:7:15","typeDescriptions":{}}},"id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6505:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6495:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2348,"nodeType":"IfStatement","src":"6491:113:15","trueBody":{"id":2347,"nodeType":"Block","src":"6517:87:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6547:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6539:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2335,"name":"address","nodeType":"ElementaryTypeName","src":"6539:7:15","typeDescriptions":{}}},"id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6539:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2339,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"6551:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6564:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2102,"src":"6551:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6590:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6582:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6582:7:15","typeDescriptions":{}}},"id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6582:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2345,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6538:55:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":2302,"id":2346,"nodeType":"Return","src":"6531:62:15"}]}},{"expression":{"components":[{"id":2349,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"6622:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2350,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"6630:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6643:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2101,"src":"6630:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":2354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6660:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6652:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6652:7:15","typeDescriptions":{}}},"id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6652:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6621:42:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":2302,"id":2357,"nodeType":"Return","src":"6614:49:15"}]},"documentation":{"id":2285,"nodeType":"StructuredDocumentation","src":"5010:125:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2359,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5149:10:15","nodeType":"FunctionDefinition","parameters":{"id":2294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"hash","nameLocation":"5177:4:15","nodeType":"VariableDeclaration","scope":2359,"src":"5169:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5169:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2289,"mutability":"mutable","name":"v","nameLocation":"5197:1:15","nodeType":"VariableDeclaration","scope":2359,"src":"5191:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2288,"name":"uint8","nodeType":"ElementaryTypeName","src":"5191:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2291,"mutability":"mutable","name":"r","nameLocation":"5216:1:15","nodeType":"VariableDeclaration","scope":2359,"src":"5208:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2290,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5208:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2293,"mutability":"mutable","name":"s","nameLocation":"5235:1:15","nodeType":"VariableDeclaration","scope":2359,"src":"5227:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5227:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5159:83:15"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"5266:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2295,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"5275:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2298,"nodeType":"UserDefinedTypeName","pathNode":{"id":2297,"name":"RecoverError","nameLocations":["5275:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"5275:12:15"},"referencedDeclaration":2105,"src":"5275:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"5289:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5289:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5265:32:15"},"scope":2445,"src":"5140:1530:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2394,"nodeType":"Block","src":"6897:166:15","statements":[{"assignments":[2374,2377,2379],"declarations":[{"constant":false,"id":2374,"mutability":"mutable","name":"recovered","nameLocation":"6916:9:15","nodeType":"VariableDeclaration","scope":2394,"src":"6908:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2373,"name":"address","nodeType":"ElementaryTypeName","src":"6908:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2377,"mutability":"mutable","name":"error","nameLocation":"6940:5:15","nodeType":"VariableDeclaration","scope":2394,"src":"6927:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2376,"nodeType":"UserDefinedTypeName","pathNode":{"id":2375,"name":"RecoverError","nameLocations":["6927:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"6927:12:15"},"referencedDeclaration":2105,"src":"6927:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":2379,"mutability":"mutable","name":"errorArg","nameLocation":"6955:8:15","nodeType":"VariableDeclaration","scope":2394,"src":"6947:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6947:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2386,"initialValue":{"arguments":[{"id":2381,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"6978:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2382,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"6984:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2383,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"6987:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2384,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"6990:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2380,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2171,2251,2359],"referencedDeclaration":2359,"src":"6967:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6967:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2105_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"6907:85:15"},{"expression":{"arguments":[{"id":2388,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"7014:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},{"id":2389,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"7021:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2387,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"7002:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2105_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7002:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2391,"nodeType":"ExpressionStatement","src":"7002:28:15"},{"expression":{"id":2392,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"7047:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2372,"id":2393,"nodeType":"Return","src":"7040:16:15"}]},"documentation":{"id":2360,"nodeType":"StructuredDocumentation","src":"6676:122:15","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2395,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6812:7:15","nodeType":"FunctionDefinition","parameters":{"id":2369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"hash","nameLocation":"6828:4:15","nodeType":"VariableDeclaration","scope":2395,"src":"6820:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6820:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2364,"mutability":"mutable","name":"v","nameLocation":"6840:1:15","nodeType":"VariableDeclaration","scope":2395,"src":"6834:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2363,"name":"uint8","nodeType":"ElementaryTypeName","src":"6834:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"r","nameLocation":"6851:1:15","nodeType":"VariableDeclaration","scope":2395,"src":"6843:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6843:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2368,"mutability":"mutable","name":"s","nameLocation":"6862:1:15","nodeType":"VariableDeclaration","scope":2395,"src":"6854:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6854:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6819:45:15"},"returnParameters":{"id":2372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2395,"src":"6888:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2370,"name":"address","nodeType":"ElementaryTypeName","src":"6888:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6887:9:15"},"scope":2445,"src":"6803:260:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2443,"nodeType":"Block","src":"7268:460:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"7282:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2405,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"7291:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7304:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2101,"src":"7291:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"src":"7282:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2410,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"7378:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2411,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"7387:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7400:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2102,"src":"7387:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"src":"7378:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2418,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"7483:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2419,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"7492:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7505:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2103,"src":"7492:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"src":"7483:44:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2430,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"7617:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2431,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"7626:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2105_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7639:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2104,"src":"7626:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"src":"7617:39:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2439,"nodeType":"IfStatement","src":"7613:109:15","trueBody":{"id":2438,"nodeType":"Block","src":"7658:64:15","statements":[{"errorCall":{"arguments":[{"id":2435,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"7702:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2434,"name":"ECDSAInvalidSignatureS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"7679:22:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$_t_error_$","typeString":"function (bytes32) pure returns (error)"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7679:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2437,"nodeType":"RevertStatement","src":"7672:39:15"}]}},"id":2440,"nodeType":"IfStatement","src":"7479:243:15","trueBody":{"id":2429,"nodeType":"Block","src":"7529:78:15","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2425,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"7586:8:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7578:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2423,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:15","typeDescriptions":{}}},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7578:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2422,"name":"ECDSAInvalidSignatureLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"7550:27:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7550:46:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2428,"nodeType":"RevertStatement","src":"7543:53:15"}]}},"id":2441,"nodeType":"IfStatement","src":"7374:348:15","trueBody":{"id":2417,"nodeType":"Block","src":"7418:55:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2414,"name":"ECDSAInvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"7439:21:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7439:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2416,"nodeType":"RevertStatement","src":"7432:30:15"}]}},"id":2442,"nodeType":"IfStatement","src":"7278:444:15","trueBody":{"id":2409,"nodeType":"Block","src":"7313:55:15","statements":[{"functionReturnParameters":2403,"id":2408,"nodeType":"Return","src":"7327:7:15"}]}}]},"documentation":{"id":2396,"nodeType":"StructuredDocumentation","src":"7069:122:15","text":" @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."},"id":2444,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"7205:11:15","nodeType":"FunctionDefinition","parameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2399,"mutability":"mutable","name":"error","nameLocation":"7230:5:15","nodeType":"VariableDeclaration","scope":2444,"src":"7217:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2398,"nodeType":"UserDefinedTypeName","pathNode":{"id":2397,"name":"RecoverError","nameLocations":["7217:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"7217:12:15"},"referencedDeclaration":2105,"src":"7217:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2105","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"errorArg","nameLocation":"7245:8:15","nodeType":"VariableDeclaration","scope":2444,"src":"7237:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7237:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7216:38:15"},"returnParameters":{"id":2403,"nodeType":"ParameterList","parameters":[],"src":"7268:0:15"},"scope":2445,"src":"7196:532:15","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2446,"src":"344:7386:15","usedErrors":[2108,2113,2118],"usedEvents":[]}],"src":"112:7619:15"},"id":15},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","exportedSymbols":{"EIP712":[2672],"IERC5267":[172],"MessageHashUtils":[2746],"ShortString":[1521],"ShortStrings":[1732]},"id":2673,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2447,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:16"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","file":"./MessageHashUtils.sol","id":2449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2673,"sourceUnit":2747,"src":"139:56:16","symbolAliases":[{"foreign":{"id":2448,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"147:16:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","file":"../ShortStrings.sol","id":2452,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2673,"sourceUnit":1733,"src":"196:62:16","symbolAliases":[{"foreign":{"id":2450,"name":"ShortStrings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"204:12:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2451,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"218:11:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","file":"../../interfaces/IERC5267.sol","id":2454,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2673,"sourceUnit":173,"src":"259:55:16","symbolAliases":[{"foreign":{"id":2453,"name":"IERC5267","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"267:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2456,"name":"IERC5267","nameLocations":["1988:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":172,"src":"1988:8:16"},"id":2457,"nodeType":"InheritanceSpecifier","src":"1988:8:16"}],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":2455,"nodeType":"StructuredDocumentation","src":"316:1643:16","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"},"fullyImplemented":true,"id":2672,"linearizedBaseContracts":[2672,172],"name":"EIP712","nameLocation":"1978:6:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2459,"libraryName":{"id":2458,"name":"ShortStrings","nameLocations":["2009:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":1732,"src":"2009:12:16"},"nodeType":"UsingForDirective","src":"2003:25:16"},{"constant":true,"id":2464,"mutability":"constant","name":"TYPE_HASH","nameLocation":"2059:9:16","nodeType":"VariableDeclaration","scope":2672,"src":"2034:140:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2034:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2089:84:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":2461,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2079:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2079:95:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2466,"mutability":"immutable","name":"_cachedDomainSeparator","nameLocation":"2399:22:16","nodeType":"VariableDeclaration","scope":2672,"src":"2373:48:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2373:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2468,"mutability":"immutable","name":"_cachedChainId","nameLocation":"2453:14:16","nodeType":"VariableDeclaration","scope":2672,"src":"2427:40:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"2427:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2470,"mutability":"immutable","name":"_cachedThis","nameLocation":"2499:11:16","nodeType":"VariableDeclaration","scope":2672,"src":"2473:37:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2469,"name":"address","nodeType":"ElementaryTypeName","src":"2473:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":2472,"mutability":"immutable","name":"_hashedName","nameLocation":"2543:11:16","nodeType":"VariableDeclaration","scope":2672,"src":"2517:37:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2471,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2517:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2474,"mutability":"immutable","name":"_hashedVersion","nameLocation":"2586:14:16","nodeType":"VariableDeclaration","scope":2672,"src":"2560:40:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2560:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2477,"mutability":"immutable","name":"_name","nameLocation":"2637:5:16","nodeType":"VariableDeclaration","scope":2672,"src":"2607:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":2476,"nodeType":"UserDefinedTypeName","pathNode":{"id":2475,"name":"ShortString","nameLocations":["2607:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"2607:11:16"},"referencedDeclaration":1521,"src":"2607:11:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":2480,"mutability":"immutable","name":"_version","nameLocation":"2678:8:16","nodeType":"VariableDeclaration","scope":2672,"src":"2648:38:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"},"typeName":{"id":2479,"nodeType":"UserDefinedTypeName","pathNode":{"id":2478,"name":"ShortString","nameLocations":["2648:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":1521,"src":"2648:11:16"},"referencedDeclaration":1521,"src":"2648:11:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":2482,"mutability":"mutable","name":"_nameFallback","nameLocation":"2707:13:16","nodeType":"VariableDeclaration","scope":2672,"src":"2692:28:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2481,"name":"string","nodeType":"ElementaryTypeName","src":"2692:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2484,"mutability":"mutable","name":"_versionFallback","nameLocation":"2741:16:16","nodeType":"VariableDeclaration","scope":2672,"src":"2726:31:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2483,"name":"string","nodeType":"ElementaryTypeName","src":"2726:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":2541,"nodeType":"Block","src":"3383:376:16","statements":[{"expression":{"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2492,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"3393:5:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2495,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"3432:13:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":2493,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"3401:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3406:25:16","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"3401:30:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1521_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3401:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"src":"3393:53:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"id":2498,"nodeType":"ExpressionStatement","src":"3393:53:16"},{"expression":{"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2499,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"3456:8:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2502,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"3501:16:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":2500,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"3467:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3475:25:16","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"3467:33:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1521_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3467:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"src":"3456:62:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"id":2505,"nodeType":"ExpressionStatement","src":"3456:62:16"},{"expression":{"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2506,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"3528:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2510,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"3558:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3552:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2508,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:16","typeDescriptions":{}}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3552:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2507,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3542:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3542:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3528:36:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2514,"nodeType":"ExpressionStatement","src":"3528:36:16"},{"expression":{"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2515,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"3574:14:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2519,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"3607:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3601:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2517,"name":"bytes","nodeType":"ElementaryTypeName","src":"3601:5:16","typeDescriptions":{}}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3601:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2516,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3591:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3591:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3574:42:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2523,"nodeType":"ExpressionStatement","src":"3574:42:16"},{"expression":{"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2524,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"3627:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2525,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3644:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3650:7:16","memberName":"chainid","nodeType":"MemberAccess","src":"3644:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3627:30:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2528,"nodeType":"ExpressionStatement","src":"3627:30:16"},{"expression":{"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2529,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"3667:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":2530,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"3692:21:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3692:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3667:48:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2533,"nodeType":"ExpressionStatement","src":"3667:48:16"},{"expression":{"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2534,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"3725:11:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2537,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3747:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}],"id":2536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3739:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2535,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:16","typeDescriptions":{}}},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3739:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3725:27:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2540,"nodeType":"ExpressionStatement","src":"3725:27:16"}]},"documentation":{"id":2485,"nodeType":"StructuredDocumentation","src":"2764:559:16","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":2542,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2487,"mutability":"mutable","name":"name","nameLocation":"3354:4:16","nodeType":"VariableDeclaration","scope":2542,"src":"3340:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2486,"name":"string","nodeType":"ElementaryTypeName","src":"3340:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2489,"mutability":"mutable","name":"version","nameLocation":"3374:7:16","nodeType":"VariableDeclaration","scope":2542,"src":"3360:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2488,"name":"string","nodeType":"ElementaryTypeName","src":"3360:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3339:43:16"},"returnParameters":{"id":2491,"nodeType":"ParameterList","parameters":[],"src":"3383:0:16"},"scope":2672,"src":"3328:431:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2567,"nodeType":"Block","src":"3907:200:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2550,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3929:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}],"id":2549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3921:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2548,"name":"address","nodeType":"ElementaryTypeName","src":"3921:7:16","typeDescriptions":{}}},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3921:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2552,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"3938:11:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3921:28:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2554,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3953:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3959:7:16","memberName":"chainid","nodeType":"MemberAccess","src":"3953:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2556,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"3970:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3953:31:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3921:63:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2565,"nodeType":"Block","src":"4046:55:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2562,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"4067:21:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4067:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2547,"id":2564,"nodeType":"Return","src":"4060:30:16"}]},"id":2566,"nodeType":"IfStatement","src":"3917:184:16","trueBody":{"id":2561,"nodeType":"Block","src":"3986:54:16","statements":[{"expression":{"id":2559,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"4007:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2547,"id":2560,"nodeType":"Return","src":"4000:29:16"}]}}]},"documentation":{"id":2543,"nodeType":"StructuredDocumentation","src":"3765:75:16","text":" @dev Returns the domain separator for the current chain."},"id":2568,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3854:18:16","nodeType":"FunctionDefinition","parameters":{"id":2544,"nodeType":"ParameterList","parameters":[],"src":"3872:2:16"},"returnParameters":{"id":2547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2568,"src":"3898:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2545,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3898:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3897:9:16"},"scope":2672,"src":"3845:262:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2588,"nodeType":"Block","src":"4177:115:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":2576,"name":"TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"4215:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2577,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"4226:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2578,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"4239:14:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2579,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4255:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4261:7:16","memberName":"chainid","nodeType":"MemberAccess","src":"4255:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2583,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4278:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}],"id":2582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4270:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2581,"name":"address","nodeType":"ElementaryTypeName","src":"4270:7:16","typeDescriptions":{}}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4270:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2574,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4208:6:16","memberName":"encode","nodeType":"MemberAccess","src":"4204:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:80:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2573,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4194:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4194:91:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2572,"id":2587,"nodeType":"Return","src":"4187:98:16"}]},"id":2589,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"4122:21:16","nodeType":"FunctionDefinition","parameters":{"id":2569,"nodeType":"ParameterList","parameters":[],"src":"4143:2:16"},"returnParameters":{"id":2572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2571,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2589,"src":"4168:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2570,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4168:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4167:9:16"},"scope":2672,"src":"4113:179:16","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2604,"nodeType":"Block","src":"5003:90:16","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2599,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"5053:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5053:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2601,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2592,"src":"5075:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2597,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"5020:16:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MessageHashUtils_$2746_$","typeString":"type(library MessageHashUtils)"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5037:15:16","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":2745,"src":"5020:32:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5020:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2596,"id":2603,"nodeType":"Return","src":"5013:73:16"}]},"documentation":{"id":2590,"nodeType":"StructuredDocumentation","src":"4298:614:16","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":2605,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4926:16:16","nodeType":"FunctionDefinition","parameters":{"id":2593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"structHash","nameLocation":"4951:10:16","nodeType":"VariableDeclaration","scope":2605,"src":"4943:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4943:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4942:20:16"},"returnParameters":{"id":2596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2605,"src":"4994:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2594,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4994:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4993:9:16"},"scope":2672,"src":"4917:176:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[171],"body":{"id":2646,"nodeType":"Block","src":"5472:229:16","statements":[{"expression":{"components":[{"hexValue":"0f","id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5503:7:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[],"expression":{"argumentTypes":[],"id":2625,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"5533:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5533:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2627,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"5560:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5560:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":2629,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5590:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5596:7:16","memberName":"chainid","nodeType":"MemberAccess","src":"5590:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2633,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5625:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$2672","typeString":"contract EIP712"}],"id":2632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5617:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2631,"name":"address","nodeType":"ElementaryTypeName","src":"5617:7:16","typeDescriptions":{}}},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5617:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5652:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5644:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2635,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5644:7:16","typeDescriptions":{}}},"id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5644:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5682:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5668:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"5672:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2640,"nodeType":"ArrayTypeName","src":"5672:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5668:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":2644,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5489:205:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":2623,"id":2645,"nodeType":"Return","src":"5482:212:16"}]},"documentation":{"id":2606,"nodeType":"StructuredDocumentation","src":"5099:40:16","text":" @dev See {IERC-5267}."},"functionSelector":"84b0196e","id":2647,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"5153:12:16","nodeType":"FunctionDefinition","parameters":{"id":2607,"nodeType":"ParameterList","parameters":[],"src":"5165:2:16"},"returnParameters":{"id":2623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2609,"mutability":"mutable","name":"fields","nameLocation":"5249:6:16","nodeType":"VariableDeclaration","scope":2647,"src":"5242:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":2608,"name":"bytes1","nodeType":"ElementaryTypeName","src":"5242:6:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":2611,"mutability":"mutable","name":"name","nameLocation":"5283:4:16","nodeType":"VariableDeclaration","scope":2647,"src":"5269:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2610,"name":"string","nodeType":"ElementaryTypeName","src":"5269:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2613,"mutability":"mutable","name":"version","nameLocation":"5315:7:16","nodeType":"VariableDeclaration","scope":2647,"src":"5301:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2612,"name":"string","nodeType":"ElementaryTypeName","src":"5301:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2615,"mutability":"mutable","name":"chainId","nameLocation":"5344:7:16","nodeType":"VariableDeclaration","scope":2647,"src":"5336:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2614,"name":"uint256","nodeType":"ElementaryTypeName","src":"5336:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2617,"mutability":"mutable","name":"verifyingContract","nameLocation":"5373:17:16","nodeType":"VariableDeclaration","scope":2647,"src":"5365:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2616,"name":"address","nodeType":"ElementaryTypeName","src":"5365:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2619,"mutability":"mutable","name":"salt","nameLocation":"5412:4:16","nodeType":"VariableDeclaration","scope":2647,"src":"5404:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5404:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2622,"mutability":"mutable","name":"extensions","nameLocation":"5447:10:16","nodeType":"VariableDeclaration","scope":2647,"src":"5430:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2620,"name":"uint256","nodeType":"ElementaryTypeName","src":"5430:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2621,"nodeType":"ArrayTypeName","src":"5430:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5228:239:16"},"scope":2672,"src":"5144:557:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2658,"nodeType":"Block","src":"6082:65:16","statements":[{"expression":{"arguments":[{"id":2655,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"6126:13:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":2653,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"6099:5:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6105:20:16","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"6099:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1521_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6099:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2652,"id":2657,"nodeType":"Return","src":"6092:48:16"}]},"documentation":{"id":2648,"nodeType":"StructuredDocumentation","src":"5707:256:16","text":" @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":2659,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Name","nameLocation":"6030:11:16","nodeType":"FunctionDefinition","parameters":{"id":2649,"nodeType":"ParameterList","parameters":[],"src":"6041:2:16"},"returnParameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2659,"src":"6067:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2650,"name":"string","nodeType":"ElementaryTypeName","src":"6067:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6066:15:16"},"scope":2672,"src":"6021:126:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2670,"nodeType":"Block","src":"6537:71:16","statements":[{"expression":{"arguments":[{"id":2667,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"6584:16:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":2665,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"6554:8:16","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1521","typeString":"ShortString"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6563:20:16","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1700,"src":"6554:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1521_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1521_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6554:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2664,"id":2669,"nodeType":"Return","src":"6547:54:16"}]},"documentation":{"id":2660,"nodeType":"StructuredDocumentation","src":"6153:262:16","text":" @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":2671,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Version","nameLocation":"6482:14:16","nodeType":"FunctionDefinition","parameters":{"id":2661,"nodeType":"ParameterList","parameters":[],"src":"6496:2:16"},"returnParameters":{"id":2664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2671,"src":"6522:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2662,"name":"string","nodeType":"ElementaryTypeName","src":"6522:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6521:15:16"},"scope":2672,"src":"6473:135:16","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2673,"src":"1960:4650:16","usedErrors":[1529,1531],"usedEvents":[152]}],"src":"113:6498:16"},"id":16},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","exportedSymbols":{"MessageHashUtils":[2746],"Strings":[2097]},"id":2747,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2674,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:17"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":2676,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2747,"sourceUnit":2098,"src":"149:39:17","symbolAliases":[{"foreign":{"id":2675,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"157:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":2677,"nodeType":"StructuredDocumentation","src":"190:330:17","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"id":2746,"linearizedBaseContracts":[2746],"name":"MessageHashUtils","nameLocation":"529:16:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":2686,"nodeType":"Block","src":"1314:368:17","statements":[{"AST":{"nativeSrc":"1376:300:17","nodeType":"YulBlock","src":"1376:300:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1397:4:17","nodeType":"YulLiteral","src":"1397:4:17","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1403:34:17","nodeType":"YulLiteral","src":"1403:34:17","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1390:6:17","nodeType":"YulIdentifier","src":"1390:6:17"},"nativeSrc":"1390:48:17","nodeType":"YulFunctionCall","src":"1390:48:17"},"nativeSrc":"1390:48:17","nodeType":"YulExpressionStatement","src":"1390:48:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1499:4:17","nodeType":"YulLiteral","src":"1499:4:17","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1505:11:17","nodeType":"YulIdentifier","src":"1505:11:17"}],"functionName":{"name":"mstore","nativeSrc":"1492:6:17","nodeType":"YulIdentifier","src":"1492:6:17"},"nativeSrc":"1492:25:17","nodeType":"YulFunctionCall","src":"1492:25:17"},"nativeSrc":"1492:25:17","nodeType":"YulExpressionStatement","src":"1492:25:17"},{"nativeSrc":"1571:31:17","nodeType":"YulAssignment","src":"1571:31:17","value":{"arguments":[{"kind":"number","nativeSrc":"1591:4:17","nodeType":"YulLiteral","src":"1591:4:17","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1597:4:17","nodeType":"YulLiteral","src":"1597:4:17","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1581:9:17","nodeType":"YulIdentifier","src":"1581:9:17"},"nativeSrc":"1581:21:17","nodeType":"YulFunctionCall","src":"1581:21:17"},"variableNames":[{"name":"digest","nativeSrc":"1571:6:17","nodeType":"YulIdentifier","src":"1571:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":2683,"isOffset":false,"isSlot":false,"src":"1571:6:17","valueSize":1},{"declaration":2680,"isOffset":false,"isSlot":false,"src":"1505:11:17","valueSize":1}],"id":2685,"nodeType":"InlineAssembly","src":"1367:309:17"}]},"documentation":{"id":2678,"nodeType":"StructuredDocumentation","src":"552:665:17","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"id":2687,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1231:22:17","nodeType":"FunctionDefinition","parameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"mutability":"mutable","name":"messageHash","nameLocation":"1262:11:17","nodeType":"VariableDeclaration","scope":2687,"src":"1254:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2679,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1253:21:17"},"returnParameters":{"id":2684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"digest","nameLocation":"1306:6:17","nodeType":"VariableDeclaration","scope":2687,"src":"1298:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2682,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1298:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1297:16:17"},"scope":2746,"src":"1222:460:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2712,"nodeType":"Block","src":"2234:143:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2286:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":2704,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"2343:7:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2351:6:17","memberName":"length","nodeType":"MemberAccess","src":"2343:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2702,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"2326:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2097_$","typeString":"type(library Strings)"}},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2334:8:17","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1910,"src":"2326:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2326:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2320:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2700,"name":"bytes","nodeType":"ElementaryTypeName","src":"2320:5:17","typeDescriptions":{}}},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2708,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"2361:7:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2273:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2696,"name":"bytes","nodeType":"ElementaryTypeName","src":"2273:5:17","typeDescriptions":{}}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2279:6:17","memberName":"concat","nodeType":"MemberAccess","src":"2273:12:17","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2273:96:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2695,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2263:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:107:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2694,"id":2711,"nodeType":"Return","src":"2244:126:17"}]},"documentation":{"id":2688,"nodeType":"StructuredDocumentation","src":"1688:455:17","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"id":2713,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2157:22:17","nodeType":"FunctionDefinition","parameters":{"id":2691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2690,"mutability":"mutable","name":"message","nameLocation":"2193:7:17","nodeType":"VariableDeclaration","scope":2713,"src":"2180:20:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2689,"name":"bytes","nodeType":"ElementaryTypeName","src":"2180:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2179:22:17"},"returnParameters":{"id":2694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2713,"src":"2225:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2692,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:9:17"},"scope":2746,"src":"2148:229:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2732,"nodeType":"Block","src":"2831:80:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2875:10:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2727,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"2887:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2728,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"2898:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2724,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2858:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2862:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"2858:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2723,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2848:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2848:56:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2722,"id":2731,"nodeType":"Return","src":"2841:63:17"}]},"documentation":{"id":2714,"nodeType":"StructuredDocumentation","src":"2383:332:17","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"id":2733,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2729:31:17","nodeType":"FunctionDefinition","parameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2716,"mutability":"mutable","name":"validator","nameLocation":"2769:9:17","nodeType":"VariableDeclaration","scope":2733,"src":"2761:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2715,"name":"address","nodeType":"ElementaryTypeName","src":"2761:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2718,"mutability":"mutable","name":"data","nameLocation":"2793:4:17","nodeType":"VariableDeclaration","scope":2733,"src":"2780:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2717,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2760:38:17"},"returnParameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2733,"src":"2822:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2822:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2821:9:17"},"scope":2746,"src":"2720:191:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2744,"nodeType":"Block","src":"3462:292:17","statements":[{"AST":{"nativeSrc":"3524:224:17","nodeType":"YulBlock","src":"3524:224:17","statements":[{"nativeSrc":"3538:22:17","nodeType":"YulVariableDeclaration","src":"3538:22:17","value":{"arguments":[{"kind":"number","nativeSrc":"3555:4:17","nodeType":"YulLiteral","src":"3555:4:17","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3549:5:17","nodeType":"YulIdentifier","src":"3549:5:17"},"nativeSrc":"3549:11:17","nodeType":"YulFunctionCall","src":"3549:11:17"},"variables":[{"name":"ptr","nativeSrc":"3542:3:17","nodeType":"YulTypedName","src":"3542:3:17","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"3580:3:17","nodeType":"YulIdentifier","src":"3580:3:17"},{"hexValue":"1901","kind":"string","nativeSrc":"3585:10:17","nodeType":"YulLiteral","src":"3585:10:17","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"3573:6:17","nodeType":"YulIdentifier","src":"3573:6:17"},"nativeSrc":"3573:23:17","nodeType":"YulFunctionCall","src":"3573:23:17"},"nativeSrc":"3573:23:17","nodeType":"YulExpressionStatement","src":"3573:23:17"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3620:3:17","nodeType":"YulIdentifier","src":"3620:3:17"},{"kind":"number","nativeSrc":"3625:4:17","nodeType":"YulLiteral","src":"3625:4:17","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"3616:3:17","nodeType":"YulIdentifier","src":"3616:3:17"},"nativeSrc":"3616:14:17","nodeType":"YulFunctionCall","src":"3616:14:17"},{"name":"domainSeparator","nativeSrc":"3632:15:17","nodeType":"YulIdentifier","src":"3632:15:17"}],"functionName":{"name":"mstore","nativeSrc":"3609:6:17","nodeType":"YulIdentifier","src":"3609:6:17"},"nativeSrc":"3609:39:17","nodeType":"YulFunctionCall","src":"3609:39:17"},"nativeSrc":"3609:39:17","nodeType":"YulExpressionStatement","src":"3609:39:17"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3672:3:17","nodeType":"YulIdentifier","src":"3672:3:17"},{"kind":"number","nativeSrc":"3677:4:17","nodeType":"YulLiteral","src":"3677:4:17","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3668:3:17","nodeType":"YulIdentifier","src":"3668:3:17"},"nativeSrc":"3668:14:17","nodeType":"YulFunctionCall","src":"3668:14:17"},{"name":"structHash","nativeSrc":"3684:10:17","nodeType":"YulIdentifier","src":"3684:10:17"}],"functionName":{"name":"mstore","nativeSrc":"3661:6:17","nodeType":"YulIdentifier","src":"3661:6:17"},"nativeSrc":"3661:34:17","nodeType":"YulFunctionCall","src":"3661:34:17"},"nativeSrc":"3661:34:17","nodeType":"YulExpressionStatement","src":"3661:34:17"},{"nativeSrc":"3708:30:17","nodeType":"YulAssignment","src":"3708:30:17","value":{"arguments":[{"name":"ptr","nativeSrc":"3728:3:17","nodeType":"YulIdentifier","src":"3728:3:17"},{"kind":"number","nativeSrc":"3733:4:17","nodeType":"YulLiteral","src":"3733:4:17","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"3718:9:17","nodeType":"YulIdentifier","src":"3718:9:17"},"nativeSrc":"3718:20:17","nodeType":"YulFunctionCall","src":"3718:20:17"},"variableNames":[{"name":"digest","nativeSrc":"3708:6:17","nodeType":"YulIdentifier","src":"3708:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":2741,"isOffset":false,"isSlot":false,"src":"3708:6:17","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"3632:15:17","valueSize":1},{"declaration":2738,"isOffset":false,"isSlot":false,"src":"3684:10:17","valueSize":1}],"id":2743,"nodeType":"InlineAssembly","src":"3515:233:17"}]},"documentation":{"id":2734,"nodeType":"StructuredDocumentation","src":"2917:431:17","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"id":2745,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3362:15:17","nodeType":"FunctionDefinition","parameters":{"id":2739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"domainSeparator","nameLocation":"3386:15:17","nodeType":"VariableDeclaration","scope":2745,"src":"3378:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3378:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2738,"mutability":"mutable","name":"structHash","nameLocation":"3411:10:17","nodeType":"VariableDeclaration","scope":2745,"src":"3403:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2737,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3403:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3377:45:17"},"returnParameters":{"id":2742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2741,"mutability":"mutable","name":"digest","nameLocation":"3454:6:17","nodeType":"VariableDeclaration","scope":2745,"src":"3446:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3446:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3445:16:17"},"scope":2746,"src":"3353:401:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2747,"src":"521:3235:17","usedErrors":[],"usedEvents":[]}],"src":"123:3634:17"},"id":17},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2770],"IERC165":[2782]},"id":2771,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2748,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:18"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2750,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2771,"sourceUnit":2783,"src":"140:38:18","symbolAliases":[{"foreign":{"id":2749,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"148:7:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2752,"name":"IERC165","nameLocations":["687:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":2782,"src":"687:7:18"},"id":2753,"nodeType":"InheritanceSpecifier","src":"687:7:18"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2751,"nodeType":"StructuredDocumentation","src":"180:478:18","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":2770,"linearizedBaseContracts":[2770,2782],"name":"ERC165","nameLocation":"677:6:18","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2781],"body":{"id":2768,"nodeType":"Block","src":"844:64:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2761,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"861:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2763,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"881:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2782_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2782_$","typeString":"type(contract IERC165)"}],"id":2762,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2782","typeString":"type(contract IERC165)"}},"id":2765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:18","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2760,"id":2767,"nodeType":"Return","src":"854:47:18"}]},"documentation":{"id":2754,"nodeType":"StructuredDocumentation","src":"701:56:18","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2769,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:18","nodeType":"FunctionDefinition","parameters":{"id":2757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2756,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:18","nodeType":"VariableDeclaration","scope":2769,"src":"789:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2755,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:18"},"returnParameters":{"id":2760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2769,"src":"838:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2758,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:18"},"scope":2770,"src":"762:146:18","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2771,"src":"659:251:18","usedErrors":[],"usedEvents":[]}],"src":"114:797:18"},"id":18},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2782]},"id":2783,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2772,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2773,"nodeType":"StructuredDocumentation","src":"141:279:19","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2782,"linearizedBaseContracts":[2782],"name":"IERC165","nameLocation":"431:7:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"445:340:19","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2781,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:19","nodeType":"FunctionDefinition","parameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:19","nodeType":"VariableDeclaration","scope":2781,"src":"817:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2775,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:19"},"returnParameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2781,"src":"860:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2778,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:19"},"scope":2782,"src":"790:76:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2783,"src":"421:447:19","usedErrors":[],"usedEvents":[]}],"src":"115:754:19"},"id":19},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3836]},"id":3837,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2784,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2785,"nodeType":"StructuredDocumentation","src":"129:73:20","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3836,"linearizedBaseContracts":[3836],"name":"Math","nameLocation":"211:4:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2786,"nodeType":"StructuredDocumentation","src":"222:50:20","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":2788,"name":"MathOverflowedMulDiv","nameLocation":"283:20:20","nodeType":"ErrorDefinition","parameters":{"id":2787,"nodeType":"ParameterList","parameters":[],"src":"303:2:20"},"src":"277:29:20"},{"canonicalName":"Math.Rounding","id":2793,"members":[{"id":2789,"name":"Floor","nameLocation":"336:5:20","nodeType":"EnumValue","src":"336:5:20"},{"id":2790,"name":"Ceil","nameLocation":"379:4:20","nodeType":"EnumValue","src":"379:4:20"},{"id":2791,"name":"Trunc","nameLocation":"421:5:20","nodeType":"EnumValue","src":"421:5:20"},{"id":2792,"name":"Expand","nameLocation":"451:6:20","nodeType":"EnumValue","src":"451:6:20"}],"name":"Rounding","nameLocation":"317:8:20","nodeType":"EnumDefinition","src":"312:169:20"},{"body":{"id":2824,"nodeType":"Block","src":"661:140:20","statements":[{"id":2823,"nodeType":"UncheckedBlock","src":"671:124:20","statements":[{"assignments":[2806],"declarations":[{"constant":false,"id":2806,"mutability":"mutable","name":"c","nameLocation":"703:1:20","nodeType":"VariableDeclaration","scope":2823,"src":"695:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2805,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2810,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2807,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"707:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2808,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"711:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2811,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"730:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2812,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"734:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2818,"nodeType":"IfStatement","src":"726:28:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2816,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2804,"id":2817,"nodeType":"Return","src":"737:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2820,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"782:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2804,"id":2822,"nodeType":"Return","src":"768:16:20"}]}]},"documentation":{"id":2794,"nodeType":"StructuredDocumentation","src":"487:93:20","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":2825,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:20","nodeType":"FunctionDefinition","parameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2796,"mutability":"mutable","name":"a","nameLocation":"609:1:20","nodeType":"VariableDeclaration","scope":2825,"src":"601:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2795,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2798,"mutability":"mutable","name":"b","nameLocation":"620:1:20","nodeType":"VariableDeclaration","scope":2825,"src":"612:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:20"},"returnParameters":{"id":2804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2825,"src":"646:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2800,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2825,"src":"652:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:20"},"scope":3836,"src":"585:216:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2852,"nodeType":"Block","src":"984:113:20","statements":[{"id":2851,"nodeType":"UncheckedBlock","src":"994:97:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2837,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"1022:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2838,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"1026:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2844,"nodeType":"IfStatement","src":"1018:28:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2842,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2836,"id":2843,"nodeType":"Return","src":"1029:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2846,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"1074:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"1078:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2849,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2836,"id":2850,"nodeType":"Return","src":"1060:20:20"}]}]},"documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"807:96:20","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":2853,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:20","nodeType":"FunctionDefinition","parameters":{"id":2831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2828,"mutability":"mutable","name":"a","nameLocation":"932:1:20","nodeType":"VariableDeclaration","scope":2853,"src":"924:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2827,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2830,"mutability":"mutable","name":"b","nameLocation":"943:1:20","nodeType":"VariableDeclaration","scope":2853,"src":"935:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2829,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:20"},"returnParameters":{"id":2836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2853,"src":"969:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2832,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2853,"src":"975:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2834,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:20"},"scope":3836,"src":"908:189:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2894,"nodeType":"Block","src":"1283:417:20","statements":[{"id":2893,"nodeType":"UncheckedBlock","src":"1293:401:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"1551:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2872,"nodeType":"IfStatement","src":"1547:28:20","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2870,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2864,"id":2871,"nodeType":"Return","src":"1559:16:20"}},{"assignments":[2874],"declarations":[{"constant":false,"id":2874,"mutability":"mutable","name":"c","nameLocation":"1597:1:20","nodeType":"VariableDeclaration","scope":2893,"src":"1589:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2873,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2878,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"1601:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2876,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"1605:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2879,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"1624:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2880,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"1628:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2882,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"1633:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2888,"nodeType":"IfStatement","src":"1620:33:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2886,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2864,"id":2887,"nodeType":"Return","src":"1636:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":2889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2890,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"1681:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2891,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2864,"id":2892,"nodeType":"Return","src":"1667:16:20"}]}]},"documentation":{"id":2854,"nodeType":"StructuredDocumentation","src":"1103:99:20","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":2895,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:20","nodeType":"FunctionDefinition","parameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2856,"mutability":"mutable","name":"a","nameLocation":"1231:1:20","nodeType":"VariableDeclaration","scope":2895,"src":"1223:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"b","nameLocation":"1242:1:20","nodeType":"VariableDeclaration","scope":2895,"src":"1234:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:20"},"returnParameters":{"id":2864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2895,"src":"1268:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2860,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2895,"src":"1274:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:20"},"scope":3836,"src":"1207:493:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2922,"nodeType":"Block","src":"1887:114:20","statements":[{"id":2921,"nodeType":"UncheckedBlock","src":"1897:98:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2907,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"1925:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2914,"nodeType":"IfStatement","src":"1921:29:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2912,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2906,"id":2913,"nodeType":"Return","src":"1933:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2916,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"1978:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2917,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"1982:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2919,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2906,"id":2920,"nodeType":"Return","src":"1964:20:20"}]}]},"documentation":{"id":2896,"nodeType":"StructuredDocumentation","src":"1706:100:20","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":2923,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:20","nodeType":"FunctionDefinition","parameters":{"id":2901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2898,"mutability":"mutable","name":"a","nameLocation":"1835:1:20","nodeType":"VariableDeclaration","scope":2923,"src":"1827:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2900,"mutability":"mutable","name":"b","nameLocation":"1846:1:20","nodeType":"VariableDeclaration","scope":2923,"src":"1838:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2899,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:20"},"returnParameters":{"id":2906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2923,"src":"1872:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2902,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2923,"src":"1878:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2904,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:20"},"scope":3836,"src":"1811:190:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2950,"nodeType":"Block","src":"2198:114:20","statements":[{"id":2949,"nodeType":"UncheckedBlock","src":"2208:98:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2935,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"2236:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2942,"nodeType":"IfStatement","src":"2232:29:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2940,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2934,"id":2941,"nodeType":"Return","src":"2244:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":2943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2944,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"2289:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2945,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"2293:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2934,"id":2948,"nodeType":"Return","src":"2275:20:20"}]}]},"documentation":{"id":2924,"nodeType":"StructuredDocumentation","src":"2007:110:20","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2951,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:20","nodeType":"FunctionDefinition","parameters":{"id":2929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"a","nameLocation":"2146:1:20","nodeType":"VariableDeclaration","scope":2951,"src":"2138:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2928,"mutability":"mutable","name":"b","nameLocation":"2157:1:20","nodeType":"VariableDeclaration","scope":2951,"src":"2149:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2927,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:20"},"returnParameters":{"id":2934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2951,"src":"2183:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2930,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2933,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2951,"src":"2189:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2932,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:20"},"scope":3836,"src":"2122:190:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2968,"nodeType":"Block","src":"2449:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2961,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"2466:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2962,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"2470:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2965,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"2478:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:20","trueExpression":{"id":2964,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"2474:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2960,"id":2967,"nodeType":"Return","src":"2459:20:20"}]},"documentation":{"id":2952,"nodeType":"StructuredDocumentation","src":"2318:59:20","text":" @dev Returns the largest of two numbers."},"id":2969,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:20","nodeType":"FunctionDefinition","parameters":{"id":2957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2954,"mutability":"mutable","name":"a","nameLocation":"2403:1:20","nodeType":"VariableDeclaration","scope":2969,"src":"2395:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2953,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2956,"mutability":"mutable","name":"b","nameLocation":"2414:1:20","nodeType":"VariableDeclaration","scope":2969,"src":"2406:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2955,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:20"},"returnParameters":{"id":2960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2969,"src":"2440:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:20"},"scope":3836,"src":"2382:104:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2986,"nodeType":"Block","src":"2624:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2979,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"2641:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2980,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"2645:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2983,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"2653:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:20","trueExpression":{"id":2982,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"2649:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2978,"id":2985,"nodeType":"Return","src":"2634:20:20"}]},"documentation":{"id":2970,"nodeType":"StructuredDocumentation","src":"2492:60:20","text":" @dev Returns the smallest of two numbers."},"id":2987,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:20","nodeType":"FunctionDefinition","parameters":{"id":2975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2972,"mutability":"mutable","name":"a","nameLocation":"2578:1:20","nodeType":"VariableDeclaration","scope":2987,"src":"2570:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2971,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"b","nameLocation":"2589:1:20","nodeType":"VariableDeclaration","scope":2987,"src":"2581:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2973,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:20"},"returnParameters":{"id":2978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2987,"src":"2615:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:20"},"scope":3836,"src":"2557:104:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3009,"nodeType":"Block","src":"2845:82:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"2900:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2998,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"2904:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3000,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3001,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"2910:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3002,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"2914:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2996,"id":3008,"nodeType":"Return","src":"2892:28:20"}]},"documentation":{"id":2988,"nodeType":"StructuredDocumentation","src":"2667:102:20","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3010,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:20","nodeType":"FunctionDefinition","parameters":{"id":2993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"a","nameLocation":"2799:1:20","nodeType":"VariableDeclaration","scope":3010,"src":"2791:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2989,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2992,"mutability":"mutable","name":"b","nameLocation":"2810:1:20","nodeType":"VariableDeclaration","scope":3010,"src":"2802:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2991,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:20"},"returnParameters":{"id":2996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3010,"src":"2836:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2994,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:20"},"scope":3836,"src":"2774:153:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3043,"nodeType":"Block","src":"3219:260:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3020,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"3233:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3028,"nodeType":"IfStatement","src":"3229:127:20","trueBody":{"id":3027,"nodeType":"Block","src":"3241:115:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3023,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"3340:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3024,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"3344:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3019,"id":3026,"nodeType":"Return","src":"3333:12:20"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3029,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"3444:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3033,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"3458:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3036,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3037,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"3467:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:20","trueExpression":{"hexValue":"30","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3019,"id":3042,"nodeType":"Return","src":"3437:35:20"}]},"documentation":{"id":3011,"nodeType":"StructuredDocumentation","src":"2933:210:20","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3044,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:20","nodeType":"FunctionDefinition","parameters":{"id":3016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3013,"mutability":"mutable","name":"a","nameLocation":"3173:1:20","nodeType":"VariableDeclaration","scope":3044,"src":"3165:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3012,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3015,"mutability":"mutable","name":"b","nameLocation":"3184:1:20","nodeType":"VariableDeclaration","scope":3044,"src":"3176:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3014,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:20"},"returnParameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3044,"src":"3210:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3017,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:20"},"scope":3836,"src":"3148:331:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3169,"nodeType":"Block","src":"3901:4018:20","statements":[{"id":3168,"nodeType":"UncheckedBlock","src":"3911:4002:20","statements":[{"assignments":[3057],"declarations":[{"constant":false,"id":3057,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:20","nodeType":"VariableDeclaration","scope":3168,"src":"4232:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3056,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3061,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3058,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"4248:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3059,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"4252:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:20"},{"assignments":[3063],"declarations":[{"constant":false,"id":3063,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:20","nodeType":"VariableDeclaration","scope":3168,"src":"4312:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3062,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3064,"nodeType":"VariableDeclarationStatement","src":"4312:13:20"},{"AST":{"nativeSrc":"4392:122:20","nodeType":"YulBlock","src":"4392:122:20","statements":[{"nativeSrc":"4410:30:20","nodeType":"YulVariableDeclaration","src":"4410:30:20","value":{"arguments":[{"name":"x","nativeSrc":"4427:1:20","nodeType":"YulIdentifier","src":"4427:1:20"},{"name":"y","nativeSrc":"4430:1:20","nodeType":"YulIdentifier","src":"4430:1:20"},{"arguments":[{"kind":"number","nativeSrc":"4437:1:20","nodeType":"YulLiteral","src":"4437:1:20","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4433:3:20","nodeType":"YulIdentifier","src":"4433:3:20"},"nativeSrc":"4433:6:20","nodeType":"YulFunctionCall","src":"4433:6:20"}],"functionName":{"name":"mulmod","nativeSrc":"4420:6:20","nodeType":"YulIdentifier","src":"4420:6:20"},"nativeSrc":"4420:20:20","nodeType":"YulFunctionCall","src":"4420:20:20"},"variables":[{"name":"mm","nativeSrc":"4414:2:20","nodeType":"YulTypedName","src":"4414:2:20","type":""}]},{"nativeSrc":"4457:43:20","nodeType":"YulAssignment","src":"4457:43:20","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"4474:2:20","nodeType":"YulIdentifier","src":"4474:2:20"},{"name":"prod0","nativeSrc":"4478:5:20","nodeType":"YulIdentifier","src":"4478:5:20"}],"functionName":{"name":"sub","nativeSrc":"4470:3:20","nodeType":"YulIdentifier","src":"4470:3:20"},"nativeSrc":"4470:14:20","nodeType":"YulFunctionCall","src":"4470:14:20"},{"arguments":[{"name":"mm","nativeSrc":"4489:2:20","nodeType":"YulIdentifier","src":"4489:2:20"},{"name":"prod0","nativeSrc":"4493:5:20","nodeType":"YulIdentifier","src":"4493:5:20"}],"functionName":{"name":"lt","nativeSrc":"4486:2:20","nodeType":"YulIdentifier","src":"4486:2:20"},"nativeSrc":"4486:13:20","nodeType":"YulFunctionCall","src":"4486:13:20"}],"functionName":{"name":"sub","nativeSrc":"4466:3:20","nodeType":"YulIdentifier","src":"4466:3:20"},"nativeSrc":"4466:34:20","nodeType":"YulFunctionCall","src":"4466:34:20"},"variableNames":[{"name":"prod1","nativeSrc":"4457:5:20","nodeType":"YulIdentifier","src":"4457:5:20"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3057,"isOffset":false,"isSlot":false,"src":"4478:5:20","valueSize":1},{"declaration":3057,"isOffset":false,"isSlot":false,"src":"4493:5:20","valueSize":1},{"declaration":3063,"isOffset":false,"isSlot":false,"src":"4457:5:20","valueSize":1},{"declaration":3047,"isOffset":false,"isSlot":false,"src":"4427:1:20","valueSize":1},{"declaration":3049,"isOffset":false,"isSlot":false,"src":"4430:1:20","valueSize":1}],"id":3065,"nodeType":"InlineAssembly","src":"4383:131:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3066,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4595:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3074,"nodeType":"IfStatement","src":"4591:368:20","trueBody":{"id":3073,"nodeType":"Block","src":"4607:352:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3069,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"4925:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3070,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"4933:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3055,"id":3072,"nodeType":"Return","src":"4918:26:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3075,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"5065:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3076,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"5080:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3082,"nodeType":"IfStatement","src":"5061:88:20","trueBody":{"id":3081,"nodeType":"Block","src":"5087:62:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3078,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"5112:20:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3080,"nodeType":"RevertStatement","src":"5105:29:20"}]}},{"assignments":[3084],"declarations":[{"constant":false,"id":3084,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:20","nodeType":"VariableDeclaration","scope":3168,"src":"5404:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3085,"nodeType":"VariableDeclarationStatement","src":"5404:17:20"},{"AST":{"nativeSrc":"5444:291:20","nodeType":"YulBlock","src":"5444:291:20","statements":[{"nativeSrc":"5513:38:20","nodeType":"YulAssignment","src":"5513:38:20","value":{"arguments":[{"name":"x","nativeSrc":"5533:1:20","nodeType":"YulIdentifier","src":"5533:1:20"},{"name":"y","nativeSrc":"5536:1:20","nodeType":"YulIdentifier","src":"5536:1:20"},{"name":"denominator","nativeSrc":"5539:11:20","nodeType":"YulIdentifier","src":"5539:11:20"}],"functionName":{"name":"mulmod","nativeSrc":"5526:6:20","nodeType":"YulIdentifier","src":"5526:6:20"},"nativeSrc":"5526:25:20","nodeType":"YulFunctionCall","src":"5526:25:20"},"variableNames":[{"name":"remainder","nativeSrc":"5513:9:20","nodeType":"YulIdentifier","src":"5513:9:20"}]},{"nativeSrc":"5633:41:20","nodeType":"YulAssignment","src":"5633:41:20","value":{"arguments":[{"name":"prod1","nativeSrc":"5646:5:20","nodeType":"YulIdentifier","src":"5646:5:20"},{"arguments":[{"name":"remainder","nativeSrc":"5656:9:20","nodeType":"YulIdentifier","src":"5656:9:20"},{"name":"prod0","nativeSrc":"5667:5:20","nodeType":"YulIdentifier","src":"5667:5:20"}],"functionName":{"name":"gt","nativeSrc":"5653:2:20","nodeType":"YulIdentifier","src":"5653:2:20"},"nativeSrc":"5653:20:20","nodeType":"YulFunctionCall","src":"5653:20:20"}],"functionName":{"name":"sub","nativeSrc":"5642:3:20","nodeType":"YulIdentifier","src":"5642:3:20"},"nativeSrc":"5642:32:20","nodeType":"YulFunctionCall","src":"5642:32:20"},"variableNames":[{"name":"prod1","nativeSrc":"5633:5:20","nodeType":"YulIdentifier","src":"5633:5:20"}]},{"nativeSrc":"5691:30:20","nodeType":"YulAssignment","src":"5691:30:20","value":{"arguments":[{"name":"prod0","nativeSrc":"5704:5:20","nodeType":"YulIdentifier","src":"5704:5:20"},{"name":"remainder","nativeSrc":"5711:9:20","nodeType":"YulIdentifier","src":"5711:9:20"}],"functionName":{"name":"sub","nativeSrc":"5700:3:20","nodeType":"YulIdentifier","src":"5700:3:20"},"nativeSrc":"5700:21:20","nodeType":"YulFunctionCall","src":"5700:21:20"},"variableNames":[{"name":"prod0","nativeSrc":"5691:5:20","nodeType":"YulIdentifier","src":"5691:5:20"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3051,"isOffset":false,"isSlot":false,"src":"5539:11:20","valueSize":1},{"declaration":3057,"isOffset":false,"isSlot":false,"src":"5667:5:20","valueSize":1},{"declaration":3057,"isOffset":false,"isSlot":false,"src":"5691:5:20","valueSize":1},{"declaration":3057,"isOffset":false,"isSlot":false,"src":"5704:5:20","valueSize":1},{"declaration":3063,"isOffset":false,"isSlot":false,"src":"5633:5:20","valueSize":1},{"declaration":3063,"isOffset":false,"isSlot":false,"src":"5646:5:20","valueSize":1},{"declaration":3084,"isOffset":false,"isSlot":false,"src":"5513:9:20","valueSize":1},{"declaration":3084,"isOffset":false,"isSlot":false,"src":"5656:9:20","valueSize":1},{"declaration":3084,"isOffset":false,"isSlot":false,"src":"5711:9:20","valueSize":1},{"declaration":3047,"isOffset":false,"isSlot":false,"src":"5533:1:20","valueSize":1},{"declaration":3049,"isOffset":false,"isSlot":false,"src":"5536:1:20","valueSize":1}],"id":3086,"nodeType":"InlineAssembly","src":"5435:300:20"},{"assignments":[3088],"declarations":[{"constant":false,"id":3088,"mutability":"mutable","name":"twos","nameLocation":"5947:4:20","nodeType":"VariableDeclaration","scope":3168,"src":"5939:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3087,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3095,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3089,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"5954:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3091,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"5973:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3093,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:20"},{"AST":{"nativeSrc":"6008:362:20","nodeType":"YulBlock","src":"6008:362:20","statements":[{"nativeSrc":"6073:37:20","nodeType":"YulAssignment","src":"6073:37:20","value":{"arguments":[{"name":"denominator","nativeSrc":"6092:11:20","nodeType":"YulIdentifier","src":"6092:11:20"},{"name":"twos","nativeSrc":"6105:4:20","nodeType":"YulIdentifier","src":"6105:4:20"}],"functionName":{"name":"div","nativeSrc":"6088:3:20","nodeType":"YulIdentifier","src":"6088:3:20"},"nativeSrc":"6088:22:20","nodeType":"YulFunctionCall","src":"6088:22:20"},"variableNames":[{"name":"denominator","nativeSrc":"6073:11:20","nodeType":"YulIdentifier","src":"6073:11:20"}]},{"nativeSrc":"6177:25:20","nodeType":"YulAssignment","src":"6177:25:20","value":{"arguments":[{"name":"prod0","nativeSrc":"6190:5:20","nodeType":"YulIdentifier","src":"6190:5:20"},{"name":"twos","nativeSrc":"6197:4:20","nodeType":"YulIdentifier","src":"6197:4:20"}],"functionName":{"name":"div","nativeSrc":"6186:3:20","nodeType":"YulIdentifier","src":"6186:3:20"},"nativeSrc":"6186:16:20","nodeType":"YulFunctionCall","src":"6186:16:20"},"variableNames":[{"name":"prod0","nativeSrc":"6177:5:20","nodeType":"YulIdentifier","src":"6177:5:20"}]},{"nativeSrc":"6317:39:20","nodeType":"YulAssignment","src":"6317:39:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6337:1:20","nodeType":"YulLiteral","src":"6337:1:20","type":"","value":"0"},{"name":"twos","nativeSrc":"6340:4:20","nodeType":"YulIdentifier","src":"6340:4:20"}],"functionName":{"name":"sub","nativeSrc":"6333:3:20","nodeType":"YulIdentifier","src":"6333:3:20"},"nativeSrc":"6333:12:20","nodeType":"YulFunctionCall","src":"6333:12:20"},{"name":"twos","nativeSrc":"6347:4:20","nodeType":"YulIdentifier","src":"6347:4:20"}],"functionName":{"name":"div","nativeSrc":"6329:3:20","nodeType":"YulIdentifier","src":"6329:3:20"},"nativeSrc":"6329:23:20","nodeType":"YulFunctionCall","src":"6329:23:20"},{"kind":"number","nativeSrc":"6354:1:20","nodeType":"YulLiteral","src":"6354:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6325:3:20","nodeType":"YulIdentifier","src":"6325:3:20"},"nativeSrc":"6325:31:20","nodeType":"YulFunctionCall","src":"6325:31:20"},"variableNames":[{"name":"twos","nativeSrc":"6317:4:20","nodeType":"YulIdentifier","src":"6317:4:20"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3051,"isOffset":false,"isSlot":false,"src":"6073:11:20","valueSize":1},{"declaration":3051,"isOffset":false,"isSlot":false,"src":"6092:11:20","valueSize":1},{"declaration":3057,"isOffset":false,"isSlot":false,"src":"6177:5:20","valueSize":1},{"declaration":3057,"isOffset":false,"isSlot":false,"src":"6190:5:20","valueSize":1},{"declaration":3088,"isOffset":false,"isSlot":false,"src":"6105:4:20","valueSize":1},{"declaration":3088,"isOffset":false,"isSlot":false,"src":"6197:4:20","valueSize":1},{"declaration":3088,"isOffset":false,"isSlot":false,"src":"6317:4:20","valueSize":1},{"declaration":3088,"isOffset":false,"isSlot":false,"src":"6340:4:20","valueSize":1},{"declaration":3088,"isOffset":false,"isSlot":false,"src":"6347:4:20","valueSize":1}],"id":3096,"nodeType":"InlineAssembly","src":"5999:371:20"},{"expression":{"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3097,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"6436:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3098,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"6445:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3099,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"6453:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3102,"nodeType":"ExpressionStatement","src":"6436:21:20"},{"assignments":[3104],"declarations":[{"constant":false,"id":3104,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:20","nodeType":"VariableDeclaration","scope":3168,"src":"6775:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3103,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3111,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3106,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"6798:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3108,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:20"},{"expression":{"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3112,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7031:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3114,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"7046:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3115,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7060:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3119,"nodeType":"ExpressionStatement","src":"7031:36:20"},{"expression":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3120,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7100:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3122,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"7115:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3123,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7129:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3127,"nodeType":"ExpressionStatement","src":"7100:36:20"},{"expression":{"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3128,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7170:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3130,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"7185:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3131,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7199:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3135,"nodeType":"ExpressionStatement","src":"7170:36:20"},{"expression":{"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3136,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7240:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3138,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"7255:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3139,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7269:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3143,"nodeType":"ExpressionStatement","src":"7240:36:20"},{"expression":{"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3144,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7310:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3146,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"7325:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3147,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7339:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3151,"nodeType":"ExpressionStatement","src":"7310:36:20"},{"expression":{"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3152,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7381:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3154,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"7396:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3155,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7410:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3159,"nodeType":"ExpressionStatement","src":"7381:36:20"},{"expression":{"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3160,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"7851:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3161,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"7860:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3162,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"7868:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3165,"nodeType":"ExpressionStatement","src":"7851:24:20"},{"expression":{"id":3166,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"7896:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3055,"id":3167,"nodeType":"Return","src":"7889:13:20"}]}]},"documentation":{"id":3045,"nodeType":"StructuredDocumentation","src":"3485:313:20","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3170,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:20","nodeType":"FunctionDefinition","parameters":{"id":3052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"x","nameLocation":"3827:1:20","nodeType":"VariableDeclaration","scope":3170,"src":"3819:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3046,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3049,"mutability":"mutable","name":"y","nameLocation":"3838:1:20","nodeType":"VariableDeclaration","scope":3170,"src":"3830:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3051,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:20","nodeType":"VariableDeclaration","scope":3170,"src":"3841:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3050,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:20"},"returnParameters":{"id":3055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3054,"mutability":"mutable","name":"result","nameLocation":"3893:6:20","nodeType":"VariableDeclaration","scope":3170,"src":"3885:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3053,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:20"},"scope":3836,"src":"3803:4116:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3212,"nodeType":"Block","src":"8161:192:20","statements":[{"assignments":[3186],"declarations":[{"constant":false,"id":3186,"mutability":"mutable","name":"result","nameLocation":"8179:6:20","nodeType":"VariableDeclaration","scope":3212,"src":"8171:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3185,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3192,"initialValue":{"arguments":[{"id":3188,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"8195:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3189,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"8198:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3190,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"8201:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3187,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3170,3213],"referencedDeclaration":3170,"src":"8188:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:20"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3194,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"8244:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}],"id":3193,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"8227:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2793_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3197,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"8264:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3198,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"8267:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3199,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"8270:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3196,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:20","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3209,"nodeType":"IfStatement","src":"8223:101:20","trueBody":{"id":3208,"nodeType":"Block","src":"8288:36:20","statements":[{"expression":{"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"8302:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3207,"nodeType":"ExpressionStatement","src":"8302:11:20"}]}},{"expression":{"id":3210,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"8340:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3184,"id":3211,"nodeType":"Return","src":"8333:13:20"}]},"documentation":{"id":3171,"nodeType":"StructuredDocumentation","src":"7925:121:20","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3213,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:20","nodeType":"FunctionDefinition","parameters":{"id":3181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3173,"mutability":"mutable","name":"x","nameLocation":"8075:1:20","nodeType":"VariableDeclaration","scope":3213,"src":"8067:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3172,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3175,"mutability":"mutable","name":"y","nameLocation":"8086:1:20","nodeType":"VariableDeclaration","scope":3213,"src":"8078:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3174,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3177,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:20","nodeType":"VariableDeclaration","scope":3213,"src":"8089:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3176,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3180,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:20","nodeType":"VariableDeclaration","scope":3213,"src":"8110:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"},"typeName":{"id":3179,"nodeType":"UserDefinedTypeName","pathNode":{"id":3178,"name":"Rounding","nameLocations":["8110:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":2793,"src":"8110:8:20"},"referencedDeclaration":2793,"src":"8110:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:20"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3213,"src":"8152:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3182,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:20"},"scope":3836,"src":"8051:302:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3324,"nodeType":"Block","src":"8644:1585:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3221,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"8658:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3227,"nodeType":"IfStatement","src":"8654:45:20","trueBody":{"id":3226,"nodeType":"Block","src":"8666:33:20","statements":[{"expression":{"hexValue":"30","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3220,"id":3225,"nodeType":"Return","src":"8680:8:20"}]}},{"assignments":[3229],"declarations":[{"constant":false,"id":3229,"mutability":"mutable","name":"result","nameLocation":"9386:6:20","nodeType":"VariableDeclaration","scope":3324,"src":"9378:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3228,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3238,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3232,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"9406:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3231,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3492,3527],"referencedDeclaration":3492,"src":"9401:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:20"},{"id":3323,"nodeType":"UncheckedBlock","src":"9815:408:20","statements":[{"expression":{"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3239,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9839:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3240,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9849:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3241,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"9858:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3242,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9862:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3245,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3249,"nodeType":"ExpressionStatement","src":"9839:35:20"},{"expression":{"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3250,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9888:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3251,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9898:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3252,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"9907:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3253,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9911:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3256,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3260,"nodeType":"ExpressionStatement","src":"9888:35:20"},{"expression":{"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3261,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9937:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3262,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9947:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3263,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"9956:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3264,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9960:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3267,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3271,"nodeType":"ExpressionStatement","src":"9937:35:20"},{"expression":{"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9986:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3273,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"9996:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3274,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"10005:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3275,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10009:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3278,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3282,"nodeType":"ExpressionStatement","src":"9986:35:20"},{"expression":{"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10035:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3284,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10045:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3285,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"10054:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10058:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3289,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3293,"nodeType":"ExpressionStatement","src":"10035:35:20"},{"expression":{"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3294,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10084:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3295,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10094:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3296,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"10103:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10107:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3300,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3304,"nodeType":"ExpressionStatement","src":"10084:35:20"},{"expression":{"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3305,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10133:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10143:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3307,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"10152:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10156:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3311,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3315,"nodeType":"ExpressionStatement","src":"10133:35:20"},{"expression":{"arguments":[{"id":3317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10193:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3318,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"10201:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3319,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"10205:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3316,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"10189:3:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3220,"id":3322,"nodeType":"Return","src":"10182:30:20"}]}]},"documentation":{"id":3214,"nodeType":"StructuredDocumentation","src":"8359:223:20","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3325,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:20","nodeType":"FunctionDefinition","parameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"a","nameLocation":"8609:1:20","nodeType":"VariableDeclaration","scope":3325,"src":"8601:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3215,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:20"},"returnParameters":{"id":3220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3325,"src":"8635:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3218,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:20"},"scope":3836,"src":"8587:1642:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3359,"nodeType":"Block","src":"10405:164:20","statements":[{"id":3358,"nodeType":"UncheckedBlock","src":"10415:148:20","statements":[{"assignments":[3337],"declarations":[{"constant":false,"id":3337,"mutability":"mutable","name":"result","nameLocation":"10447:6:20","nodeType":"VariableDeclaration","scope":3358,"src":"10439:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3341,"initialValue":{"arguments":[{"id":3339,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"10461:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3338,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3325,3360],"referencedDeclaration":3325,"src":"10456:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3342,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"10484:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3344,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"10511:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}],"id":3343,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"10494:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2793_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"10524:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3347,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"10533:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3349,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"10542:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:20","trueExpression":{"hexValue":"31","id":3352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3355,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3335,"id":3357,"nodeType":"Return","src":"10477:75:20"}]}]},"documentation":{"id":3326,"nodeType":"StructuredDocumentation","src":"10235:89:20","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3360,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:20","nodeType":"FunctionDefinition","parameters":{"id":3332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3328,"mutability":"mutable","name":"a","nameLocation":"10351:1:20","nodeType":"VariableDeclaration","scope":3360,"src":"10343:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3327,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3331,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:20","nodeType":"VariableDeclaration","scope":3360,"src":"10354:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"},"typeName":{"id":3330,"nodeType":"UserDefinedTypeName","pathNode":{"id":3329,"name":"Rounding","nameLocations":["10354:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":2793,"src":"10354:8:20"},"referencedDeclaration":2793,"src":"10354:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:20"},"returnParameters":{"id":3335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3360,"src":"10396:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3333,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:20"},"scope":3836,"src":"10329:240:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3491,"nodeType":"Block","src":"10760:922:20","statements":[{"assignments":[3369],"declarations":[{"constant":false,"id":3369,"mutability":"mutable","name":"result","nameLocation":"10778:6:20","nodeType":"VariableDeclaration","scope":3491,"src":"10770:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3371,"initialValue":{"hexValue":"30","id":3370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:20"},{"id":3488,"nodeType":"UncheckedBlock","src":"10798:855:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3372,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"10826:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3386,"nodeType":"IfStatement","src":"10822:99:20","trueBody":{"id":3385,"nodeType":"Block","src":"10844:77:20","statements":[{"expression":{"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"10862:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3380,"nodeType":"ExpressionStatement","src":"10862:13:20"},{"expression":{"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"10893:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3384,"nodeType":"ExpressionStatement","src":"10893:13:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"10938:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3401,"nodeType":"IfStatement","src":"10934:96:20","trueBody":{"id":3400,"nodeType":"Block","src":"10955:75:20","statements":[{"expression":{"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3392,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"10973:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3395,"nodeType":"ExpressionStatement","src":"10973:12:20"},{"expression":{"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3396,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11003:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3399,"nodeType":"ExpressionStatement","src":"11003:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11047:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3416,"nodeType":"IfStatement","src":"11043:96:20","trueBody":{"id":3415,"nodeType":"Block","src":"11064:75:20","statements":[{"expression":{"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11082:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3410,"nodeType":"ExpressionStatement","src":"11082:12:20"},{"expression":{"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3411,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11112:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3414,"nodeType":"ExpressionStatement","src":"11112:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11156:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3431,"nodeType":"IfStatement","src":"11152:96:20","trueBody":{"id":3430,"nodeType":"Block","src":"11173:75:20","statements":[{"expression":{"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11191:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3425,"nodeType":"ExpressionStatement","src":"11191:12:20"},{"expression":{"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3426,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11221:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3429,"nodeType":"ExpressionStatement","src":"11221:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11265:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3446,"nodeType":"IfStatement","src":"11261:93:20","trueBody":{"id":3445,"nodeType":"Block","src":"11281:73:20","statements":[{"expression":{"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11299:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3440,"nodeType":"ExpressionStatement","src":"11299:11:20"},{"expression":{"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3441,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11328:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3444,"nodeType":"ExpressionStatement","src":"11328:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11371:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3461,"nodeType":"IfStatement","src":"11367:93:20","trueBody":{"id":3460,"nodeType":"Block","src":"11387:73:20","statements":[{"expression":{"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11405:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3455,"nodeType":"ExpressionStatement","src":"11405:11:20"},{"expression":{"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3456,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11434:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3459,"nodeType":"ExpressionStatement","src":"11434:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11477:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3476,"nodeType":"IfStatement","src":"11473:93:20","trueBody":{"id":3475,"nodeType":"Block","src":"11493:73:20","statements":[{"expression":{"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11511:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3470,"nodeType":"ExpressionStatement","src":"11511:11:20"},{"expression":{"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3471,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11540:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3474,"nodeType":"ExpressionStatement","src":"11540:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3477,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11583:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3487,"nodeType":"IfStatement","src":"11579:64:20","trueBody":{"id":3486,"nodeType":"Block","src":"11599:44:20","statements":[{"expression":{"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11617:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3485,"nodeType":"ExpressionStatement","src":"11617:11:20"}]}}]},{"expression":{"id":3489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11669:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3367,"id":3490,"nodeType":"Return","src":"11662:13:20"}]},"documentation":{"id":3361,"nodeType":"StructuredDocumentation","src":"10575:119:20","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3492,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:20","nodeType":"FunctionDefinition","parameters":{"id":3364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3363,"mutability":"mutable","name":"value","nameLocation":"10721:5:20","nodeType":"VariableDeclaration","scope":3492,"src":"10713:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3362,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:20"},"returnParameters":{"id":3367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3492,"src":"10751:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3365,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:20"},"scope":3836,"src":"10699:983:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3526,"nodeType":"Block","src":"11915:168:20","statements":[{"id":3525,"nodeType":"UncheckedBlock","src":"11925:152:20","statements":[{"assignments":[3504],"declarations":[{"constant":false,"id":3504,"mutability":"mutable","name":"result","nameLocation":"11957:6:20","nodeType":"VariableDeclaration","scope":3525,"src":"11949:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3503,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3508,"initialValue":{"arguments":[{"id":3506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"11971:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3505,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3492,3527],"referencedDeclaration":3492,"src":"11966:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"11998:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3511,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"12025:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}],"id":3510,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"12008:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2793_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"12043:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"12052:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:20","trueExpression":{"hexValue":"31","id":3519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3522,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3502,"id":3524,"nodeType":"Return","src":"11991:75:20"}]}]},"documentation":{"id":3493,"nodeType":"StructuredDocumentation","src":"11688:142:20","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3527,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:20","nodeType":"FunctionDefinition","parameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3495,"mutability":"mutable","name":"value","nameLocation":"11857:5:20","nodeType":"VariableDeclaration","scope":3527,"src":"11849:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3494,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3498,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:20","nodeType":"VariableDeclaration","scope":3527,"src":"11864:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"},"typeName":{"id":3497,"nodeType":"UserDefinedTypeName","pathNode":{"id":3496,"name":"Rounding","nameLocations":["11864:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":2793,"src":"11864:8:20"},"referencedDeclaration":2793,"src":"11864:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:20"},"returnParameters":{"id":3502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3527,"src":"11906:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3500,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:20"},"scope":3836,"src":"11835:248:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3655,"nodeType":"Block","src":"12276:854:20","statements":[{"assignments":[3536],"declarations":[{"constant":false,"id":3536,"mutability":"mutable","name":"result","nameLocation":"12294:6:20","nodeType":"VariableDeclaration","scope":3655,"src":"12286:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3535,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3538,"initialValue":{"hexValue":"30","id":3537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:20"},{"id":3652,"nodeType":"UncheckedBlock","src":"12314:787:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12342:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3555,"nodeType":"IfStatement","src":"12338:103:20","trueBody":{"id":3554,"nodeType":"Block","src":"12361:80:20","statements":[{"expression":{"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12379:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3549,"nodeType":"ExpressionStatement","src":"12379:17:20"},{"expression":{"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3550,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"12414:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3553,"nodeType":"ExpressionStatement","src":"12414:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12458:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3572,"nodeType":"IfStatement","src":"12454:103:20","trueBody":{"id":3571,"nodeType":"Block","src":"12477:80:20","statements":[{"expression":{"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12495:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3566,"nodeType":"ExpressionStatement","src":"12495:17:20"},{"expression":{"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"12530:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3570,"nodeType":"ExpressionStatement","src":"12530:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12574:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3589,"nodeType":"IfStatement","src":"12570:103:20","trueBody":{"id":3588,"nodeType":"Block","src":"12593:80:20","statements":[{"expression":{"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12611:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3583,"nodeType":"ExpressionStatement","src":"12611:17:20"},{"expression":{"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3584,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"12646:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3587,"nodeType":"ExpressionStatement","src":"12646:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3590,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12690:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3606,"nodeType":"IfStatement","src":"12686:100:20","trueBody":{"id":3605,"nodeType":"Block","src":"12708:78:20","statements":[{"expression":{"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12726:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3600,"nodeType":"ExpressionStatement","src":"12726:16:20"},{"expression":{"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"12760:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3604,"nodeType":"ExpressionStatement","src":"12760:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12803:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3623,"nodeType":"IfStatement","src":"12799:100:20","trueBody":{"id":3622,"nodeType":"Block","src":"12821:78:20","statements":[{"expression":{"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12839:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3617,"nodeType":"ExpressionStatement","src":"12839:16:20"},{"expression":{"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3618,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"12873:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3621,"nodeType":"ExpressionStatement","src":"12873:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12916:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3640,"nodeType":"IfStatement","src":"12912:100:20","trueBody":{"id":3639,"nodeType":"Block","src":"12934:78:20","statements":[{"expression":{"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3629,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12952:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3634,"nodeType":"ExpressionStatement","src":"12952:16:20"},{"expression":{"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"12986:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3638,"nodeType":"ExpressionStatement","src":"12986:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"13029:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3651,"nodeType":"IfStatement","src":"13025:66:20","trueBody":{"id":3650,"nodeType":"Block","src":"13047:44:20","statements":[{"expression":{"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"13065:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3649,"nodeType":"ExpressionStatement","src":"13065:11:20"}]}}]},{"expression":{"id":3653,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"13117:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3534,"id":3654,"nodeType":"Return","src":"13110:13:20"}]},"documentation":{"id":3528,"nodeType":"StructuredDocumentation","src":"12089:120:20","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3656,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:20","nodeType":"FunctionDefinition","parameters":{"id":3531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3530,"mutability":"mutable","name":"value","nameLocation":"12237:5:20","nodeType":"VariableDeclaration","scope":3656,"src":"12229:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3529,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:20"},"returnParameters":{"id":3534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3656,"src":"12267:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3532,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:20"},"scope":3836,"src":"12214:916:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3690,"nodeType":"Block","src":"13365:170:20","statements":[{"id":3689,"nodeType":"UncheckedBlock","src":"13375:154:20","statements":[{"assignments":[3668],"declarations":[{"constant":false,"id":3668,"mutability":"mutable","name":"result","nameLocation":"13407:6:20","nodeType":"VariableDeclaration","scope":3689,"src":"13399:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3667,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3672,"initialValue":{"arguments":[{"id":3670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"13422:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3669,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3656,3691],"referencedDeclaration":3656,"src":"13416:5:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"13449:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3675,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"13476:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}],"id":3674,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"13459:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2793_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"13495:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"13504:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:20","trueExpression":{"hexValue":"31","id":3683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3686,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3666,"id":3688,"nodeType":"Return","src":"13442:76:20"}]}]},"documentation":{"id":3657,"nodeType":"StructuredDocumentation","src":"13136:143:20","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3691,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:20","nodeType":"FunctionDefinition","parameters":{"id":3663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3659,"mutability":"mutable","name":"value","nameLocation":"13307:5:20","nodeType":"VariableDeclaration","scope":3691,"src":"13299:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3658,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3662,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:20","nodeType":"VariableDeclaration","scope":3691,"src":"13314:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"},"typeName":{"id":3661,"nodeType":"UserDefinedTypeName","pathNode":{"id":3660,"name":"Rounding","nameLocations":["13314:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":2793,"src":"13314:8:20"},"referencedDeclaration":2793,"src":"13314:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:20"},"returnParameters":{"id":3666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3691,"src":"13356:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3664,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:20"},"scope":3836,"src":"13284:251:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3777,"nodeType":"Block","src":"13855:600:20","statements":[{"assignments":[3700],"declarations":[{"constant":false,"id":3700,"mutability":"mutable","name":"result","nameLocation":"13873:6:20","nodeType":"VariableDeclaration","scope":3777,"src":"13865:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3699,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3702,"initialValue":{"hexValue":"30","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:20"},{"id":3774,"nodeType":"UncheckedBlock","src":"13893:533:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"13921:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3717,"nodeType":"IfStatement","src":"13917:98:20","trueBody":{"id":3716,"nodeType":"Block","src":"13939:76:20","statements":[{"expression":{"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"13957:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3711,"nodeType":"ExpressionStatement","src":"13957:13:20"},{"expression":{"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3712,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"13988:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3715,"nodeType":"ExpressionStatement","src":"13988:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"14032:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3732,"nodeType":"IfStatement","src":"14028:95:20","trueBody":{"id":3731,"nodeType":"Block","src":"14049:74:20","statements":[{"expression":{"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"14067:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3726,"nodeType":"ExpressionStatement","src":"14067:12:20"},{"expression":{"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3727,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"14097:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3730,"nodeType":"ExpressionStatement","src":"14097:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"14140:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3747,"nodeType":"IfStatement","src":"14136:95:20","trueBody":{"id":3746,"nodeType":"Block","src":"14157:74:20","statements":[{"expression":{"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"14175:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3741,"nodeType":"ExpressionStatement","src":"14175:12:20"},{"expression":{"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3742,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"14205:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3745,"nodeType":"ExpressionStatement","src":"14205:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"14248:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3762,"nodeType":"IfStatement","src":"14244:95:20","trueBody":{"id":3761,"nodeType":"Block","src":"14265:74:20","statements":[{"expression":{"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"14283:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3756,"nodeType":"ExpressionStatement","src":"14283:12:20"},{"expression":{"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3757,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"14313:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3760,"nodeType":"ExpressionStatement","src":"14313:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3763,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"14356:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3773,"nodeType":"IfStatement","src":"14352:64:20","trueBody":{"id":3772,"nodeType":"Block","src":"14372:44:20","statements":[{"expression":{"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3768,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"14390:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3771,"nodeType":"ExpressionStatement","src":"14390:11:20"}]}}]},{"expression":{"id":3775,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"14442:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3698,"id":3776,"nodeType":"Return","src":"14435:13:20"}]},"documentation":{"id":3692,"nodeType":"StructuredDocumentation","src":"13541:246:20","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3778,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:20","nodeType":"FunctionDefinition","parameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"value","nameLocation":"13816:5:20","nodeType":"VariableDeclaration","scope":3778,"src":"13808:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:20"},"returnParameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3778,"src":"13846:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:20"},"scope":3836,"src":"13792:663:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3815,"nodeType":"Block","src":"14692:177:20","statements":[{"id":3814,"nodeType":"UncheckedBlock","src":"14702:161:20","statements":[{"assignments":[3790],"declarations":[{"constant":false,"id":3790,"mutability":"mutable","name":"result","nameLocation":"14734:6:20","nodeType":"VariableDeclaration","scope":3814,"src":"14726:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3789,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3794,"initialValue":{"arguments":[{"id":3792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"14750:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3791,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3778,3816],"referencedDeclaration":3778,"src":"14743:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"14777:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3797,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"14804:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}],"id":3796,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"14787:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2793_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3800,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"14823:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3803,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"14838:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:20","trueExpression":{"hexValue":"31","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3811,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3788,"id":3813,"nodeType":"Return","src":"14770:82:20"}]}]},"documentation":{"id":3779,"nodeType":"StructuredDocumentation","src":"14461:144:20","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3816,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:20","nodeType":"FunctionDefinition","parameters":{"id":3785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3781,"mutability":"mutable","name":"value","nameLocation":"14634:5:20","nodeType":"VariableDeclaration","scope":3816,"src":"14626:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3780,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3784,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:20","nodeType":"VariableDeclaration","scope":3816,"src":"14641:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"},"typeName":{"id":3783,"nodeType":"UserDefinedTypeName","pathNode":{"id":3782,"name":"Rounding","nameLocations":["14641:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":2793,"src":"14641:8:20"},"referencedDeclaration":2793,"src":"14641:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:20"},"returnParameters":{"id":3788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3816,"src":"14683:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3786,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:20"},"scope":3836,"src":"14610:259:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3834,"nodeType":"Block","src":"15067:48:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3827,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"15090:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}],"id":3826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3825,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:20","typeDescriptions":{}}},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3824,"id":3833,"nodeType":"Return","src":"15077:31:20"}]},"documentation":{"id":3817,"nodeType":"StructuredDocumentation","src":"14875:113:20","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3835,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:20","nodeType":"FunctionDefinition","parameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3820,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:20","nodeType":"VariableDeclaration","scope":3835,"src":"15019:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"},"typeName":{"id":3819,"nodeType":"UserDefinedTypeName","pathNode":{"id":3818,"name":"Rounding","nameLocations":["15019:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":2793,"src":"15019:8:20"},"referencedDeclaration":2793,"src":"15019:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2793","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:20"},"returnParameters":{"id":3824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3835,"src":"15061:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3822,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:20"},"scope":3836,"src":"14993:122:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3837,"src":"203:14914:20","usedErrors":[2788],"usedEvents":[]}],"src":"103:15015:20"},"id":20},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3941]},"id":3942,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3838,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3839,"nodeType":"StructuredDocumentation","src":"135:80:21","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3941,"linearizedBaseContracts":[3941],"name":"SignedMath","nameLocation":"224:10:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":3856,"nodeType":"Block","src":"376:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3849,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"393:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3850,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3844,"src":"397:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3853,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3844,"src":"405:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:21","trueExpression":{"id":3852,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"401:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3848,"id":3855,"nodeType":"Return","src":"386:20:21"}]},"documentation":{"id":3840,"nodeType":"StructuredDocumentation","src":"241:66:21","text":" @dev Returns the largest of two signed numbers."},"id":3857,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:21","nodeType":"FunctionDefinition","parameters":{"id":3845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3842,"mutability":"mutable","name":"a","nameLocation":"332:1:21","nodeType":"VariableDeclaration","scope":3857,"src":"325:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3841,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3844,"mutability":"mutable","name":"b","nameLocation":"342:1:21","nodeType":"VariableDeclaration","scope":3857,"src":"335:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3843,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:21"},"returnParameters":{"id":3848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3857,"src":"368:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3846,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:21"},"scope":3941,"src":"312:101:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3874,"nodeType":"Block","src":"555:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3867,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"572:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3868,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3862,"src":"576:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3871,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3862,"src":"584:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:21","trueExpression":{"id":3870,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"580:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3866,"id":3873,"nodeType":"Return","src":"565:20:21"}]},"documentation":{"id":3858,"nodeType":"StructuredDocumentation","src":"419:67:21","text":" @dev Returns the smallest of two signed numbers."},"id":3875,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:21","nodeType":"FunctionDefinition","parameters":{"id":3863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3860,"mutability":"mutable","name":"a","nameLocation":"511:1:21","nodeType":"VariableDeclaration","scope":3875,"src":"504:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3859,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3862,"mutability":"mutable","name":"b","nameLocation":"521:1:21","nodeType":"VariableDeclaration","scope":3875,"src":"514:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3861,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:21"},"returnParameters":{"id":3866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3875,"src":"547:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3864,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:21"},"scope":3941,"src":"491:101:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3918,"nodeType":"Block","src":"797:162:21","statements":[{"assignments":[3886],"declarations":[{"constant":false,"id":3886,"mutability":"mutable","name":"x","nameLocation":"866:1:21","nodeType":"VariableDeclaration","scope":3918,"src":"859:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3885,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3899,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3887,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"871:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3888,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"875:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3890,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3891,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"882:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3892,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"886:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3894,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3897,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:21"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3900,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"911:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3905,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"931:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3903,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:21","typeDescriptions":{}}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:21","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3901,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:21","typeDescriptions":{}}},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3910,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"945:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3911,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"949:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3913,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3915,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3884,"id":3917,"nodeType":"Return","src":"904:48:21"}]},"documentation":{"id":3876,"nodeType":"StructuredDocumentation","src":"598:126:21","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3919,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:21","nodeType":"FunctionDefinition","parameters":{"id":3881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3878,"mutability":"mutable","name":"a","nameLocation":"753:1:21","nodeType":"VariableDeclaration","scope":3919,"src":"746:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3877,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3880,"mutability":"mutable","name":"b","nameLocation":"763:1:21","nodeType":"VariableDeclaration","scope":3919,"src":"756:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3879,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:21"},"returnParameters":{"id":3884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3919,"src":"789:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3882,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:21"},"scope":3941,"src":"729:230:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3939,"nodeType":"Block","src":"1103:158:21","statements":[{"id":3938,"nodeType":"UncheckedBlock","src":"1113:142:21","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3929,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"1228:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:21","subExpression":{"id":3933,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"1242:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:21","trueExpression":{"id":3932,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"1237:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3927,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:21","typeDescriptions":{}}},"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3926,"id":3937,"nodeType":"Return","src":"1213:31:21"}]}]},"documentation":{"id":3920,"nodeType":"StructuredDocumentation","src":"965:78:21","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3940,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:21","nodeType":"FunctionDefinition","parameters":{"id":3923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3922,"mutability":"mutable","name":"n","nameLocation":"1068:1:21","nodeType":"VariableDeclaration","scope":3940,"src":"1061:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3921,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:21"},"returnParameters":{"id":3926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3940,"src":"1094:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3924,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:21"},"scope":3941,"src":"1048:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3942,"src":"216:1047:21","usedErrors":[],"usedEvents":[]}],"src":"109:1155:21"},"id":21},"contracts/bitcoin/Bitcoin.sol":{"ast":{"absolutePath":"contracts/bitcoin/Bitcoin.sol","exportedSymbols":{"BaseAccess":[5283],"Bitcoin":[4027],"IBitcoin":[4986]},"id":4028,"license":"Business Source License 1.1","nodeType":"SourceUnit","nodes":[{"id":3943,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"56:24:22"},{"absolutePath":"contracts/library/utils/BaseAccess.sol","file":"../library/utils/BaseAccess.sol","id":3945,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4028,"sourceUnit":5284,"src":"82:59:22","symbolAliases":[{"foreign":{"id":3944,"name":"BaseAccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"90:10:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/Bitcoin.sol","file":"../interfaces/Bitcoin.sol","id":3947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4028,"sourceUnit":4987,"src":"142:51:22","symbolAliases":[{"foreign":{"id":3946,"name":"IBitcoin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4986,"src":"150:8:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3948,"name":"BaseAccess","nameLocations":["215:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5283,"src":"215:10:22"},"id":3949,"nodeType":"InheritanceSpecifier","src":"215:10:22"},{"baseName":{"id":3950,"name":"IBitcoin","nameLocations":["227:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":4986,"src":"227:8:22"},"id":3951,"nodeType":"InheritanceSpecifier","src":"227:8:22"}],"canonicalName":"Bitcoin","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4027,"linearizedBaseContracts":[4027,4986,5283],"name":"Bitcoin","nameLocation":"204:7:22","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[4985],"constant":false,"functionSelector":"107bf28c","id":3953,"mutability":"mutable","name":"networkName","nameLocation":"256:11:22","nodeType":"VariableDeclaration","scope":4027,"src":"242:25:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3952,"name":"string","nodeType":"ElementaryTypeName","src":"242:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"baseFunctions":[4963],"constant":false,"functionSelector":"26a6557a","id":3955,"mutability":"mutable","name":"startHeight","nameLocation":"288:11:22","nodeType":"VariableDeclaration","scope":4027,"src":"273:26:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3954,"name":"uint256","nodeType":"ElementaryTypeName","src":"273:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"baseFunctions":[4968],"constant":false,"functionSelector":"e405bbc3","id":3957,"mutability":"mutable","name":"latestHeight","nameLocation":"320:12:22","nodeType":"VariableDeclaration","scope":4027,"src":"305:27:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3956,"name":"uint256","nodeType":"ElementaryTypeName","src":"305:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":3961,"mutability":"mutable","name":"blocks","nameLocation":"393:6:22","nodeType":"VariableDeclaration","scope":4027,"src":"339:60:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"},"typeName":{"id":3960,"keyName":"height","keyNameLocation":"355:6:22","keyType":{"id":3958,"name":"uint256","nodeType":"ElementaryTypeName","src":"347:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"339:44:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"},"valueName":"blockHash","valueNameLocation":"373:9:22","valueType":{"id":3959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"365:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"internal"},{"body":{"id":3988,"nodeType":"Block","src":"507:135:22","statements":[{"expression":{"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3970,"name":"startHeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"517:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3971,"name":"_height","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"531:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"517:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3973,"nodeType":"ExpressionStatement","src":"517:21:22"},{"expression":{"id":3976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3974,"name":"latestHeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"548:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3975,"name":"_height","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"563:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"548:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3977,"nodeType":"ExpressionStatement","src":"548:22:22"},{"expression":{"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3978,"name":"blocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"580:6:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"}},"id":3980,"indexExpression":{"id":3979,"name":"_height","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"587:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"580:15:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3981,"name":"_hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3965,"src":"598:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"580:23:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3983,"nodeType":"ExpressionStatement","src":"580:23:22"},{"expression":{"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3984,"name":"networkName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"613:11:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3985,"name":"_network","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"627:8:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"613:22:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3987,"nodeType":"ExpressionStatement","src":"613:22:22"}]},"id":3989,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3963,"mutability":"mutable","name":"_height","nameLocation":"459:7:22","nodeType":"VariableDeclaration","scope":3989,"src":"451:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3962,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3965,"mutability":"mutable","name":"_hash","nameLocation":"476:5:22","nodeType":"VariableDeclaration","scope":3989,"src":"468:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3964,"name":"bytes32","nodeType":"ElementaryTypeName","src":"468:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3967,"mutability":"mutable","name":"_network","nameLocation":"497:8:22","nodeType":"VariableDeclaration","scope":3989,"src":"483:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3966,"name":"string","nodeType":"ElementaryTypeName","src":"483:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"450:56:22"},"returnParameters":{"id":3969,"nodeType":"ParameterList","parameters":[],"src":"507:0:22"},"scope":4027,"src":"439:203:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4980],"body":{"id":4012,"nodeType":"Block","src":"813:115:22","statements":[{"assignments":[3998],"declarations":[{"constant":false,"id":3998,"mutability":"mutable","name":"height","nameLocation":"831:6:22","nodeType":"VariableDeclaration","scope":4012,"src":"823:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3997,"name":"uint256","nodeType":"ElementaryTypeName","src":"823:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4001,"initialValue":{"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"840:14:22","subExpression":{"id":3999,"name":"latestHeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"842:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"823:31:22"},{"expression":{"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4002,"name":"blocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"864:6:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"}},"id":4004,"indexExpression":{"id":4003,"name":"height","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"871:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"864:14:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4005,"name":"_hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"881:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"864:22:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4007,"nodeType":"ExpressionStatement","src":"864:22:22"},{"eventCall":{"arguments":[{"id":4009,"name":"height","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"914:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4008,"name":"NewBlockHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"901:12:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"901:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4011,"nodeType":"EmitStatement","src":"896:25:22"}]},"functionSelector":"94f490bd","id":4013,"implemented":true,"kind":"function","modifiers":[{"id":3995,"kind":"modifierInvocation","modifierName":{"id":3994,"name":"OnlyRelayer","nameLocations":["801:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":5282,"src":"801:11:22"},"nodeType":"ModifierInvocation","src":"801:11:22"}],"name":"newBlockHash","nameLocation":"755:12:22","nodeType":"FunctionDefinition","overrides":{"id":3993,"nodeType":"OverrideSpecifier","overrides":[],"src":"792:8:22"},"parameters":{"id":3992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3991,"mutability":"mutable","name":"_hash","nameLocation":"776:5:22","nodeType":"VariableDeclaration","scope":4013,"src":"768:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3990,"name":"bytes32","nodeType":"ElementaryTypeName","src":"768:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"767:15:22"},"returnParameters":{"id":3996,"nodeType":"ParameterList","parameters":[],"src":"813:0:22"},"scope":4027,"src":"746:182:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4975],"body":{"id":4025,"nodeType":"Block","src":"1024:38:22","statements":[{"expression":{"baseExpression":{"id":4021,"name":"blocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"1041:6:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bytes32_$","typeString":"mapping(uint256 => bytes32)"}},"id":4023,"indexExpression":{"id":4022,"name":"height","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"1048:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1041:14:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4020,"id":4024,"nodeType":"Return","src":"1034:21:22"}]},"functionSelector":"85df51fd","id":4026,"implemented":true,"kind":"function","modifiers":[],"name":"blockHash","nameLocation":"943:9:22","nodeType":"FunctionDefinition","overrides":{"id":4017,"nodeType":"OverrideSpecifier","overrides":[],"src":"997:8:22"},"parameters":{"id":4016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4015,"mutability":"mutable","name":"height","nameLocation":"970:6:22","nodeType":"VariableDeclaration","scope":4026,"src":"962:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4014,"name":"uint256","nodeType":"ElementaryTypeName","src":"962:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"952:30:22"},"returnParameters":{"id":4020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4026,"src":"1015:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1015:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1014:9:22"},"scope":4027,"src":"934:128:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4028,"src":"195:869:22","usedErrors":[5266,5268],"usedEvents":[4958]}],"src":"56:1009:22"},"id":22},"contracts/bridge/Bridge.sol":{"ast":{"absolutePath":"contracts/bridge/Bridge.sol","exportedSymbols":{"Address":[1417],"BaseAccess":[5283],"Bridge":[4920],"Burner":[5300],"IBridge":[5164],"IBridgeParam":[5221],"IERC165":[2782],"Ownable":[147],"PreDeployedAddresses":[5260]},"id":4921,"license":"Business Source License 1.1","nodeType":"SourceUnit","nodes":[{"id":4029,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"56:24:23"},{"absolutePath":"contracts/library/utils/Burner.sol","file":"../library/utils/Burner.sol","id":4031,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":5301,"src":"82:51:23","symbolAliases":[{"foreign":{"id":4030,"name":"Burner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"90:6:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/library/utils/BaseAccess.sol","file":"../library/utils/BaseAccess.sol","id":4033,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":5284,"src":"134:59:23","symbolAliases":[{"foreign":{"id":4032,"name":"BaseAccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"142:10:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/library/constants/Predeployed.sol","file":"../library/constants/Predeployed.sol","id":4035,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":5261,"src":"194:74:23","symbolAliases":[{"foreign":{"id":4034,"name":"PreDeployedAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"202:20:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":4037,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":148,"src":"269:67:23","symbolAliases":[{"foreign":{"id":4036,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"277:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/bridge/Bridge.sol","file":"../interfaces/bridge/Bridge.sol","id":4039,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":5165,"src":"338:56:23","symbolAliases":[{"foreign":{"id":4038,"name":"IBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5164,"src":"346:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/bridge/BridgeParam.sol","file":"../interfaces/bridge/BridgeParam.sol","id":4041,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":5222,"src":"395:66:23","symbolAliases":[{"foreign":{"id":4040,"name":"IBridgeParam","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"403:12:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":4043,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":1418,"src":"463:66:23","symbolAliases":[{"foreign":{"id":4042,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"471:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":4045,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4921,"sourceUnit":2771,"src":"530:79:23","symbolAliases":[{"foreign":{"id":4044,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"538:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4046,"name":"Ownable","nameLocations":["630:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"630:7:23"},"id":4047,"nodeType":"InheritanceSpecifier","src":"630:7:23"},{"baseName":{"id":4048,"name":"BaseAccess","nameLocations":["639:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5283,"src":"639:10:23"},"id":4049,"nodeType":"InheritanceSpecifier","src":"639:10:23"},{"baseName":{"id":4050,"name":"IBridge","nameLocations":["651:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":5164,"src":"651:7:23"},"id":4051,"nodeType":"InheritanceSpecifier","src":"651:7:23"},{"baseName":{"id":4052,"name":"IBridgeParam","nameLocations":["660:12:23"],"nodeType":"IdentifierPath","referencedDeclaration":5221,"src":"660:12:23"},"id":4053,"nodeType":"InheritanceSpecifier","src":"660:12:23"},{"baseName":{"id":4054,"name":"IERC165","nameLocations":["674:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":2782,"src":"674:7:23"},"id":4055,"nodeType":"InheritanceSpecifier","src":"674:7:23"}],"canonicalName":"Bridge","contractDependencies":[5300],"contractKind":"contract","fullyImplemented":true,"id":4920,"linearizedBaseContracts":[4920,2782,5221,5164,5283,147,1447],"name":"Bridge","nameLocation":"620:6:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4058,"libraryName":{"id":4056,"name":"Address","nameLocations":["694:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"694:7:23"},"nodeType":"UsingForDirective","src":"688:34:23","typeName":{"id":4057,"name":"address","nodeType":"ElementaryTypeName","src":"706:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"constant":false,"functionSelector":"883d87b1","id":4061,"mutability":"mutable","name":"param","nameLocation":"741:5:23","nodeType":"VariableDeclaration","scope":4920,"src":"728:18:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param"},"typeName":{"id":4060,"nodeType":"UserDefinedTypeName","pathNode":{"id":4059,"name":"Param","nameLocations":["728:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":5197,"src":"728:5:23"},"referencedDeclaration":5197,"src":"728:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage_ptr","typeString":"struct IBridgeParam.Param"}},"visibility":"public"},{"constant":false,"id":4065,"mutability":"mutable","name":"deposits","nameLocation":"795:8:23","nodeType":"VariableDeclaration","scope":4920,"src":"753:50:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":4064,"keyName":"txh","keyNameLocation":"769:3:23","keyType":{"id":4062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"761:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"753:32:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"yes","valueNameLocation":"781:3:23","valueType":{"id":4063,"name":"bool","nodeType":"ElementaryTypeName","src":"776:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"functionSelector":"5cc07076","id":4069,"mutability":"mutable","name":"withdrawals","nameLocation":"830:11:23","nodeType":"VariableDeclaration","scope":4920,"src":"810:31:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal[]"},"typeName":{"baseType":{"id":4067,"nodeType":"UserDefinedTypeName","pathNode":{"id":4066,"name":"Withdrawal","nameLocations":["810:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5094,"src":"810:10:23"},"referencedDeclaration":5094,"src":"810:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"}},"id":4068,"nodeType":"ArrayTypeName","src":"810:12:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage_ptr","typeString":"struct IBridge.Withdrawal[]"}},"visibility":"public"},{"constant":false,"functionSelector":"0f7ee1ec","id":4074,"mutability":"mutable","name":"receipts","nameLocation":"925:8:23","nodeType":"VariableDeclaration","scope":4920,"src":"879:54:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Receipt_$5101_storage_$","typeString":"mapping(uint256 => struct IBridge.Receipt)"},"typeName":{"id":4073,"keyName":"id","keyNameLocation":"895:2:23","keyType":{"id":4070,"name":"uint256","nodeType":"ElementaryTypeName","src":"887:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"879:38:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Receipt_$5101_storage_$","typeString":"mapping(uint256 => struct IBridge.Receipt)"},"valueName":"receipt","valueNameLocation":"909:7:23","valueType":{"id":4072,"nodeType":"UserDefinedTypeName","pathNode":{"id":4071,"name":"Receipt","nameLocations":["901:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":5101,"src":"901:7:23"},"referencedDeclaration":5101,"src":"901:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$5101_storage_ptr","typeString":"struct IBridge.Receipt"}}},"visibility":"public"},{"constant":true,"id":4077,"mutability":"constant","name":"satoshi","nameLocation":"993:7:23","nodeType":"VariableDeclaration","scope":4920,"src":"967:43:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4075,"name":"uint256","nodeType":"ElementaryTypeName","src":"967:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130","id":4076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1003:7:23","subdenomination":"gwei","typeDescriptions":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"},"value":"10"},"visibility":"internal"},{"constant":true,"id":4080,"mutability":"constant","name":"baseTxSize","nameLocation":"1104:10:23","nodeType":"VariableDeclaration","scope":4920,"src":"1078:42:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1078:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333030","id":4079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1117:3:23","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"},"visibility":"internal"},{"constant":true,"id":4083,"mutability":"constant","name":"maxBasePoints","nameLocation":"1184:13:23","nodeType":"VariableDeclaration","scope":4920,"src":"1158:45:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"316534","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1200:3:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"1e4"},"visibility":"internal"},{"body":{"id":4103,"nodeType":"Block","src":"1282:261:23","statements":[{"expression":{"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4091,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"1292:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"333030","id":4093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1331:3:23","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"},{"hexValue":"30","id":4094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1392:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"3230","id":4096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1424:2:23","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},{"hexValue":"325f3030305f303030","id":4097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1458:14:23","subdenomination":"gwei","typeDescriptions":{"typeIdentifier":"t_rational_2000000000000000_by_1","typeString":"int_const 2000000000000000"},"value":"2_000_000"},{"hexValue":"30","id":4098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1502:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1524:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},{"typeIdentifier":"t_rational_2000000000000000_by_1","typeString":"int_const 2000000000000000"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4092,"name":"Param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"1300:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Param_$5197_storage_ptr_$","typeString":"type(struct IBridgeParam.Param storage pointer)"}},"id":4100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1320:9:23","1348:12:23","1377:13:23","1407:15:23","1440:16:23","1495:5:23","1517:5:23"],"names":["rateLimit","depositTaxBP","maxDepositTax","withdrawalTaxBP","maxWithdrawalTax","_res1","_res2"],"nodeType":"FunctionCall","src":"1300:236:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"src":"1292:244:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4102,"nodeType":"ExpressionStatement","src":"1292:244:23"}]},"id":4104,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4088,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"1275:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4089,"kind":"baseConstructorSpecifier","modifierName":{"id":4087,"name":"Ownable","nameLocations":["1267:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"1267:7:23"},"nodeType":"ModifierInvocation","src":"1267:14:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4085,"mutability":"mutable","name":"owner","nameLocation":"1260:5:23","nodeType":"VariableDeclaration","scope":4104,"src":"1252:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4084,"name":"address","nodeType":"ElementaryTypeName","src":"1252:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1251:15:23"},"returnParameters":{"id":4090,"nodeType":"ParameterList","parameters":[],"src":"1282:0:23"},"scope":4920,"src":"1240:303:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5123],"body":{"id":4204,"nodeType":"Block","src":"1999:667:23","statements":[{"assignments":[4122],"declarations":[{"constant":false,"id":4122,"mutability":"mutable","name":"depositHash","nameLocation":"2017:11:23","nodeType":"VariableDeclaration","scope":4204,"src":"2009:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4121,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4130,"initialValue":{"arguments":[{"arguments":[{"id":4126,"name":"_txid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"2058:5:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4127,"name":"_txout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"2065:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":4124,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2041:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2045:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"2041:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2041:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4123,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2031:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2031:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2009:64:23"},{"expression":{"arguments":[{"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2091:22:23","subExpression":{"baseExpression":{"id":4132,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"2092:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4134,"indexExpression":{"id":4133,"name":"depositHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4122,"src":"2101:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2092:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6475706c696361746564","id":4136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2115:12:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c408cec1329bb31a3148be2369fbd5b36a4fbd332b42dd56ad2cf165479d4b50","typeString":"literal_string \"duplicated\""},"value":"duplicated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c408cec1329bb31a3148be2369fbd5b36a4fbd332b42dd56ad2cf165479d4b50","typeString":"literal_string \"duplicated\""}],"id":4131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2083:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2083:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4138,"nodeType":"ExpressionStatement","src":"2083:45:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4140,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2147:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2157:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2147:11:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4143,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2162:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4144,"name":"satoshi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"2172:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2162:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2183:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2162:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2147:37:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420616d6f756e74","id":4149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:16:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""},"value":"invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""}],"id":4139,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2139:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2139:64:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4151,"nodeType":"ExpressionStatement","src":"2139:64:23"},{"assignments":[4154],"declarations":[{"constant":false,"id":4154,"mutability":"mutable","name":"p","nameLocation":"2227:1:23","nodeType":"VariableDeclaration","scope":4204,"src":"2214:14:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param"},"typeName":{"id":4153,"nodeType":"UserDefinedTypeName","pathNode":{"id":4152,"name":"Param","nameLocations":["2214:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":5197,"src":"2214:5:23"},"referencedDeclaration":5197,"src":"2214:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage_ptr","typeString":"struct IBridgeParam.Param"}},"visibility":"internal"}],"id":4156,"initialValue":{"id":4155,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2231:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2214:22:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4157,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"2250:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2252:12:23","memberName":"depositTaxBP","nodeType":"MemberAccess","referencedDeclaration":5186,"src":"2250:14:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2267:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2250:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4187,"nodeType":"IfStatement","src":"2246:219:23","trueBody":{"id":4186,"nodeType":"Block","src":"2270:195:23","statements":[{"expression":{"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4161,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2284:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4162,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2291:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4163,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"2301:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2303:12:23","memberName":"depositTaxBP","nodeType":"MemberAccess","referencedDeclaration":5186,"src":"2301:14:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2291:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2290:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4167,"name":"maxBasePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"2319:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2290:42:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2284:48:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4170,"nodeType":"ExpressionStatement","src":"2284:48:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4171,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2350:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4172,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"2356:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4173,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2358:13:23","memberName":"maxDepositTax","nodeType":"MemberAccess","referencedDeclaration":5188,"src":"2356:15:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2350:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4181,"nodeType":"IfStatement","src":"2346:81:23","trueBody":{"id":4180,"nodeType":"Block","src":"2373:54:23","statements":[{"expression":{"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4175,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2391:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4176,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"2397:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4177,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2399:13:23","memberName":"maxDepositTax","nodeType":"MemberAccess","referencedDeclaration":5188,"src":"2397:15:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2391:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4179,"nodeType":"ExpressionStatement","src":"2391:21:23"}]}},{"expression":{"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4182,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2440:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4183,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2451:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2440:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4185,"nodeType":"ExpressionStatement","src":"2440:14:23"}]}},{"expression":{"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4188,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"2475:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4190,"indexExpression":{"id":4189,"name":"depositHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4122,"src":"2484:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2475:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2499:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2475:28:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4193,"nodeType":"ExpressionStatement","src":"2475:28:23"},{"eventCall":{"arguments":[{"id":4195,"name":"_target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"2526:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4196,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2535:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4197,"name":"_txid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"2544:5:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4198,"name":"_txout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"2551:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":4199,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2559:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4194,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"2518:7:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_uint32_$_t_uint256_$returns$__$","typeString":"function (address,uint256,bytes32,uint32,uint256)"}},"id":4200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2518:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4201,"nodeType":"EmitStatement","src":"2513:50:23"},{"expression":{"id":4202,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2656:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4120,"id":4203,"nodeType":"Return","src":"2649:10:23"}]},"documentation":{"id":4105,"nodeType":"StructuredDocumentation","src":"1549:274:23","text":" deposit adds balance to the target address\n goat performs the adding outside EVM to prevent any errors\n @param _txid the txid(LE)\n @param _txout the txout\n @param _target the depoist address\n @param _amount the deposit amount"},"functionSelector":"b55ada39","id":4205,"implemented":true,"kind":"function","modifiers":[{"id":4117,"kind":"modifierInvocation","modifierName":{"id":4116,"name":"OnlyRelayer","nameLocations":["1965:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":5282,"src":"1965:11:23"},"nodeType":"ModifierInvocation","src":"1965:11:23"}],"name":"deposit","nameLocation":"1837:7:23","nodeType":"FunctionDefinition","overrides":{"id":4115,"nodeType":"OverrideSpecifier","overrides":[],"src":"1956:8:23"},"parameters":{"id":4114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4107,"mutability":"mutable","name":"_txid","nameLocation":"1862:5:23","nodeType":"VariableDeclaration","scope":4205,"src":"1854:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1854:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4109,"mutability":"mutable","name":"_txout","nameLocation":"1884:6:23","nodeType":"VariableDeclaration","scope":4205,"src":"1877:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4108,"name":"uint32","nodeType":"ElementaryTypeName","src":"1877:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"_target","nameLocation":"1908:7:23","nodeType":"VariableDeclaration","scope":4205,"src":"1900:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4110,"name":"address","nodeType":"ElementaryTypeName","src":"1900:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4113,"mutability":"mutable","name":"_amount","nameLocation":"1933:7:23","nodeType":"VariableDeclaration","scope":4205,"src":"1925:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1925:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1844:102:23"},"returnParameters":{"id":4120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4119,"mutability":"mutable","name":"tax","nameLocation":"1994:3:23","nodeType":"VariableDeclaration","scope":4205,"src":"1986:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4118,"name":"uint256","nodeType":"ElementaryTypeName","src":"1986:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1985:13:23"},"scope":4920,"src":"1828:838:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5110],"body":{"id":4230,"nodeType":"Block","src":"2921:119:23","statements":[{"assignments":[4217],"declarations":[{"constant":false,"id":4217,"mutability":"mutable","name":"depositHash","nameLocation":"2939:11:23","nodeType":"VariableDeclaration","scope":4230,"src":"2931:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4216,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2931:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4225,"initialValue":{"arguments":[{"arguments":[{"id":4221,"name":"_txid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4208,"src":"2980:5:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4222,"name":"_txout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4210,"src":"2987:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":4219,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2963:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2967:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"2963:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4218,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2953:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2953:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2931:64:23"},{"expression":{"baseExpression":{"id":4226,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"3012:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4228,"indexExpression":{"id":4227,"name":"depositHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4217,"src":"3021:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3012:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4215,"id":4229,"nodeType":"Return","src":"3005:28:23"}]},"documentation":{"id":4206,"nodeType":"StructuredDocumentation","src":"2672:133:23","text":" isDeposited checks if the deposit is succeed\n @param _txid the txid(LE)\n @param _txout the txout index"},"functionSelector":"1ccc92c7","id":4231,"implemented":true,"kind":"function","modifiers":[],"name":"isDeposited","nameLocation":"2819:11:23","nodeType":"FunctionDefinition","overrides":{"id":4212,"nodeType":"OverrideSpecifier","overrides":[],"src":"2897:8:23"},"parameters":{"id":4211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4208,"mutability":"mutable","name":"_txid","nameLocation":"2848:5:23","nodeType":"VariableDeclaration","scope":4231,"src":"2840:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2840:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4210,"mutability":"mutable","name":"_txout","nameLocation":"2870:6:23","nodeType":"VariableDeclaration","scope":4231,"src":"2863:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4209,"name":"uint32","nodeType":"ElementaryTypeName","src":"2863:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2830:52:23"},"returnParameters":{"id":4215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4231,"src":"2915:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4213,"name":"bool","nodeType":"ElementaryTypeName","src":"2915:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2914:6:23"},"scope":4920,"src":"2810:230:23","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5130],"body":{"id":4375,"nodeType":"Block","src":"3350:1246:23","statements":[{"assignments":[4241],"declarations":[{"constant":false,"id":4241,"mutability":"mutable","name":"addrBytes","nameLocation":"3373:9:23","nodeType":"VariableDeclaration","scope":4375,"src":"3360:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4240,"name":"bytes","nodeType":"ElementaryTypeName","src":"3360:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4246,"initialValue":{"arguments":[{"id":4244,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"3391:9:23","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3385:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4242,"name":"bytes","nodeType":"ElementaryTypeName","src":"3385:5:23","typeDescriptions":{}}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3385:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"nodeType":"VariableDeclarationStatement","src":"3360:41:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4247,"name":"addrBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4241,"src":"3415:9:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3425:6:23","memberName":"length","nodeType":"MemberAccess","src":"3415:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3334","id":4249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3434:2:23","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"34"},"src":"3415:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4251,"name":"addrBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4241,"src":"3440:9:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3450:6:23","memberName":"length","nodeType":"MemberAccess","src":"3440:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3930","id":4253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3459:2:23","typeDescriptions":{"typeIdentifier":"t_rational_90_by_1","typeString":"int_const 90"},"value":"90"},"src":"3440:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3415:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4260,"nodeType":"IfStatement","src":"3411:100:23","trueBody":{"id":4259,"nodeType":"Block","src":"3463:48:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4256,"name":"InvalidAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"3484:14:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3484:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4258,"nodeType":"RevertStatement","src":"3477:23:23"}]}},{"assignments":[4262],"declarations":[{"constant":false,"id":4262,"mutability":"mutable","name":"amount","nameLocation":"3529:6:23","nodeType":"VariableDeclaration","scope":4375,"src":"3521:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4261,"name":"uint256","nodeType":"ElementaryTypeName","src":"3521:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4265,"initialValue":{"expression":{"id":4263,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3538:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3542:5:23","memberName":"value","nodeType":"MemberAccess","src":"3538:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3521:26:23"},{"assignments":[4267],"declarations":[{"constant":false,"id":4267,"mutability":"mutable","name":"tax","nameLocation":"3565:3:23","nodeType":"VariableDeclaration","scope":4375,"src":"3557:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4266,"name":"uint256","nodeType":"ElementaryTypeName","src":"3557:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4269,"initialValue":{"hexValue":"30","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3571:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3557:15:23"},{"assignments":[4272],"declarations":[{"constant":false,"id":4272,"mutability":"mutable","name":"p","nameLocation":"3596:1:23","nodeType":"VariableDeclaration","scope":4375,"src":"3583:14:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param"},"typeName":{"id":4271,"nodeType":"UserDefinedTypeName","pathNode":{"id":4270,"name":"Param","nameLocations":["3583:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":5197,"src":"3583:5:23"},"referencedDeclaration":5197,"src":"3583:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage_ptr","typeString":"struct IBridgeParam.Param"}},"visibility":"internal"}],"id":4274,"initialValue":{"id":4273,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"3600:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3583:22:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4275,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"3619:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4276,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3621:15:23","memberName":"withdrawalTaxBP","nodeType":"MemberAccess","referencedDeclaration":5190,"src":"3619:17:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3639:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3619:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4305,"nodeType":"IfStatement","src":"3615:229:23","trueBody":{"id":4304,"nodeType":"Block","src":"3642:202:23","statements":[{"expression":{"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4279,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"3656:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4280,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"3663:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4281,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"3672:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3674:15:23","memberName":"withdrawalTaxBP","nodeType":"MemberAccess","referencedDeclaration":5190,"src":"3672:17:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3663:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3662:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4285,"name":"maxBasePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"3693:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3662:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3656:50:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4288,"nodeType":"ExpressionStatement","src":"3656:50:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4289,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"3724:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4290,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"3730:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3732:16:23","memberName":"maxWithdrawalTax","nodeType":"MemberAccess","referencedDeclaration":5192,"src":"3730:18:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3724:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4299,"nodeType":"IfStatement","src":"3720:87:23","trueBody":{"id":4298,"nodeType":"Block","src":"3750:57:23","statements":[{"expression":{"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4293,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"3768:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4294,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"3774:1:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_memory_ptr","typeString":"struct IBridgeParam.Param memory"}},"id":4295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3776:16:23","memberName":"maxWithdrawalTax","nodeType":"MemberAccess","referencedDeclaration":5192,"src":"3774:18:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3768:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4297,"nodeType":"ExpressionStatement","src":"3768:24:23"}]}},{"expression":{"id":4302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4300,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"3820:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4301,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"3830:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3820:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4303,"nodeType":"ExpressionStatement","src":"3820:13:23"}]}},{"assignments":[4307],"declarations":[{"constant":false,"id":4307,"mutability":"mutable","name":"dust","nameLocation":"3885:4:23","nodeType":"VariableDeclaration","scope":4375,"src":"3877:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"3877:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4311,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4308,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"3892:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4309,"name":"satoshi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"3901:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3892:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3877:31:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4312,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"3922:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3929:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3922:8:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4324,"nodeType":"IfStatement","src":"3918:78:23","trueBody":{"id":4323,"nodeType":"Block","src":"3932:64:23","statements":[{"expression":{"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4315,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"3946:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4316,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"3953:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3946:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4318,"nodeType":"ExpressionStatement","src":"3946:11:23"},{"expression":{"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4319,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"3971:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4320,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"3981:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3971:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4322,"nodeType":"ExpressionStatement","src":"3971:14:23"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4326,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"4014:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4028:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4014:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964207478207072696365","id":4329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4031:18:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_35e2a7c0e5320f1f9d561dcf29daa653278f4a6b116055ae99c0f73982ee0a11","typeString":"literal_string \"invalid tx price\""},"value":"invalid tx price"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_35e2a7c0e5320f1f9d561dcf29daa653278f4a6b116055ae99c0f73982ee0a11","typeString":"literal_string \"invalid tx price\""}],"id":4325,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4006:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4006:44:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4331,"nodeType":"ExpressionStatement","src":"4006:44:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4333,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"4068:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4334,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"4077:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4335,"name":"baseTxSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"4091:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4077:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4337,"name":"satoshi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"4104:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4077:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4068:43:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"756e6166666f726461626c65","id":4340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4113:14:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_660324624872cd0b922aa91b3e00247627a75111d0e93436b452b9f5c54a277e","typeString":"literal_string \"unaffordable\""},"value":"unaffordable"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_660324624872cd0b922aa91b3e00247627a75111d0e93436b452b9f5c54a277e","typeString":"literal_string \"unaffordable\""}],"id":4332,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4060:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4060:68:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4342,"nodeType":"ExpressionStatement","src":"4060:68:23"},{"assignments":[4344],"declarations":[{"constant":false,"id":4344,"mutability":"mutable","name":"id","nameLocation":"4147:2:23","nodeType":"VariableDeclaration","scope":4375,"src":"4139:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4343,"name":"uint256","nodeType":"ElementaryTypeName","src":"4139:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4347,"initialValue":{"expression":{"id":4345,"name":"withdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"4152:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal storage ref[] storage ref"}},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4164:6:23","memberName":"length","nodeType":"MemberAccess","src":"4152:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4139:31:23"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":4352,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4247:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4251:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4247:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4354,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"4283:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4355,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"4312:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4356,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"4345:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":4357,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4385:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4391:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"4385:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4359,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"4428:9:23","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"expression":{"id":4360,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"4463:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4480:7:23","memberName":"Pending","nodeType":"MemberAccess","referencedDeclaration":5069,"src":"4463:24:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}],"id":4351,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5094,"src":"4210:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Withdrawal_$5094_storage_ptr_$","typeString":"type(struct IBridge.Withdrawal storage pointer)"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4239:6:23","4275:6:23","4307:3:23","4333:10:23","4374:9:23","4418:8:23","4455:6:23"],"names":["sender","amount","tax","maxTxPrice","updatedAt","receiver","status"],"nodeType":"FunctionCall","src":"4210:292:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_memory_ptr","typeString":"struct IBridge.Withdrawal memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Withdrawal_$5094_memory_ptr","typeString":"struct IBridge.Withdrawal memory"}],"expression":{"id":4348,"name":"withdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"4180:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal storage ref[] storage ref"}},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4192:4:23","memberName":"push","nodeType":"MemberAccess","src":"4180:16:23","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage_ptr_$_t_struct$_Withdrawal_$5094_storage_$returns$__$attached_to$_t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage_ptr_$","typeString":"function (struct IBridge.Withdrawal storage ref[] storage pointer,struct IBridge.Withdrawal storage ref)"}},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:332:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4364,"nodeType":"ExpressionStatement","src":"4180:332:23"},{"eventCall":{"arguments":[{"id":4366,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"4537:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4367,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4541:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4545:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4541:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4369,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"4553:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4370,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"4561:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4371,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"4566:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4372,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"4579:9:23","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4365,"name":"Withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5039,"src":"4528:8:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,address,uint256,uint256,uint256,string memory)"}},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4528:61:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4374,"nodeType":"EmitStatement","src":"4523:66:23"}]},"documentation":{"id":4232,"nodeType":"StructuredDocumentation","src":"3046:186:23","text":" withdraw initializes a new withdrawal request by a user\n @param _receiver the address to withdraw\n @param _maxTxPrice the max allowed tx price in sat/vbyte"},"functionSelector":"a81de869","id":4376,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"3246:8:23","nodeType":"FunctionDefinition","overrides":{"id":4238,"nodeType":"OverrideSpecifier","overrides":[],"src":"3341:8:23"},"parameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4234,"mutability":"mutable","name":"_receiver","nameLocation":"3280:9:23","nodeType":"VariableDeclaration","scope":4376,"src":"3264:25:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4233,"name":"string","nodeType":"ElementaryTypeName","src":"3264:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4236,"mutability":"mutable","name":"_maxTxPrice","nameLocation":"3306:11:23","nodeType":"VariableDeclaration","scope":4376,"src":"3299:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4235,"name":"uint16","nodeType":"ElementaryTypeName","src":"3299:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3254:69:23"},"returnParameters":{"id":4239,"nodeType":"ParameterList","parameters":[],"src":"3350:0:23"},"scope":4920,"src":"3237:1359:23","stateMutability":"payable","virtual":false,"visibility":"external"},{"baseFunctions":[5137],"body":{"id":4463,"nodeType":"Block","src":"4828:780:23","statements":[{"assignments":[4387],"declarations":[{"constant":false,"id":4387,"mutability":"mutable","name":"withdrawal","nameLocation":"4857:10:23","nodeType":"VariableDeclaration","scope":4463,"src":"4838:29:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"},"typeName":{"id":4386,"nodeType":"UserDefinedTypeName","pathNode":{"id":4385,"name":"Withdrawal","nameLocations":["4838:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5094,"src":"4838:10:23"},"referencedDeclaration":5094,"src":"4838:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"}},"visibility":"internal"}],"id":4391,"initialValue":{"baseExpression":{"id":4388,"name":"withdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"4870:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal storage ref[] storage ref"}},"id":4390,"indexExpression":{"id":4389,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"4882:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4870:17:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage","typeString":"struct IBridge.Withdrawal storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4838:49:23"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4392,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"4902:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4393,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4913:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"4902:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4394,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"4923:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4940:7:23","memberName":"Pending","nodeType":"MemberAccess","referencedDeclaration":5069,"src":"4923:24:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"4902:45:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4401,"nodeType":"IfStatement","src":"4898:94:23","trueBody":{"id":4400,"nodeType":"Block","src":"4949:43:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4397,"name":"Forbidden","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"4970:9:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4970:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4399,"nodeType":"RevertStatement","src":"4963:18:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4402,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5006:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5017:6:23","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":5080,"src":"5006:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4404,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5027:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5031:6:23","memberName":"sender","nodeType":"MemberAccess","src":"5027:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5006:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4411,"nodeType":"IfStatement","src":"5002:83:23","trueBody":{"id":4410,"nodeType":"Block","src":"5039:46:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4407,"name":"AccessDenied","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"5060:12:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5060:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4409,"nodeType":"RevertStatement","src":"5053:21:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4412,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5099:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5105:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"5099:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4414,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5117:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4415,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5128:9:23","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":5088,"src":"5117:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5099:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4417,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"5140:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5146:9:23","memberName":"rateLimit","nodeType":"MemberAccess","referencedDeclaration":5184,"src":"5140:15:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5099:56:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4424,"nodeType":"IfStatement","src":"5095:113:23","trueBody":{"id":4423,"nodeType":"Block","src":"5157:51:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4420,"name":"RateLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"5178:17:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5178:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4422,"nodeType":"RevertStatement","src":"5171:26:23"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4426,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"5239:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4427,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5253:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5264:10:23","memberName":"maxTxPrice","nodeType":"MemberAccess","referencedDeclaration":5086,"src":"5253:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5239:35:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746865206e65772074782070726963652073686f756c64206265206c6172676572207468616e206265666f7265","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5288:47:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8bb60aaf805d6037c85befbef77dc6120c79480f8db99b4aa0598783010d7aa","typeString":"literal_string \"the new tx price should be larger than before\""},"value":"the new tx price should be larger than before"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c8bb60aaf805d6037c85befbef77dc6120c79480f8db99b4aa0598783010d7aa","typeString":"literal_string \"the new tx price should be larger than before\""}],"id":4425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5218:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5218:127:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4432,"nodeType":"ExpressionStatement","src":"5218:127:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4434,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5377:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5388:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5082,"src":"5377:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4436,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"5397:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4437,"name":"baseTxSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"5411:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5397:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4439,"name":"satoshi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"5424:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5397:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5377:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"756e6166666f726461626c65","id":4442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5445:14:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_660324624872cd0b922aa91b3e00247627a75111d0e93436b452b9f5c54a277e","typeString":"literal_string \"unaffordable\""},"value":"unaffordable"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_660324624872cd0b922aa91b3e00247627a75111d0e93436b452b9f5c54a277e","typeString":"literal_string \"unaffordable\""}],"id":4433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5356:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5356:113:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4444,"nodeType":"ExpressionStatement","src":"5356:113:23"},{"expression":{"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4445,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5480:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4447,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5491:10:23","memberName":"maxTxPrice","nodeType":"MemberAccess","referencedDeclaration":5086,"src":"5480:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4448,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"5504:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5480:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4450,"nodeType":"ExpressionStatement","src":"5480:35:23"},{"expression":{"id":4456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4451,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5525:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5536:9:23","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":5088,"src":"5525:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4454,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5548:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5554:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"5548:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5525:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4457,"nodeType":"ExpressionStatement","src":"5525:38:23"},{"eventCall":{"arguments":[{"id":4459,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"5583:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4460,"name":"_maxTxPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"5589:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4458,"name":"RBF","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"5579:3:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5579:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4462,"nodeType":"EmitStatement","src":"5574:27:23"}]},"documentation":{"id":4377,"nodeType":"StructuredDocumentation","src":"4602:147:23","text":" replaceByFee updates the withdrawal tx price\n @param _wid the withdrawal id\n @param _maxTxPrice the new max tx price"},"functionSelector":"b3dd64dd","id":4464,"implemented":true,"kind":"function","modifiers":[],"name":"replaceByFee","nameLocation":"4763:12:23","nodeType":"FunctionDefinition","overrides":{"id":4383,"nodeType":"OverrideSpecifier","overrides":[],"src":"4819:8:23"},"parameters":{"id":4382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4379,"mutability":"mutable","name":"_wid","nameLocation":"4784:4:23","nodeType":"VariableDeclaration","scope":4464,"src":"4776:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4378,"name":"uint256","nodeType":"ElementaryTypeName","src":"4776:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4381,"mutability":"mutable","name":"_maxTxPrice","nameLocation":"4797:11:23","nodeType":"VariableDeclaration","scope":4464,"src":"4790:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4380,"name":"uint16","nodeType":"ElementaryTypeName","src":"4790:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4775:34:23"},"returnParameters":{"id":4384,"nodeType":"ParameterList","parameters":[],"src":"4828:0:23"},"scope":4920,"src":"4754:854:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5142],"body":{"id":4528,"nodeType":"Block","src":"5760:521:23","statements":[{"assignments":[4472],"declarations":[{"constant":false,"id":4472,"mutability":"mutable","name":"withdrawal","nameLocation":"5789:10:23","nodeType":"VariableDeclaration","scope":4528,"src":"5770:29:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"},"typeName":{"id":4471,"nodeType":"UserDefinedTypeName","pathNode":{"id":4470,"name":"Withdrawal","nameLocations":["5770:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5094,"src":"5770:10:23"},"referencedDeclaration":5094,"src":"5770:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"}},"visibility":"internal"}],"id":4476,"initialValue":{"baseExpression":{"id":4473,"name":"withdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"5802:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal storage ref[] storage ref"}},"id":4475,"indexExpression":{"id":4474,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"5814:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5802:17:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage","typeString":"struct IBridge.Withdrawal storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5770:49:23"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4477,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"5834:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5845:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"5834:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4479,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"5855:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5872:7:23","memberName":"Pending","nodeType":"MemberAccess","referencedDeclaration":5069,"src":"5855:24:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"5834:45:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4486,"nodeType":"IfStatement","src":"5830:94:23","trueBody":{"id":4485,"nodeType":"Block","src":"5881:43:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4482,"name":"Forbidden","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"5902:9:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5902:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4484,"nodeType":"RevertStatement","src":"5895:18:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4487,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"5938:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4488,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5949:6:23","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":5080,"src":"5938:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4489,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5959:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5963:6:23","memberName":"sender","nodeType":"MemberAccess","src":"5959:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5938:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4496,"nodeType":"IfStatement","src":"5934:83:23","trueBody":{"id":4495,"nodeType":"Block","src":"5971:46:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4492,"name":"AccessDenied","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"5992:12:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5992:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4494,"nodeType":"RevertStatement","src":"5985:21:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4497,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6031:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6037:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"6031:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4499,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"6049:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6060:9:23","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":5088,"src":"6049:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6031:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4502,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"6072:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4503,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6078:9:23","memberName":"rateLimit","nodeType":"MemberAccess","referencedDeclaration":5184,"src":"6072:15:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6031:56:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4509,"nodeType":"IfStatement","src":"6027:113:23","trueBody":{"id":4508,"nodeType":"Block","src":"6089:51:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4505,"name":"RateLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"6110:17:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6110:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4507,"nodeType":"RevertStatement","src":"6103:26:23"}]}},{"expression":{"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4510,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"6150:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6161:9:23","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":5088,"src":"6150:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4513,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6173:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6179:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"6173:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6150:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4516,"nodeType":"ExpressionStatement","src":"6150:38:23"},{"expression":{"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4517,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"6198:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4519,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6209:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"6198:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4520,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"6218:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6235:9:23","memberName":"Canceling","nodeType":"MemberAccess","referencedDeclaration":5070,"src":"6218:26:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"6198:46:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"id":4523,"nodeType":"ExpressionStatement","src":"6198:46:23"},{"eventCall":{"arguments":[{"id":4525,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"6269:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4524,"name":"Canceling","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5043,"src":"6259:9:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6259:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4527,"nodeType":"EmitStatement","src":"6254:20:23"}]},"documentation":{"id":4465,"nodeType":"StructuredDocumentation","src":"5614:101:23","text":" cancel1 cancels the withdrawal by origin user\n @param _wid the withdrawal id"},"functionSelector":"84a64c12","id":4529,"implemented":true,"kind":"function","modifiers":[],"name":"cancel1","nameLocation":"5729:7:23","nodeType":"FunctionDefinition","parameters":{"id":4468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4467,"mutability":"mutable","name":"_wid","nameLocation":"5745:4:23","nodeType":"VariableDeclaration","scope":4529,"src":"5737:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4466,"name":"uint256","nodeType":"ElementaryTypeName","src":"5737:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5736:14:23"},"returnParameters":{"id":4469,"nodeType":"ParameterList","parameters":[],"src":"5760:0:23"},"scope":4920,"src":"5720:561:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5152],"body":{"id":4580,"nodeType":"Block","src":"6582:382:23","statements":[{"assignments":[4539],"declarations":[{"constant":false,"id":4539,"mutability":"mutable","name":"withdrawal","nameLocation":"6611:10:23","nodeType":"VariableDeclaration","scope":4580,"src":"6592:29:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"},"typeName":{"id":4538,"nodeType":"UserDefinedTypeName","pathNode":{"id":4537,"name":"Withdrawal","nameLocations":["6592:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5094,"src":"6592:10:23"},"referencedDeclaration":5094,"src":"6592:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"}},"visibility":"internal"}],"id":4543,"initialValue":{"baseExpression":{"id":4540,"name":"withdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"6624:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal storage ref[] storage ref"}},"id":4542,"indexExpression":{"id":4541,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"6636:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6624:17:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage","typeString":"struct IBridge.Withdrawal storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6592:49:23"},{"assignments":[4546],"declarations":[{"constant":false,"id":4546,"mutability":"mutable","name":"status","nameLocation":"6668:6:23","nodeType":"VariableDeclaration","scope":4580,"src":"6651:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"typeName":{"id":4545,"nodeType":"UserDefinedTypeName","pathNode":{"id":4544,"name":"WithdrawalStatus","nameLocations":["6651:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":5074,"src":"6651:16:23"},"referencedDeclaration":5074,"src":"6651:16:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"visibility":"internal"}],"id":4549,"initialValue":{"expression":{"id":4547,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"6677:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6688:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"6677:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"VariableDeclarationStatement","src":"6651:43:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4551,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"6725:6:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4552,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"6735:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6752:7:23","memberName":"Pending","nodeType":"MemberAccess","referencedDeclaration":5069,"src":"6735:24:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"6725:34:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4555,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"6779:6:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4556,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"6789:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6806:9:23","memberName":"Canceling","nodeType":"MemberAccess","referencedDeclaration":5070,"src":"6789:26:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"6779:36:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6725:90:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4550,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6704:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6704:121:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4561,"nodeType":"ExpressionStatement","src":"6704:121:23"},{"expression":{"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4562,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"6835:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4564,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6846:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"6835:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4565,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"6855:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6872:8:23","memberName":"Canceled","nodeType":"MemberAccess","referencedDeclaration":5071,"src":"6855:25:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"6835:45:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"id":4568,"nodeType":"ExpressionStatement","src":"6835:45:23"},{"expression":{"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4569,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"6890:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4571,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6901:9:23","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":5088,"src":"6890:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4572,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6913:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6919:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"6913:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6890:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4575,"nodeType":"ExpressionStatement","src":"6890:38:23"},{"eventCall":{"arguments":[{"id":4577,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"6952:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4576,"name":"Canceled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"6943:8:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6943:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4579,"nodeType":"EmitStatement","src":"6938:19:23"}]},"documentation":{"id":4530,"nodeType":"StructuredDocumentation","src":"6287:238:23","text":" cancel2 apporves the cancellation request by relayer\n relayer can pay the withdrawal to disregard the cancellation request\n relayer can reject a pending withdrawal as well\n @param _wid the withdrwal id"},"functionSelector":"c19dd320","id":4581,"implemented":true,"kind":"function","modifiers":[{"id":4535,"kind":"modifierInvocation","modifierName":{"id":4534,"name":"OnlyRelayer","nameLocations":["6570:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":5282,"src":"6570:11:23"},"nodeType":"ModifierInvocation","src":"6570:11:23"}],"name":"cancel2","nameLocation":"6539:7:23","nodeType":"FunctionDefinition","parameters":{"id":4533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"mutability":"mutable","name":"_wid","nameLocation":"6555:4:23","nodeType":"VariableDeclaration","scope":4581,"src":"6547:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4531,"name":"uint256","nodeType":"ElementaryTypeName","src":"6547:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6546:14:23"},"returnParameters":{"id":4536,"nodeType":"ParameterList","parameters":[],"src":"6582:0:23"},"scope":4920,"src":"6530:434:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5147],"body":{"id":4649,"nodeType":"Block","src":"7140:535:23","statements":[{"assignments":[4589],"declarations":[{"constant":false,"id":4589,"mutability":"mutable","name":"withdrawal","nameLocation":"7169:10:23","nodeType":"VariableDeclaration","scope":4649,"src":"7150:29:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"},"typeName":{"id":4588,"nodeType":"UserDefinedTypeName","pathNode":{"id":4587,"name":"Withdrawal","nameLocations":["7150:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5094,"src":"7150:10:23"},"referencedDeclaration":5094,"src":"7150:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"}},"visibility":"internal"}],"id":4593,"initialValue":{"baseExpression":{"id":4590,"name":"withdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"7182:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal storage ref[] storage ref"}},"id":4592,"indexExpression":{"id":4591,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"7194:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7182:17:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage","typeString":"struct IBridge.Withdrawal storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7150:49:23"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4594,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"7214:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7225:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"7214:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4596,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"7235:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7252:8:23","memberName":"Canceled","nodeType":"MemberAccess","referencedDeclaration":5071,"src":"7235:25:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"7214:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4603,"nodeType":"IfStatement","src":"7210:95:23","trueBody":{"id":4602,"nodeType":"Block","src":"7262:43:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4599,"name":"Forbidden","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"7283:9:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7283:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4601,"nodeType":"RevertStatement","src":"7276:18:23"}]}},{"expression":{"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4604,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"7314:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4606,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7325:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"7314:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4607,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"7334:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7351:8:23","memberName":"Refunded","nodeType":"MemberAccess","referencedDeclaration":5072,"src":"7334:25:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"7314:45:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"id":4610,"nodeType":"ExpressionStatement","src":"7314:45:23"},{"assignments":[4612],"declarations":[{"constant":false,"id":4612,"mutability":"mutable","name":"owner","nameLocation":"7386:5:23","nodeType":"VariableDeclaration","scope":4649,"src":"7370:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4611,"name":"address","nodeType":"ElementaryTypeName","src":"7370:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":4618,"initialValue":{"arguments":[{"expression":{"id":4615,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"7402:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7413:6:23","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":5080,"src":"7402:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7394:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4613,"name":"address","nodeType":"ElementaryTypeName","src":"7394:8:23","stateMutability":"payable","typeDescriptions":{}}},"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7394:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"7370:50:23"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4619,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"7434:5:23","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4620,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7443:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7447:6:23","memberName":"sender","nodeType":"MemberAccess","src":"7443:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7434:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4627,"nodeType":"IfStatement","src":"7430:71:23","trueBody":{"id":4626,"nodeType":"Block","src":"7455:46:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4623,"name":"AccessDenied","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"7476:12:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7476:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4625,"nodeType":"RevertStatement","src":"7469:21:23"}]}},{"expression":{"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4628,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"7510:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7521:9:23","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":5088,"src":"7510:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4631,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7533:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7539:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"7533:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7510:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4634,"nodeType":"ExpressionStatement","src":"7510:38:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4638,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"7606:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4639,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7617:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5082,"src":"7606:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4640,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"7626:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4641,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7637:3:23","memberName":"tax","nodeType":"MemberAccess","referencedDeclaration":5084,"src":"7626:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7606:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4635,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"7590:5:23","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7596:9:23","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"7590:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4644,"nodeType":"ExpressionStatement","src":"7590:51:23"},{"eventCall":{"arguments":[{"id":4646,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"7663:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4645,"name":"Refund","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5051,"src":"7656:6:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7656:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4648,"nodeType":"EmitStatement","src":"7651:17:23"}]},"documentation":{"id":4582,"nodeType":"StructuredDocumentation","src":"6970:126:23","text":" refund refunds the amount of the canceled withdrawal to the origin user\n @param _wid the withdrwal id"},"functionSelector":"278ecde1","id":4650,"implemented":true,"kind":"function","modifiers":[],"name":"refund","nameLocation":"7110:6:23","nodeType":"FunctionDefinition","parameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"mutability":"mutable","name":"_wid","nameLocation":"7125:4:23","nodeType":"VariableDeclaration","scope":4650,"src":"7117:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"7117:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7116:14:23"},"returnParameters":{"id":4586,"nodeType":"ParameterList","parameters":[],"src":"7140:0:23"},"scope":4920,"src":"7101:574:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5163],"body":{"id":4750,"nodeType":"Block","src":"8168:749:23","statements":[{"assignments":[4666],"declarations":[{"constant":false,"id":4666,"mutability":"mutable","name":"withdrawal","nameLocation":"8197:10:23","nodeType":"VariableDeclaration","scope":4750,"src":"8178:29:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"},"typeName":{"id":4665,"nodeType":"UserDefinedTypeName","pathNode":{"id":4664,"name":"Withdrawal","nameLocations":["8178:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5094,"src":"8178:10:23"},"referencedDeclaration":5094,"src":"8178:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal"}},"visibility":"internal"}],"id":4670,"initialValue":{"baseExpression":{"id":4667,"name":"withdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"8210:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$5094_storage_$dyn_storage","typeString":"struct IBridge.Withdrawal storage ref[] storage ref"}},"id":4669,"indexExpression":{"id":4668,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"8222:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8210:17:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage","typeString":"struct IBridge.Withdrawal storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8178:49:23"},{"assignments":[4673],"declarations":[{"constant":false,"id":4673,"mutability":"mutable","name":"status","nameLocation":"8255:6:23","nodeType":"VariableDeclaration","scope":4750,"src":"8238:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"typeName":{"id":4672,"nodeType":"UserDefinedTypeName","pathNode":{"id":4671,"name":"WithdrawalStatus","nameLocations":["8238:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":5074,"src":"8238:16:23"},"referencedDeclaration":5074,"src":"8238:16:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"visibility":"internal"}],"id":4676,"initialValue":{"expression":{"id":4674,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8264:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4675,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8275:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"8264:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"VariableDeclarationStatement","src":"8238:43:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4678,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"8312:6:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4679,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"8322:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8339:7:23","memberName":"Pending","nodeType":"MemberAccess","referencedDeclaration":5069,"src":"8322:24:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"8312:34:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4682,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"8366:6:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4683,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"8376:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8393:9:23","memberName":"Canceling","nodeType":"MemberAccess","referencedDeclaration":5070,"src":"8376:26:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"8366:36:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8312:90:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8291:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":4687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8291:121:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4688,"nodeType":"ExpressionStatement","src":"8291:121:23"},{"expression":{"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4689,"name":"receipts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"8423:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Receipt_$5101_storage_$","typeString":"mapping(uint256 => struct IBridge.Receipt storage ref)"}},"id":4691,"indexExpression":{"id":4690,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"8432:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8423:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$5101_storage","typeString":"struct IBridge.Receipt storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4693,"name":"_txid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"8448:5:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4694,"name":"_txout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"8455:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":4695,"name":"_received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"8463:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4692,"name":"Receipt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5101,"src":"8440:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Receipt_$5101_storage_ptr_$","typeString":"type(struct IBridge.Receipt storage pointer)"}},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8440:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$5101_memory_ptr","typeString":"struct IBridge.Receipt memory"}},"src":"8423:50:23","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$5101_storage","typeString":"struct IBridge.Receipt storage ref"}},"id":4698,"nodeType":"ExpressionStatement","src":"8423:50:23"},{"expression":{"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4699,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8483:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8494:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":5093,"src":"8483:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4702,"name":"WithdrawalStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"8503:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_WithdrawalStatus_$5074_$","typeString":"type(enum IBridge.WithdrawalStatus)"}},"id":4703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8520:4:23","memberName":"Paid","nodeType":"MemberAccess","referencedDeclaration":5073,"src":"8503:21:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"src":"8483:41:23","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"id":4705,"nodeType":"ExpressionStatement","src":"8483:41:23"},{"expression":{"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4706,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8534:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4708,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8545:9:23","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":5088,"src":"8534:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4709,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8557:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8563:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"8557:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8534:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4712,"nodeType":"ExpressionStatement","src":"8534:38:23"},{"assignments":[4714],"declarations":[{"constant":false,"id":4714,"mutability":"mutable","name":"tax","nameLocation":"8621:3:23","nodeType":"VariableDeclaration","scope":4750,"src":"8613:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4713,"name":"uint256","nodeType":"ElementaryTypeName","src":"8613:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4717,"initialValue":{"expression":{"id":4715,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8627:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4716,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8638:3:23","memberName":"tax","nodeType":"MemberAccess","referencedDeclaration":5084,"src":"8627:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8613:28:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4718,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"8655:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8661:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8655:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4730,"nodeType":"IfStatement","src":"8651:88:23","trueBody":{"id":4729,"nodeType":"Block","src":"8664:75:23","statements":[{"expression":{"arguments":[{"id":4726,"name":"tax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"8724:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":4721,"name":"PreDeployedAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"8678:20:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PreDeployedAddresses_$5260_$","typeString":"type(library PreDeployedAddresses)"}},"id":4724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8699:14:23","memberName":"GoatFoundation","nodeType":"MemberAccess","referencedDeclaration":5247,"src":"8678:35:23","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8714:9:23","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"8678:45:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8678:50:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4728,"nodeType":"ExpressionStatement","src":"8678:50:23"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":[],"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"8800:10:23","typeDescriptions":{"typeIdentifier":"t_function_creation_payable$__$returns$_t_contract$_Burner_$5300_$","typeString":"function () payable returns (contract Burner)"},"typeName":{"id":4732,"nodeType":"UserDefinedTypeName","pathNode":{"id":4731,"name":"Burner","nameLocations":["8804:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":5300,"src":"8804:6:23"},"referencedDeclaration":5300,"src":"8804:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_Burner_$5300","typeString":"contract Burner"}}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value","salt"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":4734,"name":"withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8818:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$5094_storage_ptr","typeString":"struct IBridge.Withdrawal storage pointer"}},"id":4735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8829:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":5082,"src":"8818:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"307830","id":4738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8851:3:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8843:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8843:7:23","typeDescriptions":{}}},"id":4739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8843:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"src":"8800:56:23","typeDescriptions":{"typeIdentifier":"t_function_creation_payable$__$returns$_t_contract$_Burner_$5300_$valuesalt","typeString":"function () payable returns (contract Burner)"}},"id":4741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8800:58:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Burner_$5300","typeString":"contract Burner"}},"id":4742,"nodeType":"ExpressionStatement","src":"8800:58:23"},{"eventCall":{"arguments":[{"id":4744,"name":"_wid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"8879:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4745,"name":"_txid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"8885:5:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4746,"name":"_txout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"8892:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":4747,"name":"_received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"8900:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4743,"name":"Paid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"8874:4:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_uint32_$_t_uint256_$returns$__$","typeString":"function (uint256,bytes32,uint32,uint256)"}},"id":4748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8874:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4749,"nodeType":"EmitStatement","src":"8869:41:23"}]},"documentation":{"id":4651,"nodeType":"StructuredDocumentation","src":"7681:346:23","text":" paid finalizes the withdrawal request and burns the withdrawal amount from network\n It aslo transfers the tax to GF address if the tax is enabled\n @param _wid withdrawal id\n @param _txid the withdrawal txid(little endian)\n @param _txout the tx output index\n @param _received the actual paid amount"},"functionSelector":"b670ab5e","id":4751,"implemented":true,"kind":"function","modifiers":[{"id":4662,"kind":"modifierInvocation","modifierName":{"id":4661,"name":"OnlyRelayer","nameLocations":["8156:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":5282,"src":"8156:11:23"},"nodeType":"ModifierInvocation","src":"8156:11:23"}],"name":"paid","nameLocation":"8041:4:23","nodeType":"FunctionDefinition","parameters":{"id":4660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4653,"mutability":"mutable","name":"_wid","nameLocation":"8063:4:23","nodeType":"VariableDeclaration","scope":4751,"src":"8055:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4652,"name":"uint256","nodeType":"ElementaryTypeName","src":"8055:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4655,"mutability":"mutable","name":"_txid","nameLocation":"8085:5:23","nodeType":"VariableDeclaration","scope":4751,"src":"8077:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4654,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8077:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4657,"mutability":"mutable","name":"_txout","nameLocation":"8107:6:23","nodeType":"VariableDeclaration","scope":4751,"src":"8100:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4656,"name":"uint32","nodeType":"ElementaryTypeName","src":"8100:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4659,"mutability":"mutable","name":"_received","nameLocation":"8131:9:23","nodeType":"VariableDeclaration","scope":4751,"src":"8123:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4658,"name":"uint256","nodeType":"ElementaryTypeName","src":"8123:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8045:101:23"},"returnParameters":{"id":4663,"nodeType":"ParameterList","parameters":[],"src":"8168:0:23"},"scope":4920,"src":"8032:885:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5208],"body":{"id":4806,"nodeType":"Block","src":"9021:355:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4761,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4753,"src":"9035:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4762,"name":"maxBasePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"9041:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9035:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4768,"nodeType":"IfStatement","src":"9031:69:23","trueBody":{"id":4767,"nodeType":"Block","src":"9056:44:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4764,"name":"TaxTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"9077:10:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9077:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4766,"nodeType":"RevertStatement","src":"9070:19:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4769,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"9114:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":4770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9121:7:23","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"src":"9114:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4776,"nodeType":"IfStatement","src":"9110:64:23","trueBody":{"id":4775,"nodeType":"Block","src":"9130:44:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4772,"name":"TaxTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"9151:10:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9151:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4774,"nodeType":"RevertStatement","src":"9144:19:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4777,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4753,"src":"9188:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9194:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9188:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":4782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4780,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"9199:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9207:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:9:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9188:20:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4788,"nodeType":"IfStatement","src":"9184:72:23","trueBody":{"id":4787,"nodeType":"Block","src":"9210:46:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4784,"name":"MalformedTax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5201,"src":"9231:12:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9231:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4786,"nodeType":"RevertStatement","src":"9224:21:23"}]}},{"expression":{"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4789,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"9266:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4791,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9272:12:23","memberName":"depositTaxBP","nodeType":"MemberAccess","referencedDeclaration":5186,"src":"9266:18:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4792,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4753,"src":"9287:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"9266:24:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4794,"nodeType":"ExpressionStatement","src":"9266:24:23"},{"expression":{"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4795,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"9300:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4797,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9306:13:23","memberName":"maxDepositTax","nodeType":"MemberAccess","referencedDeclaration":5188,"src":"9300:19:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4798,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"9322:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"9300:26:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4800,"nodeType":"ExpressionStatement","src":"9300:26:23"},{"eventCall":{"arguments":[{"id":4802,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4753,"src":"9359:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4803,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4755,"src":"9364:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4801,"name":"DepositTaxUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5172,"src":"9341:17:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_uint64_$returns$__$","typeString":"function (uint16,uint64)"}},"id":4804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9341:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4805,"nodeType":"EmitStatement","src":"9336:33:23"}]},"functionSelector":"b3f33eda","id":4807,"implemented":true,"kind":"function","modifiers":[{"id":4759,"kind":"modifierInvocation","modifierName":{"id":4758,"name":"onlyOwner","nameLocations":["9011:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"9011:9:23"},"nodeType":"ModifierInvocation","src":"9011:9:23"}],"name":"setDepositTax","nameLocation":"8932:13:23","nodeType":"FunctionDefinition","overrides":{"id":4757,"nodeType":"OverrideSpecifier","overrides":[],"src":"9002:8:23"},"parameters":{"id":4756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4753,"mutability":"mutable","name":"_bp","nameLocation":"8962:3:23","nodeType":"VariableDeclaration","scope":4807,"src":"8955:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4752,"name":"uint16","nodeType":"ElementaryTypeName","src":"8955:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4755,"mutability":"mutable","name":"_max","nameLocation":"8982:4:23","nodeType":"VariableDeclaration","scope":4807,"src":"8975:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4754,"name":"uint64","nodeType":"ElementaryTypeName","src":"8975:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8945:47:23"},"returnParameters":{"id":4760,"nodeType":"ParameterList","parameters":[],"src":"9021:0:23"},"scope":4920,"src":"8923:453:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5215],"body":{"id":4862,"nodeType":"Block","src":"9483:364:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4817,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"9497:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4818,"name":"maxBasePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"9503:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9497:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4824,"nodeType":"IfStatement","src":"9493:69:23","trueBody":{"id":4823,"nodeType":"Block","src":"9518:44:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4820,"name":"TaxTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"9539:10:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9539:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4822,"nodeType":"RevertStatement","src":"9532:19:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4825,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4811,"src":"9576:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":4826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9583:7:23","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"src":"9576:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4832,"nodeType":"IfStatement","src":"9572:64:23","trueBody":{"id":4831,"nodeType":"Block","src":"9592:44:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4828,"name":"TaxTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"9613:10:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9613:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4830,"nodeType":"RevertStatement","src":"9606:19:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4833,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"9650:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9656:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9650:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":4838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4836,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4811,"src":"9661:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9669:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9661:9:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9650:20:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4844,"nodeType":"IfStatement","src":"9646:72:23","trueBody":{"id":4843,"nodeType":"Block","src":"9672:46:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4840,"name":"MalformedTax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5201,"src":"9693:12:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9693:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4842,"nodeType":"RevertStatement","src":"9686:21:23"}]}},{"expression":{"id":4849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4845,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"9728:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9734:15:23","memberName":"withdrawalTaxBP","nodeType":"MemberAccess","referencedDeclaration":5190,"src":"9728:21:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4848,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"9752:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"9728:27:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4850,"nodeType":"ExpressionStatement","src":"9728:27:23"},{"expression":{"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4851,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"9765:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4853,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9771:16:23","memberName":"maxWithdrawalTax","nodeType":"MemberAccess","referencedDeclaration":5192,"src":"9765:22:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4854,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4811,"src":"9790:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"9765:29:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4856,"nodeType":"ExpressionStatement","src":"9765:29:23"},{"eventCall":{"arguments":[{"id":4858,"name":"_bp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"9830:3:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4859,"name":"_max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4811,"src":"9835:4:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4857,"name":"WithdrawalTaxUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5178,"src":"9809:20:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_uint64_$returns$__$","typeString":"function (uint16,uint64)"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9809:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4861,"nodeType":"EmitStatement","src":"9804:36:23"}]},"functionSelector":"8aa4af89","id":4863,"implemented":true,"kind":"function","modifiers":[{"id":4815,"kind":"modifierInvocation","modifierName":{"id":4814,"name":"onlyOwner","nameLocations":["9473:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"9473:9:23"},"nodeType":"ModifierInvocation","src":"9473:9:23"}],"name":"setWithdrawalTax","nameLocation":"9391:16:23","nodeType":"FunctionDefinition","overrides":{"id":4813,"nodeType":"OverrideSpecifier","overrides":[],"src":"9464:8:23"},"parameters":{"id":4812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4809,"mutability":"mutable","name":"_bp","nameLocation":"9424:3:23","nodeType":"VariableDeclaration","scope":4863,"src":"9417:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4808,"name":"uint16","nodeType":"ElementaryTypeName","src":"9417:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4811,"mutability":"mutable","name":"_max","nameLocation":"9444:4:23","nodeType":"VariableDeclaration","scope":4863,"src":"9437:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4810,"name":"uint64","nodeType":"ElementaryTypeName","src":"9437:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"9407:47:23"},"returnParameters":{"id":4816,"nodeType":"ParameterList","parameters":[],"src":"9483:0:23"},"scope":4920,"src":"9382:465:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5220],"body":{"id":4888,"nodeType":"Block","src":"9916:131:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4872,"name":"_sec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"9934:4:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9941:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9934:8:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964207468726f74746c652073657474696e67","id":4875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9944:26:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_421dca8797e77bf1356bffec8a2c09bf948fbfd8bade7477d3a22d409eb7116a","typeString":"literal_string \"invalid throttle setting\""},"value":"invalid throttle setting"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_421dca8797e77bf1356bffec8a2c09bf948fbfd8bade7477d3a22d409eb7116a","typeString":"literal_string \"invalid throttle setting\""}],"id":4871,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9926:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9926:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4877,"nodeType":"ExpressionStatement","src":"9926:45:23"},{"expression":{"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4878,"name":"param","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"9981:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Param_$5197_storage","typeString":"struct IBridgeParam.Param storage ref"}},"id":4880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9987:9:23","memberName":"rateLimit","nodeType":"MemberAccess","referencedDeclaration":5184,"src":"9981:15:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4881,"name":"_sec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"9999:4:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"9981:22:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":4883,"nodeType":"ExpressionStatement","src":"9981:22:23"},{"eventCall":{"arguments":[{"id":4885,"name":"_sec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"10035:4:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4884,"name":"RateLimitUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5182,"src":"10018:16:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$returns$__$","typeString":"function (uint16)"}},"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10018:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4887,"nodeType":"EmitStatement","src":"10013:27:23"}]},"functionSelector":"d653d820","id":4889,"implemented":true,"kind":"function","modifiers":[{"id":4869,"kind":"modifierInvocation","modifierName":{"id":4868,"name":"onlyOwner","nameLocations":["9906:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"9906:9:23"},"nodeType":"ModifierInvocation","src":"9906:9:23"}],"name":"setRateLimit","nameLocation":"9862:12:23","nodeType":"FunctionDefinition","overrides":{"id":4867,"nodeType":"OverrideSpecifier","overrides":[],"src":"9897:8:23"},"parameters":{"id":4866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4865,"mutability":"mutable","name":"_sec","nameLocation":"9882:4:23","nodeType":"VariableDeclaration","scope":4889,"src":"9875:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4864,"name":"uint16","nodeType":"ElementaryTypeName","src":"9875:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"9874:13:23"},"returnParameters":{"id":4870,"nodeType":"ParameterList","parameters":[],"src":"9916:0:23"},"scope":4920,"src":"9853:194:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2781],"body":{"id":4918,"nodeType":"Block","src":"10151:166:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4897,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"10180:2:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4899,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"10191:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2782_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2782_$","typeString":"type(contract IERC165)"}],"id":4898,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10186:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10186:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2782","typeString":"type(contract IERC165)"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10200:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"10186:25:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"10180:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4903,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"10227:2:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4905,"name":"IBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5164,"src":"10238:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBridge_$5164_$","typeString":"type(contract IBridge)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IBridge_$5164_$","typeString":"type(contract IBridge)"}],"id":4904,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10233:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10233:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IBridge_$5164","typeString":"type(contract IBridge)"}},"id":4907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10247:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"10233:25:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"10227:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10180:78:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4910,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"10274:2:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4912,"name":"IBridgeParam","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"10285:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBridgeParam_$5221_$","typeString":"type(contract IBridgeParam)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IBridgeParam_$5221_$","typeString":"type(contract IBridgeParam)"}],"id":4911,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10280:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10280:18:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IBridgeParam_$5221","typeString":"type(contract IBridgeParam)"}},"id":4914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10299:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"10280:30:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"10274:36:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10180:130:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4896,"id":4917,"nodeType":"Return","src":"10161:149:23"}]},"functionSelector":"01ffc9a7","id":4919,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"10062:17:23","nodeType":"FunctionDefinition","overrides":{"id":4893,"nodeType":"OverrideSpecifier","overrides":[],"src":"10127:8:23"},"parameters":{"id":4892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4891,"mutability":"mutable","name":"id","nameLocation":"10096:2:23","nodeType":"VariableDeclaration","scope":4919,"src":"10089:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4890,"name":"bytes4","nodeType":"ElementaryTypeName","src":"10089:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"10079:25:23"},"returnParameters":{"id":4896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4919,"src":"10145:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4894,"name":"bool","nodeType":"ElementaryTypeName","src":"10145:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10144:6:23"},"scope":4920,"src":"10053:264:23","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":4921,"src":"611:9708:23","usedErrors":[13,18,1172,1180,5076,5078,5199,5201,5266,5268],"usedEvents":[24,5025,5039,5043,5047,5051,5057,5067,5172,5178,5182]}],"src":"56:10264:23"},"id":23},"contracts/goat/GoatToken.sol":{"ast":{"absolutePath":"contracts/goat/GoatToken.sol","exportedSymbols":{"ERC20":[824],"ERC20Burnable":[948],"ERC20Permit":[1102],"GoatToken":[4952],"Ownable":[147]},"id":4953,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4922,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":4924,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4953,"sourceUnit":148,"src":"58:67:24","symbolAliases":[{"foreign":{"id":4923,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"66:7:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol","id":4926,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4953,"sourceUnit":1103,"src":"127:91:24","symbolAliases":[{"foreign":{"id":4925,"name":"ERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"135:11:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","id":4928,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4953,"sourceUnit":949,"src":"219:95:24","symbolAliases":[{"foreign":{"id":4927,"name":"ERC20Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"227:13:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":4930,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4953,"sourceUnit":825,"src":"315:68:24","symbolAliases":[{"foreign":{"id":4929,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"323:5:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4931,"name":"ERC20Permit","nameLocations":["407:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1102,"src":"407:11:24"},"id":4932,"nodeType":"InheritanceSpecifier","src":"407:11:24"},{"baseName":{"id":4933,"name":"ERC20Burnable","nameLocations":["420:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"420:13:24"},"id":4934,"nodeType":"InheritanceSpecifier","src":"420:13:24"},{"baseName":{"id":4935,"name":"Ownable","nameLocations":["435:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"435:7:24"},"id":4936,"nodeType":"InheritanceSpecifier","src":"435:7:24"}],"canonicalName":"GoatToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4952,"linearizedBaseContracts":[4952,147,948,1102,1515,2672,172,1164,824,214,1128,902,1447],"name":"GoatToken","nameLocation":"394:9:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":4950,"nodeType":"Block","src":"553:2:24","statements":[]},"id":4951,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"474f4154","id":4939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"477:6:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_37c469dadd9df9fb454182ffced72eec76a99c56ccde61f27666b040e87df709","typeString":"literal_string \"GOAT\""},"value":"GOAT"},{"hexValue":"474f4154","id":4940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"485:6:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_37c469dadd9df9fb454182ffced72eec76a99c56ccde61f27666b040e87df709","typeString":"literal_string \"GOAT\""},"value":"GOAT"}],"id":4941,"kind":"baseConstructorSpecifier","modifierName":{"id":4938,"name":"ERC20","nameLocations":["471:5:24"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"471:5:24"},"nodeType":"ModifierInvocation","src":"471:21:24"},{"arguments":[{"expression":{"id":4943,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"509:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"513:6:24","memberName":"sender","nodeType":"MemberAccess","src":"509:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4945,"kind":"baseConstructorSpecifier","modifierName":{"id":4942,"name":"Ownable","nameLocations":["501:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"501:7:24"},"nodeType":"ModifierInvocation","src":"501:19:24"},{"arguments":[{"hexValue":"474f4154","id":4947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"541:6:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_37c469dadd9df9fb454182ffced72eec76a99c56ccde61f27666b040e87df709","typeString":"literal_string \"GOAT\""},"value":"GOAT"}],"id":4948,"kind":"baseConstructorSpecifier","modifierName":{"id":4946,"name":"ERC20Permit","nameLocations":["529:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1102,"src":"529:11:24"},"nodeType":"ModifierInvocation","src":"529:19:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4937,"nodeType":"ParameterList","parameters":[],"src":"460:2:24"},"returnParameters":{"id":4949,"nodeType":"ParameterList","parameters":[],"src":"553:0:24"},"scope":4952,"src":"449:106:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4953,"src":"385:172:24","usedErrors":[13,18,184,189,194,203,208,213,979,986,1457,1529,1531,2108,2113,2118],"usedEvents":[24,152,836,845]}],"src":"32:526:24"},"id":24},"contracts/interfaces/Bitcoin.sol":{"ast":{"absolutePath":"contracts/interfaces/Bitcoin.sol","exportedSymbols":{"IBitcoin":[4986]},"id":4987,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4954,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IBitcoin","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4986,"linearizedBaseContracts":[4986],"name":"IBitcoin","nameLocation":"69:8:25","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"dd5483f1119d050d70b0fe3ed9db0b5f41b3ec55838346cbb624efe0565b0133","id":4958,"name":"NewBlockHash","nameLocation":"90:12:25","nodeType":"EventDefinition","parameters":{"id":4957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4956,"indexed":false,"mutability":"mutable","name":"height","nameLocation":"111:6:25","nodeType":"VariableDeclaration","scope":4958,"src":"103:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4955,"name":"uint256","nodeType":"ElementaryTypeName","src":"103:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"102:16:25"},"src":"84:35:25"},{"functionSelector":"26a6557a","id":4963,"implemented":false,"kind":"function","modifiers":[],"name":"startHeight","nameLocation":"134:11:25","nodeType":"FunctionDefinition","parameters":{"id":4959,"nodeType":"ParameterList","parameters":[],"src":"145:2:25"},"returnParameters":{"id":4962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4961,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4963,"src":"171:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4960,"name":"uint256","nodeType":"ElementaryTypeName","src":"171:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"170:9:25"},"scope":4986,"src":"125:55:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e405bbc3","id":4968,"implemented":false,"kind":"function","modifiers":[],"name":"latestHeight","nameLocation":"195:12:25","nodeType":"FunctionDefinition","parameters":{"id":4964,"nodeType":"ParameterList","parameters":[],"src":"207:2:25"},"returnParameters":{"id":4967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4968,"src":"233:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4965,"name":"uint256","nodeType":"ElementaryTypeName","src":"233:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"232:9:25"},"scope":4986,"src":"186:56:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"85df51fd","id":4975,"implemented":false,"kind":"function","modifiers":[],"name":"blockHash","nameLocation":"257:9:25","nodeType":"FunctionDefinition","parameters":{"id":4971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4970,"mutability":"mutable","name":"_height","nameLocation":"275:7:25","nodeType":"VariableDeclaration","scope":4975,"src":"267:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4969,"name":"uint256","nodeType":"ElementaryTypeName","src":"267:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"266:17:25"},"returnParameters":{"id":4974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4975,"src":"307:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"307:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"306:9:25"},"scope":4986,"src":"248:68:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"94f490bd","id":4980,"implemented":false,"kind":"function","modifiers":[],"name":"newBlockHash","nameLocation":"331:12:25","nodeType":"FunctionDefinition","parameters":{"id":4978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4977,"mutability":"mutable","name":"_hash","nameLocation":"352:5:25","nodeType":"VariableDeclaration","scope":4980,"src":"344:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4976,"name":"bytes32","nodeType":"ElementaryTypeName","src":"344:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"343:15:25"},"returnParameters":{"id":4979,"nodeType":"ParameterList","parameters":[],"src":"367:0:25"},"scope":4986,"src":"322:46:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"107bf28c","id":4985,"implemented":false,"kind":"function","modifiers":[],"name":"networkName","nameLocation":"383:11:25","nodeType":"FunctionDefinition","parameters":{"id":4981,"nodeType":"ParameterList","parameters":[],"src":"394:2:25"},"returnParameters":{"id":4984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4985,"src":"420:13:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4982,"name":"string","nodeType":"ElementaryTypeName","src":"420:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"419:15:25"},"scope":4986,"src":"374:61:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4987,"src":"59:378:25","usedErrors":[],"usedEvents":[4958]}],"src":"33:405:25"},"id":25},"contracts/interfaces/Relayer.sol":{"ast":{"absolutePath":"contracts/interfaces/Relayer.sol","exportedSymbols":{"IRelayer":[5011]},"id":5012,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4988,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IRelayer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5011,"linearizedBaseContracts":[5011],"name":"IRelayer","nameLocation":"68:8:26","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"2940969868a5545331aa91a95aaa97def154a66f4ed34985622a4136be3b1b04","id":4994,"name":"AddedVoter","nameLocation":"89:10:26","nodeType":"EventDefinition","parameters":{"id":4993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4990,"indexed":true,"mutability":"mutable","name":"voter","nameLocation":"116:5:26","nodeType":"VariableDeclaration","scope":4994,"src":"100:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":4989,"name":"bytes20","nodeType":"ElementaryTypeName","src":"100:7:26","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"},{"constant":false,"id":4992,"indexed":false,"mutability":"mutable","name":"keyHash","nameLocation":"131:7:26","nodeType":"VariableDeclaration","scope":4994,"src":"123:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4991,"name":"bytes32","nodeType":"ElementaryTypeName","src":"123:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"99:40:26"},"src":"83:57:26"},{"anonymous":false,"eventSelector":"a4d0070f0847ad2444266e520aecd08cc31d75b1f1facc657f007083f9857778","id":4998,"name":"RemovedVoter","nameLocation":"152:12:26","nodeType":"EventDefinition","parameters":{"id":4997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4996,"indexed":true,"mutability":"mutable","name":"voter","nameLocation":"181:5:26","nodeType":"VariableDeclaration","scope":4998,"src":"165:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":4995,"name":"bytes20","nodeType":"ElementaryTypeName","src":"165:7:26","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"164:23:26"},"src":"146:42:26"},{"functionSelector":"d782d4f7","id":5005,"implemented":false,"kind":"function","modifiers":[],"name":"addVoter","nameLocation":"203:8:26","nodeType":"FunctionDefinition","parameters":{"id":5003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"voter","nameLocation":"220:5:26","nodeType":"VariableDeclaration","scope":5005,"src":"212:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":4999,"name":"bytes20","nodeType":"ElementaryTypeName","src":"212:7:26","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"},{"constant":false,"id":5002,"mutability":"mutable","name":"vtkey","nameLocation":"235:5:26","nodeType":"VariableDeclaration","scope":5005,"src":"227:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5001,"name":"bytes32","nodeType":"ElementaryTypeName","src":"227:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"211:30:26"},"returnParameters":{"id":5004,"nodeType":"ParameterList","parameters":[],"src":"250:0:26"},"scope":5011,"src":"194:57:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6b75a2b3","id":5010,"implemented":false,"kind":"function","modifiers":[],"name":"removeVoter","nameLocation":"266:11:26","nodeType":"FunctionDefinition","parameters":{"id":5008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5007,"mutability":"mutable","name":"voter","nameLocation":"286:5:26","nodeType":"VariableDeclaration","scope":5010,"src":"278:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":5006,"name":"bytes20","nodeType":"ElementaryTypeName","src":"278:7:26","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"277:15:26"},"returnParameters":{"id":5009,"nodeType":"ParameterList","parameters":[],"src":"301:0:26"},"scope":5011,"src":"257:45:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5012,"src":"58:246:26","usedErrors":[],"usedEvents":[4994,4998]}],"src":"32:273:26"},"id":26},"contracts/interfaces/bridge/Bridge.sol":{"ast":{"absolutePath":"contracts/interfaces/bridge/Bridge.sol","exportedSymbols":{"IBridge":[5164]},"id":5165,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5013,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IBridge","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5164,"linearizedBaseContracts":[5164],"name":"IBridge","nameLocation":"68:7:27","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"bc0e2d4f64f63e9c6b07a1665a26f689b20e42e836968119499db41c2d315efa","id":5025,"name":"Deposit","nameLocation":"88:7:27","nodeType":"EventDefinition","parameters":{"id":5024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5015,"indexed":true,"mutability":"mutable","name":"target","nameLocation":"121:6:27","nodeType":"VariableDeclaration","scope":5025,"src":"105:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5014,"name":"address","nodeType":"ElementaryTypeName","src":"105:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5017,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"153:6:27","nodeType":"VariableDeclaration","scope":5025,"src":"137:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5016,"name":"uint256","nodeType":"ElementaryTypeName","src":"137:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5019,"indexed":false,"mutability":"mutable","name":"txid","nameLocation":"177:4:27","nodeType":"VariableDeclaration","scope":5025,"src":"169:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"169:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5021,"indexed":false,"mutability":"mutable","name":"txout","nameLocation":"198:5:27","nodeType":"VariableDeclaration","scope":5025,"src":"191:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5020,"name":"uint32","nodeType":"ElementaryTypeName","src":"191:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5023,"indexed":false,"mutability":"mutable","name":"tax","nameLocation":"221:3:27","nodeType":"VariableDeclaration","scope":5025,"src":"213:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5022,"name":"uint256","nodeType":"ElementaryTypeName","src":"213:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"95:135:27"},"src":"82:149:27"},{"anonymous":false,"eventSelector":"a7aa0bf5f2a5106eb711bca96c8ea6ea0d99ec2c496d4d2c5dc0af8217d43c7c","id":5039,"name":"Withdraw","nameLocation":"243:8:27","nodeType":"EventDefinition","parameters":{"id":5038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5027,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"277:2:27","nodeType":"VariableDeclaration","scope":5039,"src":"261:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5026,"name":"uint256","nodeType":"ElementaryTypeName","src":"261:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5029,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"305:4:27","nodeType":"VariableDeclaration","scope":5039,"src":"289:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5028,"name":"address","nodeType":"ElementaryTypeName","src":"289:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5031,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"327:6:27","nodeType":"VariableDeclaration","scope":5039,"src":"319:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5030,"name":"uint256","nodeType":"ElementaryTypeName","src":"319:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5033,"indexed":false,"mutability":"mutable","name":"tax","nameLocation":"351:3:27","nodeType":"VariableDeclaration","scope":5039,"src":"343:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5032,"name":"uint256","nodeType":"ElementaryTypeName","src":"343:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5035,"indexed":false,"mutability":"mutable","name":"maxTxPrice","nameLocation":"372:10:27","nodeType":"VariableDeclaration","scope":5039,"src":"364:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5034,"name":"uint256","nodeType":"ElementaryTypeName","src":"364:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5037,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"399:8:27","nodeType":"VariableDeclaration","scope":5039,"src":"392:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5036,"name":"string","nodeType":"ElementaryTypeName","src":"392:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"251:162:27"},"src":"237:177:27"},{"anonymous":false,"eventSelector":"0106f4416537efff55311ef5e2f9c2a48204fcf84731f2b9d5091d23fc52160c","id":5043,"name":"Canceling","nameLocation":"426:9:27","nodeType":"EventDefinition","parameters":{"id":5042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5041,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"452:2:27","nodeType":"VariableDeclaration","scope":5043,"src":"436:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5040,"name":"uint256","nodeType":"ElementaryTypeName","src":"436:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"435:20:27"},"src":"420:36:27"},{"anonymous":false,"eventSelector":"829a8683c544ad289ce92d3ce06e9ebad69b18a6916e60ec766c2c217461d8e9","id":5047,"name":"Canceled","nameLocation":"468:8:27","nodeType":"EventDefinition","parameters":{"id":5046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5045,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"493:2:27","nodeType":"VariableDeclaration","scope":5047,"src":"477:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5044,"name":"uint256","nodeType":"ElementaryTypeName","src":"477:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"476:20:27"},"src":"462:35:27"},{"anonymous":false,"eventSelector":"2e1897b0591d764356194f7a795238a87c1987c7a877568e50d829d547c92b97","id":5051,"name":"Refund","nameLocation":"509:6:27","nodeType":"EventDefinition","parameters":{"id":5050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5049,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"532:2:27","nodeType":"VariableDeclaration","scope":5051,"src":"516:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5048,"name":"uint256","nodeType":"ElementaryTypeName","src":"516:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"515:20:27"},"src":"503:33:27"},{"anonymous":false,"eventSelector":"e6190c43c634720bcd5b72bb0b920b88f8d0a15ae7e5dcbb0582c1bb2f98df4b","id":5057,"name":"RBF","nameLocation":"548:3:27","nodeType":"EventDefinition","parameters":{"id":5056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5053,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"568:2:27","nodeType":"VariableDeclaration","scope":5057,"src":"552:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5052,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5055,"indexed":false,"mutability":"mutable","name":"maxTxPrice","nameLocation":"580:10:27","nodeType":"VariableDeclaration","scope":5057,"src":"572:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5054,"name":"uint256","nodeType":"ElementaryTypeName","src":"572:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"551:40:27"},"src":"542:50:27"},{"anonymous":false,"eventSelector":"b74f5dbf34aabe02f20ff775b898acf1a9f70e4fbd48ad50548acae86e1ccd78","id":5067,"name":"Paid","nameLocation":"604:4:27","nodeType":"EventDefinition","parameters":{"id":5066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5059,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"625:2:27","nodeType":"VariableDeclaration","scope":5067,"src":"609:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5058,"name":"uint256","nodeType":"ElementaryTypeName","src":"609:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5061,"indexed":false,"mutability":"mutable","name":"txid","nameLocation":"637:4:27","nodeType":"VariableDeclaration","scope":5067,"src":"629:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"629:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5063,"indexed":false,"mutability":"mutable","name":"txout","nameLocation":"650:5:27","nodeType":"VariableDeclaration","scope":5067,"src":"643:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5062,"name":"uint32","nodeType":"ElementaryTypeName","src":"643:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5065,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"665:5:27","nodeType":"VariableDeclaration","scope":5067,"src":"657:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5064,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"608:63:27"},"src":"598:74:27"},{"canonicalName":"IBridge.WithdrawalStatus","id":5074,"members":[{"id":5068,"name":"Invalid","nameLocation":"710:7:27","nodeType":"EnumValue","src":"710:7:27"},{"id":5069,"name":"Pending","nameLocation":"727:7:27","nodeType":"EnumValue","src":"727:7:27"},{"id":5070,"name":"Canceling","nameLocation":"744:9:27","nodeType":"EnumValue","src":"744:9:27"},{"id":5071,"name":"Canceled","nameLocation":"763:8:27","nodeType":"EnumValue","src":"763:8:27"},{"id":5072,"name":"Refunded","nameLocation":"781:8:27","nodeType":"EnumValue","src":"781:8:27"},{"id":5073,"name":"Paid","nameLocation":"799:4:27","nodeType":"EnumValue","src":"799:4:27"}],"name":"WithdrawalStatus","nameLocation":"683:16:27","nodeType":"EnumDefinition","src":"678:131:27"},{"errorSelector":"a74c1c5f","id":5076,"name":"RateLimitExceeded","nameLocation":"821:17:27","nodeType":"ErrorDefinition","parameters":{"id":5075,"nodeType":"ParameterList","parameters":[],"src":"838:2:27"},"src":"815:26:27"},{"errorSelector":"e6c4247b","id":5078,"name":"InvalidAddress","nameLocation":"852:14:27","nodeType":"ErrorDefinition","parameters":{"id":5077,"nodeType":"ParameterList","parameters":[],"src":"866:2:27"},"src":"846:23:27"},{"canonicalName":"IBridge.Withdrawal","id":5094,"members":[{"constant":false,"id":5080,"mutability":"mutable","name":"sender","nameLocation":"911:6:27","nodeType":"VariableDeclaration","scope":5094,"src":"903:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5079,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5082,"mutability":"mutable","name":"amount","nameLocation":"935:6:27","nodeType":"VariableDeclaration","scope":5094,"src":"927:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5081,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5084,"mutability":"mutable","name":"tax","nameLocation":"978:3:27","nodeType":"VariableDeclaration","scope":5094,"src":"970:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5083,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5086,"mutability":"mutable","name":"maxTxPrice","nameLocation":"1026:10:27","nodeType":"VariableDeclaration","scope":5094,"src":"1018:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5085,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5088,"mutability":"mutable","name":"updatedAt","nameLocation":"1054:9:27","nodeType":"VariableDeclaration","scope":5094,"src":"1046:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5087,"name":"uint256","nodeType":"ElementaryTypeName","src":"1046:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5090,"mutability":"mutable","name":"receiver","nameLocation":"1080:8:27","nodeType":"VariableDeclaration","scope":5094,"src":"1073:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5089,"name":"string","nodeType":"ElementaryTypeName","src":"1073:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5093,"mutability":"mutable","name":"status","nameLocation":"1115:6:27","nodeType":"VariableDeclaration","scope":5094,"src":"1098:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"},"typeName":{"id":5092,"nodeType":"UserDefinedTypeName","pathNode":{"id":5091,"name":"WithdrawalStatus","nameLocations":["1098:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":5074,"src":"1098:16:27"},"referencedDeclaration":5074,"src":"1098:16:27","typeDescriptions":{"typeIdentifier":"t_enum$_WithdrawalStatus_$5074","typeString":"enum IBridge.WithdrawalStatus"}},"visibility":"internal"}],"name":"Withdrawal","nameLocation":"882:10:27","nodeType":"StructDefinition","scope":5164,"src":"875:253:27","visibility":"public"},{"canonicalName":"IBridge.Receipt","id":5101,"members":[{"constant":false,"id":5096,"mutability":"mutable","name":"txid","nameLocation":"1194:4:27","nodeType":"VariableDeclaration","scope":5101,"src":"1186:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5095,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1186:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5098,"mutability":"mutable","name":"txout","nameLocation":"1215:5:27","nodeType":"VariableDeclaration","scope":5101,"src":"1208:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5097,"name":"uint32","nodeType":"ElementaryTypeName","src":"1208:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5100,"mutability":"mutable","name":"received","nameLocation":"1238:8:27","nodeType":"VariableDeclaration","scope":5101,"src":"1230:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5099,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Receipt","nameLocation":"1168:7:27","nodeType":"StructDefinition","scope":5164,"src":"1161:92:27","visibility":"public"},{"functionSelector":"1ccc92c7","id":5110,"implemented":false,"kind":"function","modifiers":[],"name":"isDeposited","nameLocation":"1268:11:27","nodeType":"FunctionDefinition","parameters":{"id":5106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5103,"mutability":"mutable","name":"txid","nameLocation":"1297:4:27","nodeType":"VariableDeclaration","scope":5110,"src":"1289:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5102,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1289:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5105,"mutability":"mutable","name":"txout","nameLocation":"1318:5:27","nodeType":"VariableDeclaration","scope":5110,"src":"1311:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5104,"name":"uint32","nodeType":"ElementaryTypeName","src":"1311:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1279:50:27"},"returnParameters":{"id":5109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5110,"src":"1353:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5107,"name":"bool","nodeType":"ElementaryTypeName","src":"1353:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1352:6:27"},"scope":5164,"src":"1259:100:27","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b55ada39","id":5123,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"1374:7:27","nodeType":"FunctionDefinition","parameters":{"id":5119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5112,"mutability":"mutable","name":"txid","nameLocation":"1399:4:27","nodeType":"VariableDeclaration","scope":5123,"src":"1391:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1391:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5114,"mutability":"mutable","name":"txout","nameLocation":"1420:5:27","nodeType":"VariableDeclaration","scope":5123,"src":"1413:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5113,"name":"uint32","nodeType":"ElementaryTypeName","src":"1413:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5116,"mutability":"mutable","name":"target","nameLocation":"1443:6:27","nodeType":"VariableDeclaration","scope":5123,"src":"1435:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5115,"name":"address","nodeType":"ElementaryTypeName","src":"1435:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5118,"mutability":"mutable","name":"amount","nameLocation":"1467:6:27","nodeType":"VariableDeclaration","scope":5123,"src":"1459:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1459:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1381:98:27"},"returnParameters":{"id":5122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5123,"src":"1498:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5120,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1497:9:27"},"scope":5164,"src":"1365:142:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a81de869","id":5130,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"1522:8:27","nodeType":"FunctionDefinition","parameters":{"id":5128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5125,"mutability":"mutable","name":"receiver","nameLocation":"1556:8:27","nodeType":"VariableDeclaration","scope":5130,"src":"1540:24:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5124,"name":"string","nodeType":"ElementaryTypeName","src":"1540:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5127,"mutability":"mutable","name":"maxTxPrice","nameLocation":"1581:10:27","nodeType":"VariableDeclaration","scope":5130,"src":"1574:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5126,"name":"uint16","nodeType":"ElementaryTypeName","src":"1574:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1530:67:27"},"returnParameters":{"id":5129,"nodeType":"ParameterList","parameters":[],"src":"1614:0:27"},"scope":5164,"src":"1513:102:27","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"b3dd64dd","id":5137,"implemented":false,"kind":"function","modifiers":[],"name":"replaceByFee","nameLocation":"1630:12:27","nodeType":"FunctionDefinition","parameters":{"id":5135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5132,"mutability":"mutable","name":"id","nameLocation":"1651:2:27","nodeType":"VariableDeclaration","scope":5137,"src":"1643:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5131,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5134,"mutability":"mutable","name":"maxTxPrice","nameLocation":"1662:10:27","nodeType":"VariableDeclaration","scope":5137,"src":"1655:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5133,"name":"uint16","nodeType":"ElementaryTypeName","src":"1655:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1642:31:27"},"returnParameters":{"id":5136,"nodeType":"ParameterList","parameters":[],"src":"1682:0:27"},"scope":5164,"src":"1621:62:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"84a64c12","id":5142,"implemented":false,"kind":"function","modifiers":[],"name":"cancel1","nameLocation":"1698:7:27","nodeType":"FunctionDefinition","parameters":{"id":5140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5139,"mutability":"mutable","name":"id","nameLocation":"1714:2:27","nodeType":"VariableDeclaration","scope":5142,"src":"1706:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5138,"name":"uint256","nodeType":"ElementaryTypeName","src":"1706:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1705:12:27"},"returnParameters":{"id":5141,"nodeType":"ParameterList","parameters":[],"src":"1726:0:27"},"scope":5164,"src":"1689:38:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"278ecde1","id":5147,"implemented":false,"kind":"function","modifiers":[],"name":"refund","nameLocation":"1742:6:27","nodeType":"FunctionDefinition","parameters":{"id":5145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5144,"mutability":"mutable","name":"id","nameLocation":"1757:2:27","nodeType":"VariableDeclaration","scope":5147,"src":"1749:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5143,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:12:27"},"returnParameters":{"id":5146,"nodeType":"ParameterList","parameters":[],"src":"1769:0:27"},"scope":5164,"src":"1733:37:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c19dd320","id":5152,"implemented":false,"kind":"function","modifiers":[],"name":"cancel2","nameLocation":"1785:7:27","nodeType":"FunctionDefinition","parameters":{"id":5150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5149,"mutability":"mutable","name":"id","nameLocation":"1801:2:27","nodeType":"VariableDeclaration","scope":5152,"src":"1793:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5148,"name":"uint256","nodeType":"ElementaryTypeName","src":"1793:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1792:12:27"},"returnParameters":{"id":5151,"nodeType":"ParameterList","parameters":[],"src":"1813:0:27"},"scope":5164,"src":"1776:38:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b670ab5e","id":5163,"implemented":false,"kind":"function","modifiers":[],"name":"paid","nameLocation":"1829:4:27","nodeType":"FunctionDefinition","parameters":{"id":5161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5154,"mutability":"mutable","name":"id","nameLocation":"1851:2:27","nodeType":"VariableDeclaration","scope":5163,"src":"1843:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5153,"name":"uint256","nodeType":"ElementaryTypeName","src":"1843:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5156,"mutability":"mutable","name":"txid","nameLocation":"1871:4:27","nodeType":"VariableDeclaration","scope":5163,"src":"1863:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1863:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5158,"mutability":"mutable","name":"txout","nameLocation":"1892:5:27","nodeType":"VariableDeclaration","scope":5163,"src":"1885:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5157,"name":"uint32","nodeType":"ElementaryTypeName","src":"1885:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5160,"mutability":"mutable","name":"paid","nameLocation":"1915:4:27","nodeType":"VariableDeclaration","scope":5163,"src":"1907:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1833:92:27"},"returnParameters":{"id":5162,"nodeType":"ParameterList","parameters":[],"src":"1934:0:27"},"scope":5164,"src":"1820:115:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5165,"src":"58:1879:27","usedErrors":[5076,5078],"usedEvents":[5025,5039,5043,5047,5051,5057,5067]}],"src":"32:1906:27"},"id":27},"contracts/interfaces/bridge/BridgeParam.sol":{"ast":{"absolutePath":"contracts/interfaces/bridge/BridgeParam.sol","exportedSymbols":{"IBridgeParam":[5221]},"id":5222,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5166,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IBridgeParam","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5221,"linearizedBaseContracts":[5221],"name":"IBridgeParam","nameLocation":"68:12:28","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"1007ff7aec53e9626ce51f25d4e093f290f60da8019c8cf489f0ae2f21ebf76a","id":5172,"name":"DepositTaxUpdated","nameLocation":"93:17:28","nodeType":"EventDefinition","parameters":{"id":5171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5168,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"118:4:28","nodeType":"VariableDeclaration","scope":5172,"src":"111:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5167,"name":"uint16","nodeType":"ElementaryTypeName","src":"111:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5170,"indexed":false,"mutability":"mutable","name":"max","nameLocation":"131:3:28","nodeType":"VariableDeclaration","scope":5172,"src":"124:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5169,"name":"uint64","nodeType":"ElementaryTypeName","src":"124:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"110:25:28"},"src":"87:49:28"},{"anonymous":false,"eventSelector":"59b73ca79bcb3dcb02c4d2b81e1a2da4c9fd9857ed81cfb16c5431b502f8c71b","id":5178,"name":"WithdrawalTaxUpdated","nameLocation":"147:20:28","nodeType":"EventDefinition","parameters":{"id":5177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5174,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"175:4:28","nodeType":"VariableDeclaration","scope":5178,"src":"168:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5173,"name":"uint16","nodeType":"ElementaryTypeName","src":"168:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5176,"indexed":false,"mutability":"mutable","name":"max","nameLocation":"188:3:28","nodeType":"VariableDeclaration","scope":5178,"src":"181:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5175,"name":"uint64","nodeType":"ElementaryTypeName","src":"181:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"167:25:28"},"src":"141:52:28"},{"anonymous":false,"eventSelector":"e536f709e7276119ff965216f1bbd671ef9ea99059743501129a0c9bec5d37ed","id":5182,"name":"RateLimitUpdated","nameLocation":"204:16:28","nodeType":"EventDefinition","parameters":{"id":5181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5180,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5182,"src":"221:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5179,"name":"uint16","nodeType":"ElementaryTypeName","src":"221:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"220:8:28"},"src":"198:31:28"},{"canonicalName":"IBridgeParam.Param","id":5197,"members":[{"constant":false,"id":5184,"mutability":"mutable","name":"rateLimit","nameLocation":"265:9:28","nodeType":"VariableDeclaration","scope":5197,"src":"258:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5183,"name":"uint16","nodeType":"ElementaryTypeName","src":"258:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5186,"mutability":"mutable","name":"depositTaxBP","nameLocation":"291:12:28","nodeType":"VariableDeclaration","scope":5197,"src":"284:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5185,"name":"uint16","nodeType":"ElementaryTypeName","src":"284:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5188,"mutability":"mutable","name":"maxDepositTax","nameLocation":"320:13:28","nodeType":"VariableDeclaration","scope":5197,"src":"313:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5187,"name":"uint64","nodeType":"ElementaryTypeName","src":"313:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5190,"mutability":"mutable","name":"withdrawalTaxBP","nameLocation":"350:15:28","nodeType":"VariableDeclaration","scope":5197,"src":"343:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5189,"name":"uint16","nodeType":"ElementaryTypeName","src":"343:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5192,"mutability":"mutable","name":"maxWithdrawalTax","nameLocation":"382:16:28","nodeType":"VariableDeclaration","scope":5197,"src":"375:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5191,"name":"uint64","nodeType":"ElementaryTypeName","src":"375:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5194,"mutability":"mutable","name":"_res1","nameLocation":"415:5:28","nodeType":"VariableDeclaration","scope":5197,"src":"408:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5193,"name":"uint16","nodeType":"ElementaryTypeName","src":"408:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5196,"mutability":"mutable","name":"_res2","nameLocation":"437:5:28","nodeType":"VariableDeclaration","scope":5197,"src":"430:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5195,"name":"uint64","nodeType":"ElementaryTypeName","src":"430:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"Param","nameLocation":"242:5:28","nodeType":"StructDefinition","scope":5221,"src":"235:214:28","visibility":"public"},{"errorSelector":"af1ee134","id":5199,"name":"TaxTooHigh","nameLocation":"461:10:28","nodeType":"ErrorDefinition","parameters":{"id":5198,"nodeType":"ParameterList","parameters":[],"src":"471:2:28"},"src":"455:19:28"},{"errorSelector":"fe9ec710","id":5201,"name":"MalformedTax","nameLocation":"486:12:28","nodeType":"ErrorDefinition","parameters":{"id":5200,"nodeType":"ParameterList","parameters":[],"src":"498:2:28"},"src":"480:21:28"},{"functionSelector":"b3f33eda","id":5208,"implemented":false,"kind":"function","modifiers":[],"name":"setDepositTax","nameLocation":"516:13:28","nodeType":"FunctionDefinition","parameters":{"id":5206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5203,"mutability":"mutable","name":"bp","nameLocation":"537:2:28","nodeType":"VariableDeclaration","scope":5208,"src":"530:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5202,"name":"uint16","nodeType":"ElementaryTypeName","src":"530:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5205,"mutability":"mutable","name":"max","nameLocation":"548:3:28","nodeType":"VariableDeclaration","scope":5208,"src":"541:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5204,"name":"uint64","nodeType":"ElementaryTypeName","src":"541:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"529:23:28"},"returnParameters":{"id":5207,"nodeType":"ParameterList","parameters":[],"src":"561:0:28"},"scope":5221,"src":"507:55:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8aa4af89","id":5215,"implemented":false,"kind":"function","modifiers":[],"name":"setWithdrawalTax","nameLocation":"577:16:28","nodeType":"FunctionDefinition","parameters":{"id":5213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5210,"mutability":"mutable","name":"bp","nameLocation":"601:2:28","nodeType":"VariableDeclaration","scope":5215,"src":"594:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5209,"name":"uint16","nodeType":"ElementaryTypeName","src":"594:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5212,"mutability":"mutable","name":"max","nameLocation":"612:3:28","nodeType":"VariableDeclaration","scope":5215,"src":"605:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5211,"name":"uint64","nodeType":"ElementaryTypeName","src":"605:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"593:23:28"},"returnParameters":{"id":5214,"nodeType":"ParameterList","parameters":[],"src":"625:0:28"},"scope":5221,"src":"568:58:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d653d820","id":5220,"implemented":false,"kind":"function","modifiers":[],"name":"setRateLimit","nameLocation":"641:12:28","nodeType":"FunctionDefinition","parameters":{"id":5218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5217,"mutability":"mutable","name":"sec","nameLocation":"661:3:28","nodeType":"VariableDeclaration","scope":5220,"src":"654:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5216,"name":"uint16","nodeType":"ElementaryTypeName","src":"654:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"653:12:28"},"returnParameters":{"id":5219,"nodeType":"ParameterList","parameters":[],"src":"674:0:28"},"scope":5221,"src":"632:43:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5222,"src":"58:619:28","usedErrors":[5199,5201],"usedEvents":[5172,5178,5182]}],"src":"32:646:28"},"id":28},"contracts/library/constants/Executor.sol":{"ast":{"absolutePath":"contracts/library/constants/Executor.sol","exportedSymbols":{"Executor":[5230]},"id":5231,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5223,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:29"},{"abstract":false,"baseContracts":[],"canonicalName":"Executor","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5230,"linearizedBaseContracts":[5230],"name":"Executor","nameLocation":"66:8:29","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5226,"mutability":"constant","name":"Relayer","nameLocation":"107:7:29","nodeType":"VariableDeclaration","scope":5230,"src":"81:86:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5224,"name":"address","nodeType":"ElementaryTypeName","src":"81:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307842633130303030303030303030303030303030303030303030303030303030303030303031303030","id":5225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"125:42:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xBc10000000000000000000000000000000001000"},"visibility":"internal"},{"constant":true,"id":5229,"mutability":"constant","name":"Locking","nameLocation":"200:7:29","nodeType":"VariableDeclaration","scope":5230,"src":"174:86:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5227,"name":"address","nodeType":"ElementaryTypeName","src":"174:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307842433130303030303030303030303030303030303030303030303030303030303030303031303031","id":5228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"218:42:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xBC10000000000000000000000000000000001001"},"visibility":"internal"}],"scope":5231,"src":"58:205:29","usedErrors":[],"usedEvents":[]}],"src":"32:232:29"},"id":29},"contracts/library/constants/Predeployed.sol":{"ast":{"absolutePath":"contracts/library/constants/Predeployed.sol","exportedSymbols":{"PreDeployedAddresses":[5260]},"id":5261,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5232,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:30"},{"abstract":false,"baseContracts":[],"canonicalName":"PreDeployedAddresses","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5260,"linearizedBaseContracts":[5260],"name":"PreDeployedAddresses","nameLocation":"66:20:30","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5235,"mutability":"constant","name":"WrappedGoatBitcoin","nameLocation":"119:18:30","nodeType":"VariableDeclaration","scope":5260,"src":"93:97:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5233,"name":"address","nodeType":"ElementaryTypeName","src":"93:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862433130303030303030303030303030303030303030303030303030303030303030303030303030","id":5234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"148:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbC10000000000000000000000000000000000000"},"visibility":"internal"},{"constant":true,"id":5238,"mutability":"constant","name":"GoatDAO","nameLocation":"223:7:30","nodeType":"VariableDeclaration","scope":5260,"src":"197:86:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5236,"name":"address","nodeType":"ElementaryTypeName","src":"197:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307842433130303030303030303030303030303030303030303030303030303030303030303030446130","id":5237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"241:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xBC10000000000000000000000000000000000Da0"},"visibility":"internal"},{"constant":true,"id":5241,"mutability":"constant","name":"GoatToken","nameLocation":"316:9:30","nodeType":"VariableDeclaration","scope":5260,"src":"290:88:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5239,"name":"address","nodeType":"ElementaryTypeName","src":"290:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862433130303030303030303030303030303030303030303030303030303030303030303030303031","id":5240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"336:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbC10000000000000000000000000000000000001"},"visibility":"internal"},{"constant":true,"id":5247,"mutability":"constant","name":"GoatFoundation","nameLocation":"419:14:30","nodeType":"VariableDeclaration","scope":5260,"src":"385:110:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5242,"name":"address","nodeType":"ElementaryTypeName","src":"385:15:30","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":{"arguments":[{"hexValue":"307842633130303030303030303030303030303030303030303030303030303030303030303030303032","id":5245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"452:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xBc10000000000000000000000000000000000002"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"444:8:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5243,"name":"address","nodeType":"ElementaryTypeName","src":"444:8:30","stateMutability":"payable","typeDescriptions":{}}},"id":5246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"444:51:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":true,"id":5250,"mutability":"constant","name":"Bridge","nameLocation":"528:6:30","nodeType":"VariableDeclaration","scope":5260,"src":"502:85:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5248,"name":"address","nodeType":"ElementaryTypeName","src":"502:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307842433130303030303030303030303030303030303030303030303030303030303030303030303033","id":5249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"545:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xBC10000000000000000000000000000000000003"},"visibility":"internal"},{"constant":true,"id":5253,"mutability":"constant","name":"Locking","nameLocation":"620:7:30","nodeType":"VariableDeclaration","scope":5260,"src":"594:86:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5251,"name":"address","nodeType":"ElementaryTypeName","src":"594:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862433130303030303030303030303030303030303030303030303030303030303030303030303034","id":5252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"638:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbC10000000000000000000000000000000000004"},"visibility":"internal"},{"constant":true,"id":5256,"mutability":"constant","name":"BitcoinBlocks","nameLocation":"713:13:30","nodeType":"VariableDeclaration","scope":5260,"src":"687:92:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5254,"name":"address","nodeType":"ElementaryTypeName","src":"687:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307862633130303030303030303030303030303030303030303030303030303030303030303030303035","id":5255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"737:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xbc10000000000000000000000000000000000005"},"visibility":"internal"},{"constant":true,"id":5259,"mutability":"constant","name":"Relayer","nameLocation":"812:7:30","nodeType":"VariableDeclaration","scope":5260,"src":"786:86:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5257,"name":"address","nodeType":"ElementaryTypeName","src":"786:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307842433130303030303030303030303030303030303030303030303030303030303030303030303036","id":5258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"830:42:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xBC10000000000000000000000000000000000006"},"visibility":"internal"}],"scope":5261,"src":"58:817:30","usedErrors":[],"usedEvents":[]}],"src":"32:844:30"},"id":30},"contracts/library/utils/BaseAccess.sol":{"ast":{"absolutePath":"contracts/library/utils/BaseAccess.sol","exportedSymbols":{"BaseAccess":[5283],"Executor":[5230]},"id":5284,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5262,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:31"},{"absolutePath":"contracts/library/constants/Executor.sol","file":"../constants/Executor.sol","id":5264,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5284,"sourceUnit":5231,"src":"58:51:31","symbolAliases":[{"foreign":{"id":5263,"name":"Executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"66:8:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BaseAccess","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5283,"linearizedBaseContracts":[5283],"name":"BaseAccess","nameLocation":"120:10:31","nodeType":"ContractDefinition","nodes":[{"errorSelector":"4ca88867","id":5266,"name":"AccessDenied","nameLocation":"143:12:31","nodeType":"ErrorDefinition","parameters":{"id":5265,"nodeType":"ParameterList","parameters":[],"src":"155:2:31"},"src":"137:21:31"},{"errorSelector":"ee90c468","id":5268,"name":"Forbidden","nameLocation":"169:9:31","nodeType":"ErrorDefinition","parameters":{"id":5267,"nodeType":"ParameterList","parameters":[],"src":"178:2:31"},"src":"163:18:31"},{"body":{"id":5281,"nodeType":"Block","src":"210:109:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5270,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"224:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"228:6:31","memberName":"sender","nodeType":"MemberAccess","src":"224:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5272,"name":"Executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"238:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Executor_$5230_$","typeString":"type(library Executor)"}},"id":5273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"247:7:31","memberName":"Relayer","nodeType":"MemberAccess","referencedDeclaration":5226,"src":"238:16:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"224:30:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5279,"nodeType":"IfStatement","src":"220:82:31","trueBody":{"id":5278,"nodeType":"Block","src":"256:46:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5275,"name":"AccessDenied","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"277:12:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"277:14:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5277,"nodeType":"RevertStatement","src":"270:21:31"}]}},{"id":5280,"nodeType":"PlaceholderStatement","src":"311:1:31"}]},"id":5282,"name":"OnlyRelayer","nameLocation":"196:11:31","nodeType":"ModifierDefinition","parameters":{"id":5269,"nodeType":"ParameterList","parameters":[],"src":"207:2:31"},"src":"187:132:31","virtual":false,"visibility":"internal"}],"scope":5284,"src":"111:210:31","usedErrors":[5266,5268],"usedEvents":[]}],"src":"32:290:31"},"id":31},"contracts/library/utils/Burner.sol":{"ast":{"absolutePath":"contracts/library/utils/Burner.sol","exportedSymbols":{"Burner":[5300]},"id":5301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5285,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"Burner","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5300,"linearizedBaseContracts":[5300],"name":"Burner","nameLocation":"67:6:32","nodeType":"ContractDefinition","nodes":[{"body":{"id":5298,"nodeType":"Block","src":"102:53:32","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":5293,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"141:4:32","typeDescriptions":{"typeIdentifier":"t_contract$_Burner_$5300","typeString":"contract Burner"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Burner_$5300","typeString":"contract Burner"}],"id":5292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"133:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5291,"name":"address","nodeType":"ElementaryTypeName","src":"133:7:32","typeDescriptions":{}}},"id":5294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"133:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"125:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5289,"name":"address","nodeType":"ElementaryTypeName","src":"125:8:32","stateMutability":"payable","typeDescriptions":{}}},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"125:22:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5288,"name":"selfdestruct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-21,"src":"112:12:32","typeDescriptions":{"typeIdentifier":"t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$","typeString":"function (address payable)"}},"id":5296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"112:36:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5297,"nodeType":"ExpressionStatement","src":"112:36:32"}]},"id":5299,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5286,"nodeType":"ParameterList","parameters":[],"src":"91:2:32"},"returnParameters":{"id":5287,"nodeType":"ParameterList","parameters":[],"src":"102:0:32"},"scope":5300,"src":"80:75:32","stateMutability":"payable","virtual":false,"visibility":"public"}],"scope":5301,"src":"58:99:32","usedErrors":[],"usedEvents":[]}],"src":"32:126:32"},"id":32},"contracts/relayer/relayer.sol":{"ast":{"absolutePath":"contracts/relayer/relayer.sol","exportedSymbols":{"IRelayer":[5011],"Ownable":[147],"Relayer":[5421]},"id":5422,"license":"Business Source License 1.1","nodeType":"SourceUnit","nodes":[{"id":5302,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"56:24:33"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5422,"sourceUnit":148,"src":"82:67:33","symbolAliases":[{"foreign":{"id":5303,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"90:7:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/Relayer.sol","file":"../interfaces/Relayer.sol","id":5306,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5422,"sourceUnit":5012,"src":"150:51:33","symbolAliases":[{"foreign":{"id":5305,"name":"IRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5011,"src":"158:8:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5307,"name":"Ownable","nameLocations":["223:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"223:7:33"},"id":5308,"nodeType":"InheritanceSpecifier","src":"223:7:33"},{"baseName":{"id":5309,"name":"IRelayer","nameLocations":["232:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":5011,"src":"232:8:33"},"id":5310,"nodeType":"InheritanceSpecifier","src":"232:8:33"}],"canonicalName":"Relayer","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5421,"linearizedBaseContracts":[5421,5011,147,1447],"name":"Relayer","nameLocation":"212:7:33","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"827fb811","id":5313,"mutability":"constant","name":"MAX_VOTER_COUNT","nameLocation":"348:15:33","nodeType":"VariableDeclaration","scope":5421,"src":"325:44:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5311,"name":"uint16","nodeType":"ElementaryTypeName","src":"325:6:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"323536","id":5312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"366:3:33","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"visibility":"public"},{"constant":false,"functionSelector":"2ddbd13a","id":5315,"mutability":"mutable","name":"total","nameLocation":"390:5:33","nodeType":"VariableDeclaration","scope":5421,"src":"376:19:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5314,"name":"uint16","nodeType":"ElementaryTypeName","src":"376:6:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"public"},{"constant":false,"functionSelector":"98611f12","id":5319,"mutability":"mutable","name":"pubkeys","nameLocation":"445:7:33","nodeType":"VariableDeclaration","scope":5421,"src":"401:51:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":5318,"keyName":"vtkh","keyNameLocation":"417:4:33","keyType":{"id":5316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"409:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"401:36:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"exists","valueNameLocation":"430:6:33","valueType":{"id":5317,"name":"bool","nodeType":"ElementaryTypeName","src":"425:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"1a41e890","id":5323,"mutability":"mutable","name":"voters","nameLocation":"503:6:33","nodeType":"VariableDeclaration","scope":5421,"src":"458:51:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes20_$_t_bool_$","typeString":"mapping(bytes20 => bool)"},"typeName":{"id":5322,"keyName":"voter","keyNameLocation":"474:5:33","keyType":{"id":5320,"name":"bytes20","nodeType":"ElementaryTypeName","src":"466:7:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"nodeType":"Mapping","src":"458:37:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes20_$_t_bool_$","typeString":"mapping(bytes20 => bool)"},"valueName":"exists","valueNameLocation":"488:6:33","valueType":{"id":5321,"name":"bool","nodeType":"ElementaryTypeName","src":"483:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"body":{"id":5331,"nodeType":"Block","src":"558:2:33","statements":[]},"id":5332,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5328,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"551:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5329,"kind":"baseConstructorSpecifier","modifierName":{"id":5327,"name":"Ownable","nameLocations":["543:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"543:7:33"},"nodeType":"ModifierInvocation","src":"543:14:33"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5325,"mutability":"mutable","name":"owner","nameLocation":"536:5:33","nodeType":"VariableDeclaration","scope":5332,"src":"528:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5324,"name":"address","nodeType":"ElementaryTypeName","src":"528:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"527:15:33"},"returnParameters":{"id":5330,"nodeType":"ParameterList","parameters":[],"src":"558:0:33"},"scope":5421,"src":"516:44:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5005],"body":{"id":5383,"nodeType":"Block","src":"1261:276:33","statements":[{"expression":{"arguments":[{"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1279:15:33","subExpression":{"baseExpression":{"id":5343,"name":"pubkeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5319,"src":"1280:7:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5345,"indexExpression":{"id":5344,"name":"vtkey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"1288:5:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1280:14:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6475706c696361746564206b6579","id":5347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1296:16:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_17a7a094bed714d7a976817e1b97c661b5df5369664dcb0b5bf265f97b5fb68e","typeString":"literal_string \"duplicated key\""},"value":"duplicated key"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17a7a094bed714d7a976817e1b97c661b5df5369664dcb0b5bf265f97b5fb68e","typeString":"literal_string \"duplicated key\""}],"id":5342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1271:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1271:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5349,"nodeType":"ExpressionStatement","src":"1271:42:33"},{"expression":{"arguments":[{"id":5354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1331:14:33","subExpression":{"baseExpression":{"id":5351,"name":"voters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"1332:6:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes20_$_t_bool_$","typeString":"mapping(bytes20 => bool)"}},"id":5353,"indexExpression":{"id":5352,"name":"voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"1339:5:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1332:13:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6475706c69636174656420766f746572","id":5355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1347:18:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_62ed58227f24629179b3471ceab593c7808e28a9de10d196f617d0016115a7b5","typeString":"literal_string \"duplicated voter\""},"value":"duplicated voter"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_62ed58227f24629179b3471ceab593c7808e28a9de10d196f617d0016115a7b5","typeString":"literal_string \"duplicated voter\""}],"id":5350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1323:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1323:43:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5357,"nodeType":"ExpressionStatement","src":"1323:43:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1384:7:33","subExpression":{"id":5359,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"1386:5:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5361,"name":"MAX_VOTER_COUNT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"1394:15:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"1384:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f6f206d616e7920766f74657273","id":5363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1411:17:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_d1bc205a3fff4970024dfd61b2e1808a01cf394784bb003e93b2acdacd5c6869","typeString":"literal_string \"too many voters\""},"value":"too many voters"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d1bc205a3fff4970024dfd61b2e1808a01cf394784bb003e93b2acdacd5c6869","typeString":"literal_string \"too many voters\""}],"id":5358,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1376:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:53:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5365,"nodeType":"ExpressionStatement","src":"1376:53:33"},{"expression":{"id":5370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5366,"name":"voters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"1440:6:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes20_$_t_bool_$","typeString":"mapping(bytes20 => bool)"}},"id":5368,"indexExpression":{"id":5367,"name":"voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"1447:5:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1440:13:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1456:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1440:20:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5371,"nodeType":"ExpressionStatement","src":"1440:20:33"},{"expression":{"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5372,"name":"pubkeys","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5319,"src":"1470:7:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5374,"indexExpression":{"id":5373,"name":"vtkey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"1478:5:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1470:14:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1487:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1470:21:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5377,"nodeType":"ExpressionStatement","src":"1470:21:33"},{"eventCall":{"arguments":[{"id":5379,"name":"voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"1517:5:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},{"id":5380,"name":"vtkey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"1524:5:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5378,"name":"AddedVoter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4994,"src":"1506:10:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes20_$_t_bytes32_$returns$__$","typeString":"function (bytes20,bytes32)"}},"id":5381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1506:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5382,"nodeType":"EmitStatement","src":"1501:29:33"}]},"documentation":{"id":5333,"nodeType":"StructuredDocumentation","src":"566:623:33","text":" addVoter adds a new voter to relayer network\n @param voter the address which derived from the tx key\n @param vtkey the hash which derived from the vote key\n the voter address = ripemd160(sha256(compressed secp256k1 public key))\n the voter key hash = sha256(compressed bls12-381 public key in G2 group)\n we don't have heavy workload such as signature verification here\n a new voter needs to provide online proof which includes the signature\n to join the relayer network\n the adding will be activated after next relayer proposer election"},"functionSelector":"d782d4f7","id":5384,"implemented":true,"kind":"function","modifiers":[{"id":5340,"kind":"modifierInvocation","modifierName":{"id":5339,"name":"onlyOwner","nameLocations":["1251:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1251:9:33"},"nodeType":"ModifierInvocation","src":"1251:9:33"}],"name":"addVoter","nameLocation":"1203:8:33","nodeType":"FunctionDefinition","parameters":{"id":5338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5335,"mutability":"mutable","name":"voter","nameLocation":"1220:5:33","nodeType":"VariableDeclaration","scope":5384,"src":"1212:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":5334,"name":"bytes20","nodeType":"ElementaryTypeName","src":"1212:7:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"},{"constant":false,"id":5337,"mutability":"mutable","name":"vtkey","nameLocation":"1235:5:33","nodeType":"VariableDeclaration","scope":5384,"src":"1227:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1227:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1211:30:33"},"returnParameters":{"id":5341,"nodeType":"ParameterList","parameters":[],"src":"1261:0:33"},"scope":5421,"src":"1194:343:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5010],"body":{"id":5419,"nodeType":"Block","src":"1789:253:33","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5393,"name":"voters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"1807:6:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes20_$_t_bool_$","typeString":"mapping(bytes20 => bool)"}},"id":5395,"indexExpression":{"id":5394,"name":"voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"1814:5:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1807:13:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"766f746572206e6f7420666f756e64","id":5396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1822:17:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_873560222dc0f92eaf969bc27b1332bf2531ba58759b0850a597bdf9e9e44f21","typeString":"literal_string \"voter not found\""},"value":"voter not found"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_873560222dc0f92eaf969bc27b1332bf2531ba58759b0850a597bdf9e9e44f21","typeString":"literal_string \"voter not found\""}],"id":5392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1799:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1799:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5398,"nodeType":"ExpressionStatement","src":"1799:41:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5400,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"1858:5:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":5401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1866:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1858:9:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f6f2066657720766f74657273","id":5403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1869:16:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_6aaee0322235e78e47597728e9235efb307ea6e350eef5561421443a33e1250d","typeString":"literal_string \"too few voters\""},"value":"too few voters"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6aaee0322235e78e47597728e9235efb307ea6e350eef5561421443a33e1250d","typeString":"literal_string \"too few voters\""}],"id":5399,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1850:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1850:36:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5405,"nodeType":"ExpressionStatement","src":"1850:36:33"},{"expression":{"id":5410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5406,"name":"voters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"1963:6:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes20_$_t_bool_$","typeString":"mapping(bytes20 => bool)"}},"id":5408,"indexExpression":{"id":5407,"name":"voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"1970:5:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1963:13:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1979:5:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1963:21:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5411,"nodeType":"ExpressionStatement","src":"1963:21:33"},{"expression":{"id":5413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1994:7:33","subExpression":{"id":5412,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"1994:5:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":5414,"nodeType":"ExpressionStatement","src":"1994:7:33"},{"eventCall":{"arguments":[{"id":5416,"name":"voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"2029:5:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":5415,"name":"RemovedVoter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4998,"src":"2016:12:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes20_$returns$__$","typeString":"function (bytes20)"}},"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5418,"nodeType":"EmitStatement","src":"2011:24:33"}]},"documentation":{"id":5385,"nodeType":"StructuredDocumentation","src":"1543:186:33","text":" removeVoter removes a voter from relayer network\n @param voter the voter address\n the removal will be activated after next relayer proposer election"},"functionSelector":"6b75a2b3","id":5420,"implemented":true,"kind":"function","modifiers":[{"id":5390,"kind":"modifierInvocation","modifierName":{"id":5389,"name":"onlyOwner","nameLocations":["1779:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1779:9:33"},"nodeType":"ModifierInvocation","src":"1779:9:33"}],"name":"removeVoter","nameLocation":"1743:11:33","nodeType":"FunctionDefinition","parameters":{"id":5388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5387,"mutability":"mutable","name":"voter","nameLocation":"1763:5:33","nodeType":"VariableDeclaration","scope":5420,"src":"1755:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":5386,"name":"bytes20","nodeType":"ElementaryTypeName","src":"1755:7:33","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"1754:15:33"},"returnParameters":{"id":5391,"nodeType":"ParameterList","parameters":[],"src":"1789:0:33"},"scope":5421,"src":"1734:308:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5422,"src":"203:1841:33","usedErrors":[13,18],"usedEvents":[24,4994,4998]}],"src":"56:1989:33"},"id":33}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"IERC5267":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}"},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}"},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ERC20Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol":{"ERC20Permit":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"ERC2612ExpiredSignature","type":"error"},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC2612InvalidSigner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","eip712Domain()":"84b0196e","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"195:6066:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;195:6066:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"195:6066:9:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/Nonces.sol":{"Nonces":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"nonces(address)":"7ecebe00"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/ShortStrings.sol":{"ShortStrings":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"1255:3053:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1255:3053:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"1255:3053:12:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"1245:2685:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1245:2685:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"1245:2685:13:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"251:2847:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"251:2847:14:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"344:7386:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;344:7386:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"344:7386:15:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"EIP712":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"MessageHashUtils":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"521:3235:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3235:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"521:3235:17:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"203:14914:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:20;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"203:14914:20:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"216:1047:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"216:1047:21:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/bitcoin/Bitcoin.sol":{"Bitcoin":{"abi":[{"inputs":[{"internalType":"uint256","name":"_height","type":"uint256"},{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"string","name":"_network","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"Forbidden","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"height","type":"uint256"}],"name":"NewBlockHash","type":"event"},{"inputs":[{"internalType":"uint256","name":"height","type":"uint256"}],"name":"blockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestHeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"networkName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"newBlockHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startHeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_3989":{"entryPoint":null,"id":3989,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_bytes32t_string_memory_ptr_fromMemory":{"entryPoint":111,"id":null,"parameterSlots":2,"returnSlots":3},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":362,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":438,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":306,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":91,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:3714:34","nodeType":"YulBlock","src":"0:3714:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"46:95:34","nodeType":"YulBlock","src":"46:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:34","nodeType":"YulLiteral","src":"63:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:34","nodeType":"YulLiteral","src":"70:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:34","nodeType":"YulLiteral","src":"75:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:34","nodeType":"YulIdentifier","src":"66:3:34"},"nativeSrc":"66:20:34","nodeType":"YulFunctionCall","src":"66:20:34"}],"functionName":{"name":"mstore","nativeSrc":"56:6:34","nodeType":"YulIdentifier","src":"56:6:34"},"nativeSrc":"56:31:34","nodeType":"YulFunctionCall","src":"56:31:34"},"nativeSrc":"56:31:34","nodeType":"YulExpressionStatement","src":"56:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:34","nodeType":"YulLiteral","src":"103:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:34","nodeType":"YulLiteral","src":"106:4:34","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:34","nodeType":"YulIdentifier","src":"96:6:34"},"nativeSrc":"96:15:34","nodeType":"YulFunctionCall","src":"96:15:34"},"nativeSrc":"96:15:34","nodeType":"YulExpressionStatement","src":"96:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:34","nodeType":"YulLiteral","src":"127:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:34","nodeType":"YulLiteral","src":"130:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:34","nodeType":"YulIdentifier","src":"120:6:34"},"nativeSrc":"120:15:34","nodeType":"YulFunctionCall","src":"120:15:34"},"nativeSrc":"120:15:34","nodeType":"YulExpressionStatement","src":"120:15:34"}]},"name":"panic_error_0x41","nativeSrc":"14:127:34","nodeType":"YulFunctionDefinition","src":"14:127:34"},{"body":{"nativeSrc":"271:932:34","nodeType":"YulBlock","src":"271:932:34","statements":[{"body":{"nativeSrc":"317:16:34","nodeType":"YulBlock","src":"317:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"326:1:34","nodeType":"YulLiteral","src":"326:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"329:1:34","nodeType":"YulLiteral","src":"329:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"319:6:34","nodeType":"YulIdentifier","src":"319:6:34"},"nativeSrc":"319:12:34","nodeType":"YulFunctionCall","src":"319:12:34"},"nativeSrc":"319:12:34","nodeType":"YulExpressionStatement","src":"319:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"292:7:34","nodeType":"YulIdentifier","src":"292:7:34"},{"name":"headStart","nativeSrc":"301:9:34","nodeType":"YulIdentifier","src":"301:9:34"}],"functionName":{"name":"sub","nativeSrc":"288:3:34","nodeType":"YulIdentifier","src":"288:3:34"},"nativeSrc":"288:23:34","nodeType":"YulFunctionCall","src":"288:23:34"},{"kind":"number","nativeSrc":"313:2:34","nodeType":"YulLiteral","src":"313:2:34","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"284:3:34","nodeType":"YulIdentifier","src":"284:3:34"},"nativeSrc":"284:32:34","nodeType":"YulFunctionCall","src":"284:32:34"},"nativeSrc":"281:52:34","nodeType":"YulIf","src":"281:52:34"},{"nativeSrc":"342:26:34","nodeType":"YulAssignment","src":"342:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"358:9:34","nodeType":"YulIdentifier","src":"358:9:34"}],"functionName":{"name":"mload","nativeSrc":"352:5:34","nodeType":"YulIdentifier","src":"352:5:34"},"nativeSrc":"352:16:34","nodeType":"YulFunctionCall","src":"352:16:34"},"variableNames":[{"name":"value0","nativeSrc":"342:6:34","nodeType":"YulIdentifier","src":"342:6:34"}]},{"nativeSrc":"377:35:34","nodeType":"YulAssignment","src":"377:35:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"397:9:34","nodeType":"YulIdentifier","src":"397:9:34"},{"kind":"number","nativeSrc":"408:2:34","nodeType":"YulLiteral","src":"408:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"393:3:34","nodeType":"YulIdentifier","src":"393:3:34"},"nativeSrc":"393:18:34","nodeType":"YulFunctionCall","src":"393:18:34"}],"functionName":{"name":"mload","nativeSrc":"387:5:34","nodeType":"YulIdentifier","src":"387:5:34"},"nativeSrc":"387:25:34","nodeType":"YulFunctionCall","src":"387:25:34"},"variableNames":[{"name":"value1","nativeSrc":"377:6:34","nodeType":"YulIdentifier","src":"377:6:34"}]},{"nativeSrc":"421:39:34","nodeType":"YulVariableDeclaration","src":"421:39:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"445:9:34","nodeType":"YulIdentifier","src":"445:9:34"},{"kind":"number","nativeSrc":"456:2:34","nodeType":"YulLiteral","src":"456:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"441:3:34","nodeType":"YulIdentifier","src":"441:3:34"},"nativeSrc":"441:18:34","nodeType":"YulFunctionCall","src":"441:18:34"}],"functionName":{"name":"mload","nativeSrc":"435:5:34","nodeType":"YulIdentifier","src":"435:5:34"},"nativeSrc":"435:25:34","nodeType":"YulFunctionCall","src":"435:25:34"},"variables":[{"name":"offset","nativeSrc":"425:6:34","nodeType":"YulTypedName","src":"425:6:34","type":""}]},{"body":{"nativeSrc":"503:16:34","nodeType":"YulBlock","src":"503:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"512:1:34","nodeType":"YulLiteral","src":"512:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"515:1:34","nodeType":"YulLiteral","src":"515:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"505:6:34","nodeType":"YulIdentifier","src":"505:6:34"},"nativeSrc":"505:12:34","nodeType":"YulFunctionCall","src":"505:12:34"},"nativeSrc":"505:12:34","nodeType":"YulExpressionStatement","src":"505:12:34"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"475:6:34","nodeType":"YulIdentifier","src":"475:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"491:2:34","nodeType":"YulLiteral","src":"491:2:34","type":"","value":"64"},{"kind":"number","nativeSrc":"495:1:34","nodeType":"YulLiteral","src":"495:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"487:3:34","nodeType":"YulIdentifier","src":"487:3:34"},"nativeSrc":"487:10:34","nodeType":"YulFunctionCall","src":"487:10:34"},{"kind":"number","nativeSrc":"499:1:34","nodeType":"YulLiteral","src":"499:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"483:3:34","nodeType":"YulIdentifier","src":"483:3:34"},"nativeSrc":"483:18:34","nodeType":"YulFunctionCall","src":"483:18:34"}],"functionName":{"name":"gt","nativeSrc":"472:2:34","nodeType":"YulIdentifier","src":"472:2:34"},"nativeSrc":"472:30:34","nodeType":"YulFunctionCall","src":"472:30:34"},"nativeSrc":"469:50:34","nodeType":"YulIf","src":"469:50:34"},{"nativeSrc":"528:32:34","nodeType":"YulVariableDeclaration","src":"528:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"542:9:34","nodeType":"YulIdentifier","src":"542:9:34"},{"name":"offset","nativeSrc":"553:6:34","nodeType":"YulIdentifier","src":"553:6:34"}],"functionName":{"name":"add","nativeSrc":"538:3:34","nodeType":"YulIdentifier","src":"538:3:34"},"nativeSrc":"538:22:34","nodeType":"YulFunctionCall","src":"538:22:34"},"variables":[{"name":"_1","nativeSrc":"532:2:34","nodeType":"YulTypedName","src":"532:2:34","type":""}]},{"body":{"nativeSrc":"608:16:34","nodeType":"YulBlock","src":"608:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"617:1:34","nodeType":"YulLiteral","src":"617:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"620:1:34","nodeType":"YulLiteral","src":"620:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"610:6:34","nodeType":"YulIdentifier","src":"610:6:34"},"nativeSrc":"610:12:34","nodeType":"YulFunctionCall","src":"610:12:34"},"nativeSrc":"610:12:34","nodeType":"YulExpressionStatement","src":"610:12:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"587:2:34","nodeType":"YulIdentifier","src":"587:2:34"},{"kind":"number","nativeSrc":"591:4:34","nodeType":"YulLiteral","src":"591:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"583:3:34","nodeType":"YulIdentifier","src":"583:3:34"},"nativeSrc":"583:13:34","nodeType":"YulFunctionCall","src":"583:13:34"},{"name":"dataEnd","nativeSrc":"598:7:34","nodeType":"YulIdentifier","src":"598:7:34"}],"functionName":{"name":"slt","nativeSrc":"579:3:34","nodeType":"YulIdentifier","src":"579:3:34"},"nativeSrc":"579:27:34","nodeType":"YulFunctionCall","src":"579:27:34"}],"functionName":{"name":"iszero","nativeSrc":"572:6:34","nodeType":"YulIdentifier","src":"572:6:34"},"nativeSrc":"572:35:34","nodeType":"YulFunctionCall","src":"572:35:34"},"nativeSrc":"569:55:34","nodeType":"YulIf","src":"569:55:34"},{"nativeSrc":"633:23:34","nodeType":"YulVariableDeclaration","src":"633:23:34","value":{"arguments":[{"name":"_1","nativeSrc":"653:2:34","nodeType":"YulIdentifier","src":"653:2:34"}],"functionName":{"name":"mload","nativeSrc":"647:5:34","nodeType":"YulIdentifier","src":"647:5:34"},"nativeSrc":"647:9:34","nodeType":"YulFunctionCall","src":"647:9:34"},"variables":[{"name":"length","nativeSrc":"637:6:34","nodeType":"YulTypedName","src":"637:6:34","type":""}]},{"body":{"nativeSrc":"699:22:34","nodeType":"YulBlock","src":"699:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"701:16:34","nodeType":"YulIdentifier","src":"701:16:34"},"nativeSrc":"701:18:34","nodeType":"YulFunctionCall","src":"701:18:34"},"nativeSrc":"701:18:34","nodeType":"YulExpressionStatement","src":"701:18:34"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"671:6:34","nodeType":"YulIdentifier","src":"671:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"687:2:34","nodeType":"YulLiteral","src":"687:2:34","type":"","value":"64"},{"kind":"number","nativeSrc":"691:1:34","nodeType":"YulLiteral","src":"691:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"683:3:34","nodeType":"YulIdentifier","src":"683:3:34"},"nativeSrc":"683:10:34","nodeType":"YulFunctionCall","src":"683:10:34"},{"kind":"number","nativeSrc":"695:1:34","nodeType":"YulLiteral","src":"695:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"679:3:34","nodeType":"YulIdentifier","src":"679:3:34"},"nativeSrc":"679:18:34","nodeType":"YulFunctionCall","src":"679:18:34"}],"functionName":{"name":"gt","nativeSrc":"668:2:34","nodeType":"YulIdentifier","src":"668:2:34"},"nativeSrc":"668:30:34","nodeType":"YulFunctionCall","src":"668:30:34"},"nativeSrc":"665:56:34","nodeType":"YulIf","src":"665:56:34"},{"nativeSrc":"730:23:34","nodeType":"YulVariableDeclaration","src":"730:23:34","value":{"arguments":[{"kind":"number","nativeSrc":"750:2:34","nodeType":"YulLiteral","src":"750:2:34","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"744:5:34","nodeType":"YulIdentifier","src":"744:5:34"},"nativeSrc":"744:9:34","nodeType":"YulFunctionCall","src":"744:9:34"},"variables":[{"name":"memPtr","nativeSrc":"734:6:34","nodeType":"YulTypedName","src":"734:6:34","type":""}]},{"nativeSrc":"762:85:34","nodeType":"YulVariableDeclaration","src":"762:85:34","value":{"arguments":[{"name":"memPtr","nativeSrc":"784:6:34","nodeType":"YulIdentifier","src":"784:6:34"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nativeSrc":"808:6:34","nodeType":"YulIdentifier","src":"808:6:34"},{"kind":"number","nativeSrc":"816:4:34","nodeType":"YulLiteral","src":"816:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"804:3:34","nodeType":"YulIdentifier","src":"804:3:34"},"nativeSrc":"804:17:34","nodeType":"YulFunctionCall","src":"804:17:34"},{"arguments":[{"kind":"number","nativeSrc":"827:2:34","nodeType":"YulLiteral","src":"827:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"823:3:34","nodeType":"YulIdentifier","src":"823:3:34"},"nativeSrc":"823:7:34","nodeType":"YulFunctionCall","src":"823:7:34"}],"functionName":{"name":"and","nativeSrc":"800:3:34","nodeType":"YulIdentifier","src":"800:3:34"},"nativeSrc":"800:31:34","nodeType":"YulFunctionCall","src":"800:31:34"},{"kind":"number","nativeSrc":"833:2:34","nodeType":"YulLiteral","src":"833:2:34","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"796:3:34","nodeType":"YulIdentifier","src":"796:3:34"},"nativeSrc":"796:40:34","nodeType":"YulFunctionCall","src":"796:40:34"},{"arguments":[{"kind":"number","nativeSrc":"842:2:34","nodeType":"YulLiteral","src":"842:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"838:3:34","nodeType":"YulIdentifier","src":"838:3:34"},"nativeSrc":"838:7:34","nodeType":"YulFunctionCall","src":"838:7:34"}],"functionName":{"name":"and","nativeSrc":"792:3:34","nodeType":"YulIdentifier","src":"792:3:34"},"nativeSrc":"792:54:34","nodeType":"YulFunctionCall","src":"792:54:34"}],"functionName":{"name":"add","nativeSrc":"780:3:34","nodeType":"YulIdentifier","src":"780:3:34"},"nativeSrc":"780:67:34","nodeType":"YulFunctionCall","src":"780:67:34"},"variables":[{"name":"newFreePtr","nativeSrc":"766:10:34","nodeType":"YulTypedName","src":"766:10:34","type":""}]},{"body":{"nativeSrc":"922:22:34","nodeType":"YulBlock","src":"922:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"924:16:34","nodeType":"YulIdentifier","src":"924:16:34"},"nativeSrc":"924:18:34","nodeType":"YulFunctionCall","src":"924:18:34"},"nativeSrc":"924:18:34","nodeType":"YulExpressionStatement","src":"924:18:34"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"865:10:34","nodeType":"YulIdentifier","src":"865:10:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"885:2:34","nodeType":"YulLiteral","src":"885:2:34","type":"","value":"64"},{"kind":"number","nativeSrc":"889:1:34","nodeType":"YulLiteral","src":"889:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"881:3:34","nodeType":"YulIdentifier","src":"881:3:34"},"nativeSrc":"881:10:34","nodeType":"YulFunctionCall","src":"881:10:34"},{"kind":"number","nativeSrc":"893:1:34","nodeType":"YulLiteral","src":"893:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"877:3:34","nodeType":"YulIdentifier","src":"877:3:34"},"nativeSrc":"877:18:34","nodeType":"YulFunctionCall","src":"877:18:34"}],"functionName":{"name":"gt","nativeSrc":"862:2:34","nodeType":"YulIdentifier","src":"862:2:34"},"nativeSrc":"862:34:34","nodeType":"YulFunctionCall","src":"862:34:34"},{"arguments":[{"name":"newFreePtr","nativeSrc":"901:10:34","nodeType":"YulIdentifier","src":"901:10:34"},{"name":"memPtr","nativeSrc":"913:6:34","nodeType":"YulIdentifier","src":"913:6:34"}],"functionName":{"name":"lt","nativeSrc":"898:2:34","nodeType":"YulIdentifier","src":"898:2:34"},"nativeSrc":"898:22:34","nodeType":"YulFunctionCall","src":"898:22:34"}],"functionName":{"name":"or","nativeSrc":"859:2:34","nodeType":"YulIdentifier","src":"859:2:34"},"nativeSrc":"859:62:34","nodeType":"YulFunctionCall","src":"859:62:34"},"nativeSrc":"856:88:34","nodeType":"YulIf","src":"856:88:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"960:2:34","nodeType":"YulLiteral","src":"960:2:34","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"964:10:34","nodeType":"YulIdentifier","src":"964:10:34"}],"functionName":{"name":"mstore","nativeSrc":"953:6:34","nodeType":"YulIdentifier","src":"953:6:34"},"nativeSrc":"953:22:34","nodeType":"YulFunctionCall","src":"953:22:34"},"nativeSrc":"953:22:34","nodeType":"YulExpressionStatement","src":"953:22:34"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"991:6:34","nodeType":"YulIdentifier","src":"991:6:34"},{"name":"length","nativeSrc":"999:6:34","nodeType":"YulIdentifier","src":"999:6:34"}],"functionName":{"name":"mstore","nativeSrc":"984:6:34","nodeType":"YulIdentifier","src":"984:6:34"},"nativeSrc":"984:22:34","nodeType":"YulFunctionCall","src":"984:22:34"},"nativeSrc":"984:22:34","nodeType":"YulExpressionStatement","src":"984:22:34"},{"body":{"nativeSrc":"1056:16:34","nodeType":"YulBlock","src":"1056:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1065:1:34","nodeType":"YulLiteral","src":"1065:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1068:1:34","nodeType":"YulLiteral","src":"1068:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1058:6:34","nodeType":"YulIdentifier","src":"1058:6:34"},"nativeSrc":"1058:12:34","nodeType":"YulFunctionCall","src":"1058:12:34"},"nativeSrc":"1058:12:34","nodeType":"YulExpressionStatement","src":"1058:12:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1029:2:34","nodeType":"YulIdentifier","src":"1029:2:34"},{"name":"length","nativeSrc":"1033:6:34","nodeType":"YulIdentifier","src":"1033:6:34"}],"functionName":{"name":"add","nativeSrc":"1025:3:34","nodeType":"YulIdentifier","src":"1025:3:34"},"nativeSrc":"1025:15:34","nodeType":"YulFunctionCall","src":"1025:15:34"},{"kind":"number","nativeSrc":"1042:2:34","nodeType":"YulLiteral","src":"1042:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1021:3:34","nodeType":"YulIdentifier","src":"1021:3:34"},"nativeSrc":"1021:24:34","nodeType":"YulFunctionCall","src":"1021:24:34"},{"name":"dataEnd","nativeSrc":"1047:7:34","nodeType":"YulIdentifier","src":"1047:7:34"}],"functionName":{"name":"gt","nativeSrc":"1018:2:34","nodeType":"YulIdentifier","src":"1018:2:34"},"nativeSrc":"1018:37:34","nodeType":"YulFunctionCall","src":"1018:37:34"},"nativeSrc":"1015:57:34","nodeType":"YulIf","src":"1015:57:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1091:6:34","nodeType":"YulIdentifier","src":"1091:6:34"},{"kind":"number","nativeSrc":"1099:2:34","nodeType":"YulLiteral","src":"1099:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1087:3:34","nodeType":"YulIdentifier","src":"1087:3:34"},"nativeSrc":"1087:15:34","nodeType":"YulFunctionCall","src":"1087:15:34"},{"arguments":[{"name":"_1","nativeSrc":"1108:2:34","nodeType":"YulIdentifier","src":"1108:2:34"},{"kind":"number","nativeSrc":"1112:2:34","nodeType":"YulLiteral","src":"1112:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1104:3:34","nodeType":"YulIdentifier","src":"1104:3:34"},"nativeSrc":"1104:11:34","nodeType":"YulFunctionCall","src":"1104:11:34"},{"name":"length","nativeSrc":"1117:6:34","nodeType":"YulIdentifier","src":"1117:6:34"}],"functionName":{"name":"mcopy","nativeSrc":"1081:5:34","nodeType":"YulIdentifier","src":"1081:5:34"},"nativeSrc":"1081:43:34","nodeType":"YulFunctionCall","src":"1081:43:34"},"nativeSrc":"1081:43:34","nodeType":"YulExpressionStatement","src":"1081:43:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1148:6:34","nodeType":"YulIdentifier","src":"1148:6:34"},{"name":"length","nativeSrc":"1156:6:34","nodeType":"YulIdentifier","src":"1156:6:34"}],"functionName":{"name":"add","nativeSrc":"1144:3:34","nodeType":"YulIdentifier","src":"1144:3:34"},"nativeSrc":"1144:19:34","nodeType":"YulFunctionCall","src":"1144:19:34"},{"kind":"number","nativeSrc":"1165:2:34","nodeType":"YulLiteral","src":"1165:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1140:3:34","nodeType":"YulIdentifier","src":"1140:3:34"},"nativeSrc":"1140:28:34","nodeType":"YulFunctionCall","src":"1140:28:34"},{"kind":"number","nativeSrc":"1170:1:34","nodeType":"YulLiteral","src":"1170:1:34","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1133:6:34","nodeType":"YulIdentifier","src":"1133:6:34"},"nativeSrc":"1133:39:34","nodeType":"YulFunctionCall","src":"1133:39:34"},"nativeSrc":"1133:39:34","nodeType":"YulExpressionStatement","src":"1133:39:34"},{"nativeSrc":"1181:16:34","nodeType":"YulAssignment","src":"1181:16:34","value":{"name":"memPtr","nativeSrc":"1191:6:34","nodeType":"YulIdentifier","src":"1191:6:34"},"variableNames":[{"name":"value2","nativeSrc":"1181:6:34","nodeType":"YulIdentifier","src":"1181:6:34"}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32t_string_memory_ptr_fromMemory","nativeSrc":"146:1057:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"221:9:34","nodeType":"YulTypedName","src":"221:9:34","type":""},{"name":"dataEnd","nativeSrc":"232:7:34","nodeType":"YulTypedName","src":"232:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"244:6:34","nodeType":"YulTypedName","src":"244:6:34","type":""},{"name":"value1","nativeSrc":"252:6:34","nodeType":"YulTypedName","src":"252:6:34","type":""},{"name":"value2","nativeSrc":"260:6:34","nodeType":"YulTypedName","src":"260:6:34","type":""}],"src":"146:1057:34"},{"body":{"nativeSrc":"1263:325:34","nodeType":"YulBlock","src":"1263:325:34","statements":[{"nativeSrc":"1273:22:34","nodeType":"YulAssignment","src":"1273:22:34","value":{"arguments":[{"kind":"number","nativeSrc":"1287:1:34","nodeType":"YulLiteral","src":"1287:1:34","type":"","value":"1"},{"name":"data","nativeSrc":"1290:4:34","nodeType":"YulIdentifier","src":"1290:4:34"}],"functionName":{"name":"shr","nativeSrc":"1283:3:34","nodeType":"YulIdentifier","src":"1283:3:34"},"nativeSrc":"1283:12:34","nodeType":"YulFunctionCall","src":"1283:12:34"},"variableNames":[{"name":"length","nativeSrc":"1273:6:34","nodeType":"YulIdentifier","src":"1273:6:34"}]},{"nativeSrc":"1304:38:34","nodeType":"YulVariableDeclaration","src":"1304:38:34","value":{"arguments":[{"name":"data","nativeSrc":"1334:4:34","nodeType":"YulIdentifier","src":"1334:4:34"},{"kind":"number","nativeSrc":"1340:1:34","nodeType":"YulLiteral","src":"1340:1:34","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"1330:3:34","nodeType":"YulIdentifier","src":"1330:3:34"},"nativeSrc":"1330:12:34","nodeType":"YulFunctionCall","src":"1330:12:34"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"1308:18:34","nodeType":"YulTypedName","src":"1308:18:34","type":""}]},{"body":{"nativeSrc":"1381:31:34","nodeType":"YulBlock","src":"1381:31:34","statements":[{"nativeSrc":"1383:27:34","nodeType":"YulAssignment","src":"1383:27:34","value":{"arguments":[{"name":"length","nativeSrc":"1397:6:34","nodeType":"YulIdentifier","src":"1397:6:34"},{"kind":"number","nativeSrc":"1405:4:34","nodeType":"YulLiteral","src":"1405:4:34","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"1393:3:34","nodeType":"YulIdentifier","src":"1393:3:34"},"nativeSrc":"1393:17:34","nodeType":"YulFunctionCall","src":"1393:17:34"},"variableNames":[{"name":"length","nativeSrc":"1383:6:34","nodeType":"YulIdentifier","src":"1383:6:34"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1361:18:34","nodeType":"YulIdentifier","src":"1361:18:34"}],"functionName":{"name":"iszero","nativeSrc":"1354:6:34","nodeType":"YulIdentifier","src":"1354:6:34"},"nativeSrc":"1354:26:34","nodeType":"YulFunctionCall","src":"1354:26:34"},"nativeSrc":"1351:61:34","nodeType":"YulIf","src":"1351:61:34"},{"body":{"nativeSrc":"1471:111:34","nodeType":"YulBlock","src":"1471:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1492:1:34","nodeType":"YulLiteral","src":"1492:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1499:3:34","nodeType":"YulLiteral","src":"1499:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"1504:10:34","nodeType":"YulLiteral","src":"1504:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1495:3:34","nodeType":"YulIdentifier","src":"1495:3:34"},"nativeSrc":"1495:20:34","nodeType":"YulFunctionCall","src":"1495:20:34"}],"functionName":{"name":"mstore","nativeSrc":"1485:6:34","nodeType":"YulIdentifier","src":"1485:6:34"},"nativeSrc":"1485:31:34","nodeType":"YulFunctionCall","src":"1485:31:34"},"nativeSrc":"1485:31:34","nodeType":"YulExpressionStatement","src":"1485:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1536:1:34","nodeType":"YulLiteral","src":"1536:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"1539:4:34","nodeType":"YulLiteral","src":"1539:4:34","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"1529:6:34","nodeType":"YulIdentifier","src":"1529:6:34"},"nativeSrc":"1529:15:34","nodeType":"YulFunctionCall","src":"1529:15:34"},"nativeSrc":"1529:15:34","nodeType":"YulExpressionStatement","src":"1529:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1564:1:34","nodeType":"YulLiteral","src":"1564:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1567:4:34","nodeType":"YulLiteral","src":"1567:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1557:6:34","nodeType":"YulIdentifier","src":"1557:6:34"},"nativeSrc":"1557:15:34","nodeType":"YulFunctionCall","src":"1557:15:34"},"nativeSrc":"1557:15:34","nodeType":"YulExpressionStatement","src":"1557:15:34"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1427:18:34","nodeType":"YulIdentifier","src":"1427:18:34"},{"arguments":[{"name":"length","nativeSrc":"1450:6:34","nodeType":"YulIdentifier","src":"1450:6:34"},{"kind":"number","nativeSrc":"1458:2:34","nodeType":"YulLiteral","src":"1458:2:34","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"1447:2:34","nodeType":"YulIdentifier","src":"1447:2:34"},"nativeSrc":"1447:14:34","nodeType":"YulFunctionCall","src":"1447:14:34"}],"functionName":{"name":"eq","nativeSrc":"1424:2:34","nodeType":"YulIdentifier","src":"1424:2:34"},"nativeSrc":"1424:38:34","nodeType":"YulFunctionCall","src":"1424:38:34"},"nativeSrc":"1421:161:34","nodeType":"YulIf","src":"1421:161:34"}]},"name":"extract_byte_array_length","nativeSrc":"1208:380:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1243:4:34","nodeType":"YulTypedName","src":"1243:4:34","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1252:6:34","nodeType":"YulTypedName","src":"1252:6:34","type":""}],"src":"1208:380:34"},{"body":{"nativeSrc":"1649:65:34","nodeType":"YulBlock","src":"1649:65:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1666:1:34","nodeType":"YulLiteral","src":"1666:1:34","type":"","value":"0"},{"name":"ptr","nativeSrc":"1669:3:34","nodeType":"YulIdentifier","src":"1669:3:34"}],"functionName":{"name":"mstore","nativeSrc":"1659:6:34","nodeType":"YulIdentifier","src":"1659:6:34"},"nativeSrc":"1659:14:34","nodeType":"YulFunctionCall","src":"1659:14:34"},"nativeSrc":"1659:14:34","nodeType":"YulExpressionStatement","src":"1659:14:34"},{"nativeSrc":"1682:26:34","nodeType":"YulAssignment","src":"1682:26:34","value":{"arguments":[{"kind":"number","nativeSrc":"1700:1:34","nodeType":"YulLiteral","src":"1700:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1703:4:34","nodeType":"YulLiteral","src":"1703:4:34","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"1690:9:34","nodeType":"YulIdentifier","src":"1690:9:34"},"nativeSrc":"1690:18:34","nodeType":"YulFunctionCall","src":"1690:18:34"},"variableNames":[{"name":"data","nativeSrc":"1682:4:34","nodeType":"YulIdentifier","src":"1682:4:34"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"1593:121:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"1632:3:34","nodeType":"YulTypedName","src":"1632:3:34","type":""}],"returnVariables":[{"name":"data","nativeSrc":"1640:4:34","nodeType":"YulTypedName","src":"1640:4:34","type":""}],"src":"1593:121:34"},{"body":{"nativeSrc":"1800:437:34","nodeType":"YulBlock","src":"1800:437:34","statements":[{"body":{"nativeSrc":"1833:398:34","nodeType":"YulBlock","src":"1833:398:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1854:1:34","nodeType":"YulLiteral","src":"1854:1:34","type":"","value":"0"},{"name":"array","nativeSrc":"1857:5:34","nodeType":"YulIdentifier","src":"1857:5:34"}],"functionName":{"name":"mstore","nativeSrc":"1847:6:34","nodeType":"YulIdentifier","src":"1847:6:34"},"nativeSrc":"1847:16:34","nodeType":"YulFunctionCall","src":"1847:16:34"},"nativeSrc":"1847:16:34","nodeType":"YulExpressionStatement","src":"1847:16:34"},{"nativeSrc":"1876:30:34","nodeType":"YulVariableDeclaration","src":"1876:30:34","value":{"arguments":[{"kind":"number","nativeSrc":"1898:1:34","nodeType":"YulLiteral","src":"1898:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1901:4:34","nodeType":"YulLiteral","src":"1901:4:34","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"1888:9:34","nodeType":"YulIdentifier","src":"1888:9:34"},"nativeSrc":"1888:18:34","nodeType":"YulFunctionCall","src":"1888:18:34"},"variables":[{"name":"data","nativeSrc":"1880:4:34","nodeType":"YulTypedName","src":"1880:4:34","type":""}]},{"nativeSrc":"1919:57:34","nodeType":"YulVariableDeclaration","src":"1919:57:34","value":{"arguments":[{"name":"data","nativeSrc":"1942:4:34","nodeType":"YulIdentifier","src":"1942:4:34"},{"arguments":[{"kind":"number","nativeSrc":"1952:1:34","nodeType":"YulLiteral","src":"1952:1:34","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"1959:10:34","nodeType":"YulIdentifier","src":"1959:10:34"},{"kind":"number","nativeSrc":"1971:2:34","nodeType":"YulLiteral","src":"1971:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1955:3:34","nodeType":"YulIdentifier","src":"1955:3:34"},"nativeSrc":"1955:19:34","nodeType":"YulFunctionCall","src":"1955:19:34"}],"functionName":{"name":"shr","nativeSrc":"1948:3:34","nodeType":"YulIdentifier","src":"1948:3:34"},"nativeSrc":"1948:27:34","nodeType":"YulFunctionCall","src":"1948:27:34"}],"functionName":{"name":"add","nativeSrc":"1938:3:34","nodeType":"YulIdentifier","src":"1938:3:34"},"nativeSrc":"1938:38:34","nodeType":"YulFunctionCall","src":"1938:38:34"},"variables":[{"name":"deleteStart","nativeSrc":"1923:11:34","nodeType":"YulTypedName","src":"1923:11:34","type":""}]},{"body":{"nativeSrc":"2013:23:34","nodeType":"YulBlock","src":"2013:23:34","statements":[{"nativeSrc":"2015:19:34","nodeType":"YulAssignment","src":"2015:19:34","value":{"name":"data","nativeSrc":"2030:4:34","nodeType":"YulIdentifier","src":"2030:4:34"},"variableNames":[{"name":"deleteStart","nativeSrc":"2015:11:34","nodeType":"YulIdentifier","src":"2015:11:34"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"1995:10:34","nodeType":"YulIdentifier","src":"1995:10:34"},{"kind":"number","nativeSrc":"2007:4:34","nodeType":"YulLiteral","src":"2007:4:34","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"1992:2:34","nodeType":"YulIdentifier","src":"1992:2:34"},"nativeSrc":"1992:20:34","nodeType":"YulFunctionCall","src":"1992:20:34"},"nativeSrc":"1989:47:34","nodeType":"YulIf","src":"1989:47:34"},{"nativeSrc":"2049:41:34","nodeType":"YulVariableDeclaration","src":"2049:41:34","value":{"arguments":[{"name":"data","nativeSrc":"2063:4:34","nodeType":"YulIdentifier","src":"2063:4:34"},{"arguments":[{"kind":"number","nativeSrc":"2073:1:34","nodeType":"YulLiteral","src":"2073:1:34","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"2080:3:34","nodeType":"YulIdentifier","src":"2080:3:34"},{"kind":"number","nativeSrc":"2085:2:34","nodeType":"YulLiteral","src":"2085:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2076:3:34","nodeType":"YulIdentifier","src":"2076:3:34"},"nativeSrc":"2076:12:34","nodeType":"YulFunctionCall","src":"2076:12:34"}],"functionName":{"name":"shr","nativeSrc":"2069:3:34","nodeType":"YulIdentifier","src":"2069:3:34"},"nativeSrc":"2069:20:34","nodeType":"YulFunctionCall","src":"2069:20:34"}],"functionName":{"name":"add","nativeSrc":"2059:3:34","nodeType":"YulIdentifier","src":"2059:3:34"},"nativeSrc":"2059:31:34","nodeType":"YulFunctionCall","src":"2059:31:34"},"variables":[{"name":"_1","nativeSrc":"2053:2:34","nodeType":"YulTypedName","src":"2053:2:34","type":""}]},{"nativeSrc":"2103:24:34","nodeType":"YulVariableDeclaration","src":"2103:24:34","value":{"name":"deleteStart","nativeSrc":"2116:11:34","nodeType":"YulIdentifier","src":"2116:11:34"},"variables":[{"name":"start","nativeSrc":"2107:5:34","nodeType":"YulTypedName","src":"2107:5:34","type":""}]},{"body":{"nativeSrc":"2201:20:34","nodeType":"YulBlock","src":"2201:20:34","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"2210:5:34","nodeType":"YulIdentifier","src":"2210:5:34"},{"kind":"number","nativeSrc":"2217:1:34","nodeType":"YulLiteral","src":"2217:1:34","type":"","value":"0"}],"functionName":{"name":"sstore","nativeSrc":"2203:6:34","nodeType":"YulIdentifier","src":"2203:6:34"},"nativeSrc":"2203:16:34","nodeType":"YulFunctionCall","src":"2203:16:34"},"nativeSrc":"2203:16:34","nodeType":"YulExpressionStatement","src":"2203:16:34"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"2151:5:34","nodeType":"YulIdentifier","src":"2151:5:34"},{"name":"_1","nativeSrc":"2158:2:34","nodeType":"YulIdentifier","src":"2158:2:34"}],"functionName":{"name":"lt","nativeSrc":"2148:2:34","nodeType":"YulIdentifier","src":"2148:2:34"},"nativeSrc":"2148:13:34","nodeType":"YulFunctionCall","src":"2148:13:34"},"nativeSrc":"2140:81:34","nodeType":"YulForLoop","post":{"nativeSrc":"2162:26:34","nodeType":"YulBlock","src":"2162:26:34","statements":[{"nativeSrc":"2164:22:34","nodeType":"YulAssignment","src":"2164:22:34","value":{"arguments":[{"name":"start","nativeSrc":"2177:5:34","nodeType":"YulIdentifier","src":"2177:5:34"},{"kind":"number","nativeSrc":"2184:1:34","nodeType":"YulLiteral","src":"2184:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2173:3:34","nodeType":"YulIdentifier","src":"2173:3:34"},"nativeSrc":"2173:13:34","nodeType":"YulFunctionCall","src":"2173:13:34"},"variableNames":[{"name":"start","nativeSrc":"2164:5:34","nodeType":"YulIdentifier","src":"2164:5:34"}]}]},"pre":{"nativeSrc":"2144:3:34","nodeType":"YulBlock","src":"2144:3:34","statements":[]},"src":"2140:81:34"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"1816:3:34","nodeType":"YulIdentifier","src":"1816:3:34"},{"kind":"number","nativeSrc":"1821:2:34","nodeType":"YulLiteral","src":"1821:2:34","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"1813:2:34","nodeType":"YulIdentifier","src":"1813:2:34"},"nativeSrc":"1813:11:34","nodeType":"YulFunctionCall","src":"1813:11:34"},"nativeSrc":"1810:421:34","nodeType":"YulIf","src":"1810:421:34"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"1719:518:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"1772:5:34","nodeType":"YulTypedName","src":"1772:5:34","type":""},{"name":"len","nativeSrc":"1779:3:34","nodeType":"YulTypedName","src":"1779:3:34","type":""},{"name":"startIndex","nativeSrc":"1784:10:34","nodeType":"YulTypedName","src":"1784:10:34","type":""}],"src":"1719:518:34"},{"body":{"nativeSrc":"2327:81:34","nodeType":"YulBlock","src":"2327:81:34","statements":[{"nativeSrc":"2337:65:34","nodeType":"YulAssignment","src":"2337:65:34","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"2352:4:34","nodeType":"YulIdentifier","src":"2352:4:34"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2370:1:34","nodeType":"YulLiteral","src":"2370:1:34","type":"","value":"3"},{"name":"len","nativeSrc":"2373:3:34","nodeType":"YulIdentifier","src":"2373:3:34"}],"functionName":{"name":"shl","nativeSrc":"2366:3:34","nodeType":"YulIdentifier","src":"2366:3:34"},"nativeSrc":"2366:11:34","nodeType":"YulFunctionCall","src":"2366:11:34"},{"arguments":[{"kind":"number","nativeSrc":"2383:1:34","nodeType":"YulLiteral","src":"2383:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2379:3:34","nodeType":"YulIdentifier","src":"2379:3:34"},"nativeSrc":"2379:6:34","nodeType":"YulFunctionCall","src":"2379:6:34"}],"functionName":{"name":"shr","nativeSrc":"2362:3:34","nodeType":"YulIdentifier","src":"2362:3:34"},"nativeSrc":"2362:24:34","nodeType":"YulFunctionCall","src":"2362:24:34"}],"functionName":{"name":"not","nativeSrc":"2358:3:34","nodeType":"YulIdentifier","src":"2358:3:34"},"nativeSrc":"2358:29:34","nodeType":"YulFunctionCall","src":"2358:29:34"}],"functionName":{"name":"and","nativeSrc":"2348:3:34","nodeType":"YulIdentifier","src":"2348:3:34"},"nativeSrc":"2348:40:34","nodeType":"YulFunctionCall","src":"2348:40:34"},{"arguments":[{"kind":"number","nativeSrc":"2394:1:34","nodeType":"YulLiteral","src":"2394:1:34","type":"","value":"1"},{"name":"len","nativeSrc":"2397:3:34","nodeType":"YulIdentifier","src":"2397:3:34"}],"functionName":{"name":"shl","nativeSrc":"2390:3:34","nodeType":"YulIdentifier","src":"2390:3:34"},"nativeSrc":"2390:11:34","nodeType":"YulFunctionCall","src":"2390:11:34"}],"functionName":{"name":"or","nativeSrc":"2345:2:34","nodeType":"YulIdentifier","src":"2345:2:34"},"nativeSrc":"2345:57:34","nodeType":"YulFunctionCall","src":"2345:57:34"},"variableNames":[{"name":"used","nativeSrc":"2337:4:34","nodeType":"YulIdentifier","src":"2337:4:34"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"2242:166:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"2304:4:34","nodeType":"YulTypedName","src":"2304:4:34","type":""},{"name":"len","nativeSrc":"2310:3:34","nodeType":"YulTypedName","src":"2310:3:34","type":""}],"returnVariables":[{"name":"used","nativeSrc":"2318:4:34","nodeType":"YulTypedName","src":"2318:4:34","type":""}],"src":"2242:166:34"},{"body":{"nativeSrc":"2509:1203:34","nodeType":"YulBlock","src":"2509:1203:34","statements":[{"nativeSrc":"2519:24:34","nodeType":"YulVariableDeclaration","src":"2519:24:34","value":{"arguments":[{"name":"src","nativeSrc":"2539:3:34","nodeType":"YulIdentifier","src":"2539:3:34"}],"functionName":{"name":"mload","nativeSrc":"2533:5:34","nodeType":"YulIdentifier","src":"2533:5:34"},"nativeSrc":"2533:10:34","nodeType":"YulFunctionCall","src":"2533:10:34"},"variables":[{"name":"newLen","nativeSrc":"2523:6:34","nodeType":"YulTypedName","src":"2523:6:34","type":""}]},{"body":{"nativeSrc":"2586:22:34","nodeType":"YulBlock","src":"2586:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2588:16:34","nodeType":"YulIdentifier","src":"2588:16:34"},"nativeSrc":"2588:18:34","nodeType":"YulFunctionCall","src":"2588:18:34"},"nativeSrc":"2588:18:34","nodeType":"YulExpressionStatement","src":"2588:18:34"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"2558:6:34","nodeType":"YulIdentifier","src":"2558:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2574:2:34","nodeType":"YulLiteral","src":"2574:2:34","type":"","value":"64"},{"kind":"number","nativeSrc":"2578:1:34","nodeType":"YulLiteral","src":"2578:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"2570:3:34","nodeType":"YulIdentifier","src":"2570:3:34"},"nativeSrc":"2570:10:34","nodeType":"YulFunctionCall","src":"2570:10:34"},{"kind":"number","nativeSrc":"2582:1:34","nodeType":"YulLiteral","src":"2582:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2566:3:34","nodeType":"YulIdentifier","src":"2566:3:34"},"nativeSrc":"2566:18:34","nodeType":"YulFunctionCall","src":"2566:18:34"}],"functionName":{"name":"gt","nativeSrc":"2555:2:34","nodeType":"YulIdentifier","src":"2555:2:34"},"nativeSrc":"2555:30:34","nodeType":"YulFunctionCall","src":"2555:30:34"},"nativeSrc":"2552:56:34","nodeType":"YulIf","src":"2552:56:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2661:4:34","nodeType":"YulIdentifier","src":"2661:4:34"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"2699:4:34","nodeType":"YulIdentifier","src":"2699:4:34"}],"functionName":{"name":"sload","nativeSrc":"2693:5:34","nodeType":"YulIdentifier","src":"2693:5:34"},"nativeSrc":"2693:11:34","nodeType":"YulFunctionCall","src":"2693:11:34"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"2667:25:34","nodeType":"YulIdentifier","src":"2667:25:34"},"nativeSrc":"2667:38:34","nodeType":"YulFunctionCall","src":"2667:38:34"},{"name":"newLen","nativeSrc":"2707:6:34","nodeType":"YulIdentifier","src":"2707:6:34"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"2617:43:34","nodeType":"YulIdentifier","src":"2617:43:34"},"nativeSrc":"2617:97:34","nodeType":"YulFunctionCall","src":"2617:97:34"},"nativeSrc":"2617:97:34","nodeType":"YulExpressionStatement","src":"2617:97:34"},{"nativeSrc":"2723:18:34","nodeType":"YulVariableDeclaration","src":"2723:18:34","value":{"kind":"number","nativeSrc":"2740:1:34","nodeType":"YulLiteral","src":"2740:1:34","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"2727:9:34","nodeType":"YulTypedName","src":"2727:9:34","type":""}]},{"nativeSrc":"2750:17:34","nodeType":"YulAssignment","src":"2750:17:34","value":{"kind":"number","nativeSrc":"2763:4:34","nodeType":"YulLiteral","src":"2763:4:34","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"2750:9:34","nodeType":"YulIdentifier","src":"2750:9:34"}]},{"cases":[{"body":{"nativeSrc":"2813:642:34","nodeType":"YulBlock","src":"2813:642:34","statements":[{"nativeSrc":"2827:35:34","nodeType":"YulVariableDeclaration","src":"2827:35:34","value":{"arguments":[{"name":"newLen","nativeSrc":"2846:6:34","nodeType":"YulIdentifier","src":"2846:6:34"},{"arguments":[{"kind":"number","nativeSrc":"2858:2:34","nodeType":"YulLiteral","src":"2858:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2854:3:34","nodeType":"YulIdentifier","src":"2854:3:34"},"nativeSrc":"2854:7:34","nodeType":"YulFunctionCall","src":"2854:7:34"}],"functionName":{"name":"and","nativeSrc":"2842:3:34","nodeType":"YulIdentifier","src":"2842:3:34"},"nativeSrc":"2842:20:34","nodeType":"YulFunctionCall","src":"2842:20:34"},"variables":[{"name":"loopEnd","nativeSrc":"2831:7:34","nodeType":"YulTypedName","src":"2831:7:34","type":""}]},{"nativeSrc":"2875:49:34","nodeType":"YulVariableDeclaration","src":"2875:49:34","value":{"arguments":[{"name":"slot","nativeSrc":"2919:4:34","nodeType":"YulIdentifier","src":"2919:4:34"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"2889:29:34","nodeType":"YulIdentifier","src":"2889:29:34"},"nativeSrc":"2889:35:34","nodeType":"YulFunctionCall","src":"2889:35:34"},"variables":[{"name":"dstPtr","nativeSrc":"2879:6:34","nodeType":"YulTypedName","src":"2879:6:34","type":""}]},{"nativeSrc":"2937:10:34","nodeType":"YulVariableDeclaration","src":"2937:10:34","value":{"kind":"number","nativeSrc":"2946:1:34","nodeType":"YulLiteral","src":"2946:1:34","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"2941:1:34","nodeType":"YulTypedName","src":"2941:1:34","type":""}]},{"body":{"nativeSrc":"3017:165:34","nodeType":"YulBlock","src":"3017:165:34","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"3042:6:34","nodeType":"YulIdentifier","src":"3042:6:34"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"3060:3:34","nodeType":"YulIdentifier","src":"3060:3:34"},{"name":"srcOffset","nativeSrc":"3065:9:34","nodeType":"YulIdentifier","src":"3065:9:34"}],"functionName":{"name":"add","nativeSrc":"3056:3:34","nodeType":"YulIdentifier","src":"3056:3:34"},"nativeSrc":"3056:19:34","nodeType":"YulFunctionCall","src":"3056:19:34"}],"functionName":{"name":"mload","nativeSrc":"3050:5:34","nodeType":"YulIdentifier","src":"3050:5:34"},"nativeSrc":"3050:26:34","nodeType":"YulFunctionCall","src":"3050:26:34"}],"functionName":{"name":"sstore","nativeSrc":"3035:6:34","nodeType":"YulIdentifier","src":"3035:6:34"},"nativeSrc":"3035:42:34","nodeType":"YulFunctionCall","src":"3035:42:34"},"nativeSrc":"3035:42:34","nodeType":"YulExpressionStatement","src":"3035:42:34"},{"nativeSrc":"3094:24:34","nodeType":"YulAssignment","src":"3094:24:34","value":{"arguments":[{"name":"dstPtr","nativeSrc":"3108:6:34","nodeType":"YulIdentifier","src":"3108:6:34"},{"kind":"number","nativeSrc":"3116:1:34","nodeType":"YulLiteral","src":"3116:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3104:3:34","nodeType":"YulIdentifier","src":"3104:3:34"},"nativeSrc":"3104:14:34","nodeType":"YulFunctionCall","src":"3104:14:34"},"variableNames":[{"name":"dstPtr","nativeSrc":"3094:6:34","nodeType":"YulIdentifier","src":"3094:6:34"}]},{"nativeSrc":"3135:33:34","nodeType":"YulAssignment","src":"3135:33:34","value":{"arguments":[{"name":"srcOffset","nativeSrc":"3152:9:34","nodeType":"YulIdentifier","src":"3152:9:34"},{"kind":"number","nativeSrc":"3163:4:34","nodeType":"YulLiteral","src":"3163:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3148:3:34","nodeType":"YulIdentifier","src":"3148:3:34"},"nativeSrc":"3148:20:34","nodeType":"YulFunctionCall","src":"3148:20:34"},"variableNames":[{"name":"srcOffset","nativeSrc":"3135:9:34","nodeType":"YulIdentifier","src":"3135:9:34"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"2971:1:34","nodeType":"YulIdentifier","src":"2971:1:34"},{"name":"loopEnd","nativeSrc":"2974:7:34","nodeType":"YulIdentifier","src":"2974:7:34"}],"functionName":{"name":"lt","nativeSrc":"2968:2:34","nodeType":"YulIdentifier","src":"2968:2:34"},"nativeSrc":"2968:14:34","nodeType":"YulFunctionCall","src":"2968:14:34"},"nativeSrc":"2960:222:34","nodeType":"YulForLoop","post":{"nativeSrc":"2983:21:34","nodeType":"YulBlock","src":"2983:21:34","statements":[{"nativeSrc":"2985:17:34","nodeType":"YulAssignment","src":"2985:17:34","value":{"arguments":[{"name":"i","nativeSrc":"2994:1:34","nodeType":"YulIdentifier","src":"2994:1:34"},{"kind":"number","nativeSrc":"2997:4:34","nodeType":"YulLiteral","src":"2997:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2990:3:34","nodeType":"YulIdentifier","src":"2990:3:34"},"nativeSrc":"2990:12:34","nodeType":"YulFunctionCall","src":"2990:12:34"},"variableNames":[{"name":"i","nativeSrc":"2985:1:34","nodeType":"YulIdentifier","src":"2985:1:34"}]}]},"pre":{"nativeSrc":"2964:3:34","nodeType":"YulBlock","src":"2964:3:34","statements":[]},"src":"2960:222:34"},{"body":{"nativeSrc":"3230:166:34","nodeType":"YulBlock","src":"3230:166:34","statements":[{"nativeSrc":"3248:43:34","nodeType":"YulVariableDeclaration","src":"3248:43:34","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"3275:3:34","nodeType":"YulIdentifier","src":"3275:3:34"},{"name":"srcOffset","nativeSrc":"3280:9:34","nodeType":"YulIdentifier","src":"3280:9:34"}],"functionName":{"name":"add","nativeSrc":"3271:3:34","nodeType":"YulIdentifier","src":"3271:3:34"},"nativeSrc":"3271:19:34","nodeType":"YulFunctionCall","src":"3271:19:34"}],"functionName":{"name":"mload","nativeSrc":"3265:5:34","nodeType":"YulIdentifier","src":"3265:5:34"},"nativeSrc":"3265:26:34","nodeType":"YulFunctionCall","src":"3265:26:34"},"variables":[{"name":"lastValue","nativeSrc":"3252:9:34","nodeType":"YulTypedName","src":"3252:9:34","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"3315:6:34","nodeType":"YulIdentifier","src":"3315:6:34"},{"arguments":[{"name":"lastValue","nativeSrc":"3327:9:34","nodeType":"YulIdentifier","src":"3327:9:34"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3354:1:34","nodeType":"YulLiteral","src":"3354:1:34","type":"","value":"3"},{"name":"newLen","nativeSrc":"3357:6:34","nodeType":"YulIdentifier","src":"3357:6:34"}],"functionName":{"name":"shl","nativeSrc":"3350:3:34","nodeType":"YulIdentifier","src":"3350:3:34"},"nativeSrc":"3350:14:34","nodeType":"YulFunctionCall","src":"3350:14:34"},{"kind":"number","nativeSrc":"3366:3:34","nodeType":"YulLiteral","src":"3366:3:34","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"3346:3:34","nodeType":"YulIdentifier","src":"3346:3:34"},"nativeSrc":"3346:24:34","nodeType":"YulFunctionCall","src":"3346:24:34"},{"arguments":[{"kind":"number","nativeSrc":"3376:1:34","nodeType":"YulLiteral","src":"3376:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"3372:3:34","nodeType":"YulIdentifier","src":"3372:3:34"},"nativeSrc":"3372:6:34","nodeType":"YulFunctionCall","src":"3372:6:34"}],"functionName":{"name":"shr","nativeSrc":"3342:3:34","nodeType":"YulIdentifier","src":"3342:3:34"},"nativeSrc":"3342:37:34","nodeType":"YulFunctionCall","src":"3342:37:34"}],"functionName":{"name":"not","nativeSrc":"3338:3:34","nodeType":"YulIdentifier","src":"3338:3:34"},"nativeSrc":"3338:42:34","nodeType":"YulFunctionCall","src":"3338:42:34"}],"functionName":{"name":"and","nativeSrc":"3323:3:34","nodeType":"YulIdentifier","src":"3323:3:34"},"nativeSrc":"3323:58:34","nodeType":"YulFunctionCall","src":"3323:58:34"}],"functionName":{"name":"sstore","nativeSrc":"3308:6:34","nodeType":"YulIdentifier","src":"3308:6:34"},"nativeSrc":"3308:74:34","nodeType":"YulFunctionCall","src":"3308:74:34"},"nativeSrc":"3308:74:34","nodeType":"YulExpressionStatement","src":"3308:74:34"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"3201:7:34","nodeType":"YulIdentifier","src":"3201:7:34"},{"name":"newLen","nativeSrc":"3210:6:34","nodeType":"YulIdentifier","src":"3210:6:34"}],"functionName":{"name":"lt","nativeSrc":"3198:2:34","nodeType":"YulIdentifier","src":"3198:2:34"},"nativeSrc":"3198:19:34","nodeType":"YulFunctionCall","src":"3198:19:34"},"nativeSrc":"3195:201:34","nodeType":"YulIf","src":"3195:201:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"3416:4:34","nodeType":"YulIdentifier","src":"3416:4:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3430:1:34","nodeType":"YulLiteral","src":"3430:1:34","type":"","value":"1"},{"name":"newLen","nativeSrc":"3433:6:34","nodeType":"YulIdentifier","src":"3433:6:34"}],"functionName":{"name":"shl","nativeSrc":"3426:3:34","nodeType":"YulIdentifier","src":"3426:3:34"},"nativeSrc":"3426:14:34","nodeType":"YulFunctionCall","src":"3426:14:34"},{"kind":"number","nativeSrc":"3442:1:34","nodeType":"YulLiteral","src":"3442:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3422:3:34","nodeType":"YulIdentifier","src":"3422:3:34"},"nativeSrc":"3422:22:34","nodeType":"YulFunctionCall","src":"3422:22:34"}],"functionName":{"name":"sstore","nativeSrc":"3409:6:34","nodeType":"YulIdentifier","src":"3409:6:34"},"nativeSrc":"3409:36:34","nodeType":"YulFunctionCall","src":"3409:36:34"},"nativeSrc":"3409:36:34","nodeType":"YulExpressionStatement","src":"3409:36:34"}]},"nativeSrc":"2806:649:34","nodeType":"YulCase","src":"2806:649:34","value":{"kind":"number","nativeSrc":"2811:1:34","nodeType":"YulLiteral","src":"2811:1:34","type":"","value":"1"}},{"body":{"nativeSrc":"3472:234:34","nodeType":"YulBlock","src":"3472:234:34","statements":[{"nativeSrc":"3486:14:34","nodeType":"YulVariableDeclaration","src":"3486:14:34","value":{"kind":"number","nativeSrc":"3499:1:34","nodeType":"YulLiteral","src":"3499:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3490:5:34","nodeType":"YulTypedName","src":"3490:5:34","type":""}]},{"body":{"nativeSrc":"3535:67:34","nodeType":"YulBlock","src":"3535:67:34","statements":[{"nativeSrc":"3553:35:34","nodeType":"YulAssignment","src":"3553:35:34","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"3572:3:34","nodeType":"YulIdentifier","src":"3572:3:34"},{"name":"srcOffset","nativeSrc":"3577:9:34","nodeType":"YulIdentifier","src":"3577:9:34"}],"functionName":{"name":"add","nativeSrc":"3568:3:34","nodeType":"YulIdentifier","src":"3568:3:34"},"nativeSrc":"3568:19:34","nodeType":"YulFunctionCall","src":"3568:19:34"}],"functionName":{"name":"mload","nativeSrc":"3562:5:34","nodeType":"YulIdentifier","src":"3562:5:34"},"nativeSrc":"3562:26:34","nodeType":"YulFunctionCall","src":"3562:26:34"},"variableNames":[{"name":"value","nativeSrc":"3553:5:34","nodeType":"YulIdentifier","src":"3553:5:34"}]}]},"condition":{"name":"newLen","nativeSrc":"3516:6:34","nodeType":"YulIdentifier","src":"3516:6:34"},"nativeSrc":"3513:89:34","nodeType":"YulIf","src":"3513:89:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"3622:4:34","nodeType":"YulIdentifier","src":"3622:4:34"},{"arguments":[{"name":"value","nativeSrc":"3681:5:34","nodeType":"YulIdentifier","src":"3681:5:34"},{"name":"newLen","nativeSrc":"3688:6:34","nodeType":"YulIdentifier","src":"3688:6:34"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"3628:52:34","nodeType":"YulIdentifier","src":"3628:52:34"},"nativeSrc":"3628:67:34","nodeType":"YulFunctionCall","src":"3628:67:34"}],"functionName":{"name":"sstore","nativeSrc":"3615:6:34","nodeType":"YulIdentifier","src":"3615:6:34"},"nativeSrc":"3615:81:34","nodeType":"YulFunctionCall","src":"3615:81:34"},"nativeSrc":"3615:81:34","nodeType":"YulExpressionStatement","src":"3615:81:34"}]},"nativeSrc":"3464:242:34","nodeType":"YulCase","src":"3464:242:34","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"2786:6:34","nodeType":"YulIdentifier","src":"2786:6:34"},{"kind":"number","nativeSrc":"2794:2:34","nodeType":"YulLiteral","src":"2794:2:34","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"2783:2:34","nodeType":"YulIdentifier","src":"2783:2:34"},"nativeSrc":"2783:14:34","nodeType":"YulFunctionCall","src":"2783:14:34"},"nativeSrc":"2776:930:34","nodeType":"YulSwitch","src":"2776:930:34"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"2413:1299:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"2494:4:34","nodeType":"YulTypedName","src":"2494:4:34","type":""},{"name":"src","nativeSrc":"2500:3:34","nodeType":"YulTypedName","src":"2500:3:34","type":""}],"src":"2413:1299:34"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_uint256t_bytes32t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        let offset := mload(add(headStart, 64))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := mload(_1)\n        if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 0x1f), not(31)), 63), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, length)\n        if gt(add(add(_1, length), 32), dataEnd) { revert(0, 0) }\n        mcopy(add(memPtr, 32), add(_1, 32), length)\n        mstore(add(add(memPtr, length), 32), 0)\n        value2 := memPtr\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561000f575f80fd5b5060405161053038038061053083398101604081905261002e9161006f565b600183905560028390555f83815260036020526040812083905561005282826101b6565b50505050610270565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610081575f80fd5b83516020850151604086015191945092506001600160401b038111156100a5575f80fd5b8401601f810186136100b5575f80fd5b80516001600160401b038111156100ce576100ce61005b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100fc576100fc61005b565b604052818152828201602001881015610113575f80fd5b8160208401602083015e5f602083830101528093505050509250925092565b600181811c9082168061014657607f821691505b60208210810361016457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156101b157805f5260205f20601f840160051c8101602085101561018f5750805b601f840160051c820191505b818110156101ae575f815560010161019b565b50505b505050565b81516001600160401b038111156101cf576101cf61005b565b6101e3816101dd8454610132565b8461016a565b6020601f821160018114610215575f83156101fe5750848201515b5f19600385901b1c1916600184901b1784556101ae565b5f84815260208120601f198516915b828110156102445787850151825560209485019460019092019101610224565b508482101561026157868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b6102b38061027d5f395ff3fe608060405234801561000f575f80fd5b5060043610610064575f3560e01c806385df51fd1161004d57806385df51fd1461009d57806394f490bd146100bc578063e405bbc3146100d1575f80fd5b8063107bf28c1461006857806326a6557a14610086575b5f80fd5b6100706100da565b60405161007d91906101fe565b60405180910390f35b61008f60015481565b60405190815260200161007d565b61008f6100ab366004610233565b5f9081526003602052604090205490565b6100cf6100ca366004610233565b610165565b005b61008f60025481565b5f80546100e69061024a565b80601f01602080910402602001604051908101604052809291908181526020018280546101129061024a565b801561015d5780601f106101345761010080835404028352916020019161015d565b820191905f5260205f20905b81548152906001019060200180831161014057829003601f168201915b505050505081565b3373bc100000000000000000000000000000000010001461019957604051634ca8886760e01b815260040160405180910390fd5b5f60025f81546101a890610282565b91829055505f8181526003602052604090819020849055519091507fdd5483f1119d050d70b0fe3ed9db0b5f41b3ec55838346cbb624efe0565b0133906101f29083815260200190565b60405180910390a15050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215610243575f80fd5b5035919050565b600181811c9082168061025e57607f821691505b60208210810361027c57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f6001820161029f57634e487b7160e01b5f52601160045260245ffd5b506001019056fea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x530 CODESIZE SUB DUP1 PUSH2 0x530 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x6F JUMP JUMPDEST PUSH1 0x1 DUP4 SWAP1 SSTORE PUSH1 0x2 DUP4 SWAP1 SSTORE PUSH0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 SWAP1 SSTORE PUSH2 0x52 DUP3 DUP3 PUSH2 0x1B6 JUMP JUMPDEST POP POP POP POP PUSH2 0x270 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x81 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0xB5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xCE JUMPI PUSH2 0xCE PUSH2 0x5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xFC JUMPI PUSH2 0xFC PUSH2 0x5B JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP3 DUP3 ADD PUSH1 0x20 ADD DUP9 LT ISZERO PUSH2 0x113 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD MCOPY PUSH0 PUSH1 0x20 DUP4 DUP4 ADD ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x146 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x164 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1B1 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x18F JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AE JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x19B JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1CF JUMPI PUSH2 0x1CF PUSH2 0x5B JUMP JUMPDEST PUSH2 0x1E3 DUP2 PUSH2 0x1DD DUP5 SLOAD PUSH2 0x132 JUMP JUMPDEST DUP5 PUSH2 0x16A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x215 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x1FE JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x1AE JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x244 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x224 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x261 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2B3 DUP1 PUSH2 0x27D PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x64 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85DF51FD GT PUSH2 0x4D JUMPI DUP1 PUSH4 0x85DF51FD EQ PUSH2 0x9D JUMPI DUP1 PUSH4 0x94F490BD EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xE405BBC3 EQ PUSH2 0xD1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x107BF28C EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x26A6557A EQ PUSH2 0x86 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x70 PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7D SWAP2 SWAP1 PUSH2 0x1FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8F PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7D JUMP JUMPDEST PUSH2 0x8F PUSH2 0xAB CALLDATASIZE PUSH1 0x4 PUSH2 0x233 JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xCF PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x233 JUMP JUMPDEST PUSH2 0x165 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8F PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH2 0xE6 SWAP1 PUSH2 0x24A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x112 SWAP1 PUSH2 0x24A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x15D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x134 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x15D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x140 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x199 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x2 PUSH0 DUP2 SLOAD PUSH2 0x1A8 SWAP1 PUSH2 0x282 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP PUSH32 0xDD5483F1119D050D70B0FE3ED9DB0B5F41B3EC55838346CBB624EFE0565B0133 SWAP1 PUSH2 0x1F2 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x243 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x25E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x27C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP3 ADD PUSH2 0x29F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"195:869:22:-:0;;;439:203;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;517:11;:21;;;548:12;:22;;;-1:-1:-1;580:15:22;;;:6;:15;;;;;:23;;;613:22;627:8;-1:-1:-1;613:22:22;:::i;:::-;;439:203;;;195:869;;14:127:34;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1057;244:6;252;260;313:2;301:9;292:7;288:23;284:32;281:52;;;329:1;326;319:12;281:52;352:16;;408:2;393:18;;387:25;456:2;441:18;;435:25;352:16;;-1:-1:-1;387:25:34;-1:-1:-1;;;;;;472:30:34;;469:50;;;515:1;512;505:12;469:50;538:22;;591:4;583:13;;579:27;-1:-1:-1;569:55:34;;620:1;617;610:12;569:55;647:9;;-1:-1:-1;;;;;668:30:34;;665:56;;;701:18;;:::i;:::-;750:2;744:9;842:2;804:17;;-1:-1:-1;;800:31:34;;;833:2;796:40;792:54;780:67;;-1:-1:-1;;;;;862:34:34;;898:22;;;859:62;856:88;;;924:18;;:::i;:::-;960:2;953:22;984;;;1025:15;;;1042:2;1021:24;1018:37;-1:-1:-1;1015:57:34;;;1068:1;1065;1058:12;1015:57;1117:6;1112:2;1108;1104:11;1099:2;1091:6;1087:15;1081:43;1170:1;1165:2;1156:6;1148;1144:19;1140:28;1133:39;1191:6;1181:16;;;;;146:1057;;;;;:::o;1208:380::-;1287:1;1283:12;;;;1330;;;1351:61;;1405:4;1397:6;1393:17;1383:27;;1351:61;1458:2;1450:6;1447:14;1427:18;1424:38;1421:161;;1504:10;1499:3;1495:20;1492:1;1485:31;1539:4;1536:1;1529:15;1567:4;1564:1;1557:15;1421:161;;1208:380;;;:::o;1719:518::-;1821:2;1816:3;1813:11;1810:421;;;1857:5;1854:1;1847:16;1901:4;1898:1;1888:18;1971:2;1959:10;1955:19;1952:1;1948:27;1942:4;1938:38;2007:4;1995:10;1992:20;1989:47;;;-1:-1:-1;2030:4:34;1989:47;2085:2;2080:3;2076:12;2073:1;2069:20;2063:4;2059:31;2049:41;;2140:81;2158:2;2151:5;2148:13;2140:81;;;2217:1;2203:16;;2184:1;2173:13;2140:81;;;2144:3;;1810:421;1719:518;;;:::o;2413:1299::-;2533:10;;-1:-1:-1;;;;;2555:30:34;;2552:56;;;2588:18;;:::i;:::-;2617:97;2707:6;2667:38;2699:4;2693:11;2667:38;:::i;:::-;2661:4;2617:97;:::i;:::-;2763:4;2794:2;2783:14;;2811:1;2806:649;;;;3499:1;3516:6;3513:89;;;-1:-1:-1;3568:19:34;;;3562:26;3513:89;-1:-1:-1;;2370:1:34;2366:11;;;2362:24;2358:29;2348:40;2394:1;2390:11;;;2345:57;3615:81;;2776:930;;2806:649;1666:1;1659:14;;;1703:4;1690:18;;-1:-1:-1;;2842:20:34;;;2960:222;2974:7;2971:1;2968:14;2960:222;;;3056:19;;;3050:26;3035:42;;3163:4;3148:20;;;;3116:1;3104:14;;;;2990:12;2960:222;;;2964:3;3210:6;3201:7;3198:19;3195:201;;;3271:19;;;3265:26;-1:-1:-1;;3354:1:34;3350:14;;;3366:3;3346:24;3342:37;3338:42;3323:58;3308:74;;3195:201;-1:-1:-1;;;;3442:1:34;3426:14;;;3422:22;3409:36;;-1:-1:-1;2413:1299:34:o;:::-;195:869:22;;;;;;"},"deployedBytecode":{"functionDebugData":{"@blockHash_4026":{"entryPoint":null,"id":4026,"parameterSlots":1,"returnSlots":1},"@latestHeight_3957":{"entryPoint":null,"id":3957,"parameterSlots":0,"returnSlots":0},"@networkName_3953":{"entryPoint":218,"id":3953,"parameterSlots":0,"returnSlots":0},"@newBlockHash_4013":{"entryPoint":357,"id":4013,"parameterSlots":1,"returnSlots":0},"@startHeight_3955":{"entryPoint":null,"id":3955,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":563,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":510,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":586,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":642,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1790:34","nodeType":"YulBlock","src":"0:1790:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"135:297:34","nodeType":"YulBlock","src":"135:297:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"152:9:34","nodeType":"YulIdentifier","src":"152:9:34"},{"kind":"number","nativeSrc":"163:2:34","nodeType":"YulLiteral","src":"163:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"145:6:34","nodeType":"YulIdentifier","src":"145:6:34"},"nativeSrc":"145:21:34","nodeType":"YulFunctionCall","src":"145:21:34"},"nativeSrc":"145:21:34","nodeType":"YulExpressionStatement","src":"145:21:34"},{"nativeSrc":"175:27:34","nodeType":"YulVariableDeclaration","src":"175:27:34","value":{"arguments":[{"name":"value0","nativeSrc":"195:6:34","nodeType":"YulIdentifier","src":"195:6:34"}],"functionName":{"name":"mload","nativeSrc":"189:5:34","nodeType":"YulIdentifier","src":"189:5:34"},"nativeSrc":"189:13:34","nodeType":"YulFunctionCall","src":"189:13:34"},"variables":[{"name":"length","nativeSrc":"179:6:34","nodeType":"YulTypedName","src":"179:6:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"222:9:34","nodeType":"YulIdentifier","src":"222:9:34"},{"kind":"number","nativeSrc":"233:2:34","nodeType":"YulLiteral","src":"233:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"218:3:34","nodeType":"YulIdentifier","src":"218:3:34"},"nativeSrc":"218:18:34","nodeType":"YulFunctionCall","src":"218:18:34"},{"name":"length","nativeSrc":"238:6:34","nodeType":"YulIdentifier","src":"238:6:34"}],"functionName":{"name":"mstore","nativeSrc":"211:6:34","nodeType":"YulIdentifier","src":"211:6:34"},"nativeSrc":"211:34:34","nodeType":"YulFunctionCall","src":"211:34:34"},"nativeSrc":"211:34:34","nodeType":"YulExpressionStatement","src":"211:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"264:9:34","nodeType":"YulIdentifier","src":"264:9:34"},{"kind":"number","nativeSrc":"275:2:34","nodeType":"YulLiteral","src":"275:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"260:3:34","nodeType":"YulIdentifier","src":"260:3:34"},"nativeSrc":"260:18:34","nodeType":"YulFunctionCall","src":"260:18:34"},{"arguments":[{"name":"value0","nativeSrc":"284:6:34","nodeType":"YulIdentifier","src":"284:6:34"},{"kind":"number","nativeSrc":"292:2:34","nodeType":"YulLiteral","src":"292:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"280:3:34","nodeType":"YulIdentifier","src":"280:3:34"},"nativeSrc":"280:15:34","nodeType":"YulFunctionCall","src":"280:15:34"},{"name":"length","nativeSrc":"297:6:34","nodeType":"YulIdentifier","src":"297:6:34"}],"functionName":{"name":"mcopy","nativeSrc":"254:5:34","nodeType":"YulIdentifier","src":"254:5:34"},"nativeSrc":"254:50:34","nodeType":"YulFunctionCall","src":"254:50:34"},"nativeSrc":"254:50:34","nodeType":"YulExpressionStatement","src":"254:50:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"328:9:34","nodeType":"YulIdentifier","src":"328:9:34"},{"name":"length","nativeSrc":"339:6:34","nodeType":"YulIdentifier","src":"339:6:34"}],"functionName":{"name":"add","nativeSrc":"324:3:34","nodeType":"YulIdentifier","src":"324:3:34"},"nativeSrc":"324:22:34","nodeType":"YulFunctionCall","src":"324:22:34"},{"kind":"number","nativeSrc":"348:2:34","nodeType":"YulLiteral","src":"348:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"320:3:34","nodeType":"YulIdentifier","src":"320:3:34"},"nativeSrc":"320:31:34","nodeType":"YulFunctionCall","src":"320:31:34"},{"kind":"number","nativeSrc":"353:1:34","nodeType":"YulLiteral","src":"353:1:34","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"313:6:34","nodeType":"YulIdentifier","src":"313:6:34"},"nativeSrc":"313:42:34","nodeType":"YulFunctionCall","src":"313:42:34"},"nativeSrc":"313:42:34","nodeType":"YulExpressionStatement","src":"313:42:34"},{"nativeSrc":"364:62:34","nodeType":"YulAssignment","src":"364:62:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"380:9:34","nodeType":"YulIdentifier","src":"380:9:34"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"399:6:34","nodeType":"YulIdentifier","src":"399:6:34"},{"kind":"number","nativeSrc":"407:2:34","nodeType":"YulLiteral","src":"407:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"395:3:34","nodeType":"YulIdentifier","src":"395:3:34"},"nativeSrc":"395:15:34","nodeType":"YulFunctionCall","src":"395:15:34"},{"arguments":[{"kind":"number","nativeSrc":"416:2:34","nodeType":"YulLiteral","src":"416:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"412:3:34","nodeType":"YulIdentifier","src":"412:3:34"},"nativeSrc":"412:7:34","nodeType":"YulFunctionCall","src":"412:7:34"}],"functionName":{"name":"and","nativeSrc":"391:3:34","nodeType":"YulIdentifier","src":"391:3:34"},"nativeSrc":"391:29:34","nodeType":"YulFunctionCall","src":"391:29:34"}],"functionName":{"name":"add","nativeSrc":"376:3:34","nodeType":"YulIdentifier","src":"376:3:34"},"nativeSrc":"376:45:34","nodeType":"YulFunctionCall","src":"376:45:34"},{"kind":"number","nativeSrc":"423:2:34","nodeType":"YulLiteral","src":"423:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"372:3:34","nodeType":"YulIdentifier","src":"372:3:34"},"nativeSrc":"372:54:34","nodeType":"YulFunctionCall","src":"372:54:34"},"variableNames":[{"name":"tail","nativeSrc":"364:4:34","nodeType":"YulIdentifier","src":"364:4:34"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14:418:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"104:9:34","nodeType":"YulTypedName","src":"104:9:34","type":""},{"name":"value0","nativeSrc":"115:6:34","nodeType":"YulTypedName","src":"115:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"126:4:34","nodeType":"YulTypedName","src":"126:4:34","type":""}],"src":"14:418:34"},{"body":{"nativeSrc":"538:76:34","nodeType":"YulBlock","src":"538:76:34","statements":[{"nativeSrc":"548:26:34","nodeType":"YulAssignment","src":"548:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"560:9:34","nodeType":"YulIdentifier","src":"560:9:34"},{"kind":"number","nativeSrc":"571:2:34","nodeType":"YulLiteral","src":"571:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"556:3:34","nodeType":"YulIdentifier","src":"556:3:34"},"nativeSrc":"556:18:34","nodeType":"YulFunctionCall","src":"556:18:34"},"variableNames":[{"name":"tail","nativeSrc":"548:4:34","nodeType":"YulIdentifier","src":"548:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"590:9:34","nodeType":"YulIdentifier","src":"590:9:34"},{"name":"value0","nativeSrc":"601:6:34","nodeType":"YulIdentifier","src":"601:6:34"}],"functionName":{"name":"mstore","nativeSrc":"583:6:34","nodeType":"YulIdentifier","src":"583:6:34"},"nativeSrc":"583:25:34","nodeType":"YulFunctionCall","src":"583:25:34"},"nativeSrc":"583:25:34","nodeType":"YulExpressionStatement","src":"583:25:34"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"437:177:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"507:9:34","nodeType":"YulTypedName","src":"507:9:34","type":""},{"name":"value0","nativeSrc":"518:6:34","nodeType":"YulTypedName","src":"518:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"529:4:34","nodeType":"YulTypedName","src":"529:4:34","type":""}],"src":"437:177:34"},{"body":{"nativeSrc":"689:110:34","nodeType":"YulBlock","src":"689:110:34","statements":[{"body":{"nativeSrc":"735:16:34","nodeType":"YulBlock","src":"735:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"744:1:34","nodeType":"YulLiteral","src":"744:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"747:1:34","nodeType":"YulLiteral","src":"747:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"737:6:34","nodeType":"YulIdentifier","src":"737:6:34"},"nativeSrc":"737:12:34","nodeType":"YulFunctionCall","src":"737:12:34"},"nativeSrc":"737:12:34","nodeType":"YulExpressionStatement","src":"737:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"710:7:34","nodeType":"YulIdentifier","src":"710:7:34"},{"name":"headStart","nativeSrc":"719:9:34","nodeType":"YulIdentifier","src":"719:9:34"}],"functionName":{"name":"sub","nativeSrc":"706:3:34","nodeType":"YulIdentifier","src":"706:3:34"},"nativeSrc":"706:23:34","nodeType":"YulFunctionCall","src":"706:23:34"},{"kind":"number","nativeSrc":"731:2:34","nodeType":"YulLiteral","src":"731:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"702:3:34","nodeType":"YulIdentifier","src":"702:3:34"},"nativeSrc":"702:32:34","nodeType":"YulFunctionCall","src":"702:32:34"},"nativeSrc":"699:52:34","nodeType":"YulIf","src":"699:52:34"},{"nativeSrc":"760:33:34","nodeType":"YulAssignment","src":"760:33:34","value":{"arguments":[{"name":"headStart","nativeSrc":"783:9:34","nodeType":"YulIdentifier","src":"783:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"770:12:34","nodeType":"YulIdentifier","src":"770:12:34"},"nativeSrc":"770:23:34","nodeType":"YulFunctionCall","src":"770:23:34"},"variableNames":[{"name":"value0","nativeSrc":"760:6:34","nodeType":"YulIdentifier","src":"760:6:34"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"619:180:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"655:9:34","nodeType":"YulTypedName","src":"655:9:34","type":""},{"name":"dataEnd","nativeSrc":"666:7:34","nodeType":"YulTypedName","src":"666:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"678:6:34","nodeType":"YulTypedName","src":"678:6:34","type":""}],"src":"619:180:34"},{"body":{"nativeSrc":"905:76:34","nodeType":"YulBlock","src":"905:76:34","statements":[{"nativeSrc":"915:26:34","nodeType":"YulAssignment","src":"915:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"927:9:34","nodeType":"YulIdentifier","src":"927:9:34"},{"kind":"number","nativeSrc":"938:2:34","nodeType":"YulLiteral","src":"938:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"923:3:34","nodeType":"YulIdentifier","src":"923:3:34"},"nativeSrc":"923:18:34","nodeType":"YulFunctionCall","src":"923:18:34"},"variableNames":[{"name":"tail","nativeSrc":"915:4:34","nodeType":"YulIdentifier","src":"915:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"957:9:34","nodeType":"YulIdentifier","src":"957:9:34"},{"name":"value0","nativeSrc":"968:6:34","nodeType":"YulIdentifier","src":"968:6:34"}],"functionName":{"name":"mstore","nativeSrc":"950:6:34","nodeType":"YulIdentifier","src":"950:6:34"},"nativeSrc":"950:25:34","nodeType":"YulFunctionCall","src":"950:25:34"},"nativeSrc":"950:25:34","nodeType":"YulExpressionStatement","src":"950:25:34"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"804:177:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"874:9:34","nodeType":"YulTypedName","src":"874:9:34","type":""},{"name":"value0","nativeSrc":"885:6:34","nodeType":"YulTypedName","src":"885:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"896:4:34","nodeType":"YulTypedName","src":"896:4:34","type":""}],"src":"804:177:34"},{"body":{"nativeSrc":"1056:110:34","nodeType":"YulBlock","src":"1056:110:34","statements":[{"body":{"nativeSrc":"1102:16:34","nodeType":"YulBlock","src":"1102:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1111:1:34","nodeType":"YulLiteral","src":"1111:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1114:1:34","nodeType":"YulLiteral","src":"1114:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1104:6:34","nodeType":"YulIdentifier","src":"1104:6:34"},"nativeSrc":"1104:12:34","nodeType":"YulFunctionCall","src":"1104:12:34"},"nativeSrc":"1104:12:34","nodeType":"YulExpressionStatement","src":"1104:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1077:7:34","nodeType":"YulIdentifier","src":"1077:7:34"},{"name":"headStart","nativeSrc":"1086:9:34","nodeType":"YulIdentifier","src":"1086:9:34"}],"functionName":{"name":"sub","nativeSrc":"1073:3:34","nodeType":"YulIdentifier","src":"1073:3:34"},"nativeSrc":"1073:23:34","nodeType":"YulFunctionCall","src":"1073:23:34"},{"kind":"number","nativeSrc":"1098:2:34","nodeType":"YulLiteral","src":"1098:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1069:3:34","nodeType":"YulIdentifier","src":"1069:3:34"},"nativeSrc":"1069:32:34","nodeType":"YulFunctionCall","src":"1069:32:34"},"nativeSrc":"1066:52:34","nodeType":"YulIf","src":"1066:52:34"},{"nativeSrc":"1127:33:34","nodeType":"YulAssignment","src":"1127:33:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1150:9:34","nodeType":"YulIdentifier","src":"1150:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"1137:12:34","nodeType":"YulIdentifier","src":"1137:12:34"},"nativeSrc":"1137:23:34","nodeType":"YulFunctionCall","src":"1137:23:34"},"variableNames":[{"name":"value0","nativeSrc":"1127:6:34","nodeType":"YulIdentifier","src":"1127:6:34"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"986:180:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1022:9:34","nodeType":"YulTypedName","src":"1022:9:34","type":""},{"name":"dataEnd","nativeSrc":"1033:7:34","nodeType":"YulTypedName","src":"1033:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1045:6:34","nodeType":"YulTypedName","src":"1045:6:34","type":""}],"src":"986:180:34"},{"body":{"nativeSrc":"1226:325:34","nodeType":"YulBlock","src":"1226:325:34","statements":[{"nativeSrc":"1236:22:34","nodeType":"YulAssignment","src":"1236:22:34","value":{"arguments":[{"kind":"number","nativeSrc":"1250:1:34","nodeType":"YulLiteral","src":"1250:1:34","type":"","value":"1"},{"name":"data","nativeSrc":"1253:4:34","nodeType":"YulIdentifier","src":"1253:4:34"}],"functionName":{"name":"shr","nativeSrc":"1246:3:34","nodeType":"YulIdentifier","src":"1246:3:34"},"nativeSrc":"1246:12:34","nodeType":"YulFunctionCall","src":"1246:12:34"},"variableNames":[{"name":"length","nativeSrc":"1236:6:34","nodeType":"YulIdentifier","src":"1236:6:34"}]},{"nativeSrc":"1267:38:34","nodeType":"YulVariableDeclaration","src":"1267:38:34","value":{"arguments":[{"name":"data","nativeSrc":"1297:4:34","nodeType":"YulIdentifier","src":"1297:4:34"},{"kind":"number","nativeSrc":"1303:1:34","nodeType":"YulLiteral","src":"1303:1:34","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"1293:3:34","nodeType":"YulIdentifier","src":"1293:3:34"},"nativeSrc":"1293:12:34","nodeType":"YulFunctionCall","src":"1293:12:34"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"1271:18:34","nodeType":"YulTypedName","src":"1271:18:34","type":""}]},{"body":{"nativeSrc":"1344:31:34","nodeType":"YulBlock","src":"1344:31:34","statements":[{"nativeSrc":"1346:27:34","nodeType":"YulAssignment","src":"1346:27:34","value":{"arguments":[{"name":"length","nativeSrc":"1360:6:34","nodeType":"YulIdentifier","src":"1360:6:34"},{"kind":"number","nativeSrc":"1368:4:34","nodeType":"YulLiteral","src":"1368:4:34","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"1356:3:34","nodeType":"YulIdentifier","src":"1356:3:34"},"nativeSrc":"1356:17:34","nodeType":"YulFunctionCall","src":"1356:17:34"},"variableNames":[{"name":"length","nativeSrc":"1346:6:34","nodeType":"YulIdentifier","src":"1346:6:34"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1324:18:34","nodeType":"YulIdentifier","src":"1324:18:34"}],"functionName":{"name":"iszero","nativeSrc":"1317:6:34","nodeType":"YulIdentifier","src":"1317:6:34"},"nativeSrc":"1317:26:34","nodeType":"YulFunctionCall","src":"1317:26:34"},"nativeSrc":"1314:61:34","nodeType":"YulIf","src":"1314:61:34"},{"body":{"nativeSrc":"1434:111:34","nodeType":"YulBlock","src":"1434:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1455:1:34","nodeType":"YulLiteral","src":"1455:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1462:3:34","nodeType":"YulLiteral","src":"1462:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"1467:10:34","nodeType":"YulLiteral","src":"1467:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1458:3:34","nodeType":"YulIdentifier","src":"1458:3:34"},"nativeSrc":"1458:20:34","nodeType":"YulFunctionCall","src":"1458:20:34"}],"functionName":{"name":"mstore","nativeSrc":"1448:6:34","nodeType":"YulIdentifier","src":"1448:6:34"},"nativeSrc":"1448:31:34","nodeType":"YulFunctionCall","src":"1448:31:34"},"nativeSrc":"1448:31:34","nodeType":"YulExpressionStatement","src":"1448:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1499:1:34","nodeType":"YulLiteral","src":"1499:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"1502:4:34","nodeType":"YulLiteral","src":"1502:4:34","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"1492:6:34","nodeType":"YulIdentifier","src":"1492:6:34"},"nativeSrc":"1492:15:34","nodeType":"YulFunctionCall","src":"1492:15:34"},"nativeSrc":"1492:15:34","nodeType":"YulExpressionStatement","src":"1492:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1527:1:34","nodeType":"YulLiteral","src":"1527:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1530:4:34","nodeType":"YulLiteral","src":"1530:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1520:6:34","nodeType":"YulIdentifier","src":"1520:6:34"},"nativeSrc":"1520:15:34","nodeType":"YulFunctionCall","src":"1520:15:34"},"nativeSrc":"1520:15:34","nodeType":"YulExpressionStatement","src":"1520:15:34"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1390:18:34","nodeType":"YulIdentifier","src":"1390:18:34"},{"arguments":[{"name":"length","nativeSrc":"1413:6:34","nodeType":"YulIdentifier","src":"1413:6:34"},{"kind":"number","nativeSrc":"1421:2:34","nodeType":"YulLiteral","src":"1421:2:34","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"1410:2:34","nodeType":"YulIdentifier","src":"1410:2:34"},"nativeSrc":"1410:14:34","nodeType":"YulFunctionCall","src":"1410:14:34"}],"functionName":{"name":"eq","nativeSrc":"1387:2:34","nodeType":"YulIdentifier","src":"1387:2:34"},"nativeSrc":"1387:38:34","nodeType":"YulFunctionCall","src":"1387:38:34"},"nativeSrc":"1384:161:34","nodeType":"YulIf","src":"1384:161:34"}]},"name":"extract_byte_array_length","nativeSrc":"1171:380:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1206:4:34","nodeType":"YulTypedName","src":"1206:4:34","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1215:6:34","nodeType":"YulTypedName","src":"1215:6:34","type":""}],"src":"1171:380:34"},{"body":{"nativeSrc":"1603:185:34","nodeType":"YulBlock","src":"1603:185:34","statements":[{"body":{"nativeSrc":"1642:111:34","nodeType":"YulBlock","src":"1642:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1663:1:34","nodeType":"YulLiteral","src":"1663:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1670:3:34","nodeType":"YulLiteral","src":"1670:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"1675:10:34","nodeType":"YulLiteral","src":"1675:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1666:3:34","nodeType":"YulIdentifier","src":"1666:3:34"},"nativeSrc":"1666:20:34","nodeType":"YulFunctionCall","src":"1666:20:34"}],"functionName":{"name":"mstore","nativeSrc":"1656:6:34","nodeType":"YulIdentifier","src":"1656:6:34"},"nativeSrc":"1656:31:34","nodeType":"YulFunctionCall","src":"1656:31:34"},"nativeSrc":"1656:31:34","nodeType":"YulExpressionStatement","src":"1656:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1707:1:34","nodeType":"YulLiteral","src":"1707:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"1710:4:34","nodeType":"YulLiteral","src":"1710:4:34","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1700:6:34","nodeType":"YulIdentifier","src":"1700:6:34"},"nativeSrc":"1700:15:34","nodeType":"YulFunctionCall","src":"1700:15:34"},"nativeSrc":"1700:15:34","nodeType":"YulExpressionStatement","src":"1700:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1735:1:34","nodeType":"YulLiteral","src":"1735:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1738:4:34","nodeType":"YulLiteral","src":"1738:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1728:6:34","nodeType":"YulIdentifier","src":"1728:6:34"},"nativeSrc":"1728:15:34","nodeType":"YulFunctionCall","src":"1728:15:34"},"nativeSrc":"1728:15:34","nodeType":"YulExpressionStatement","src":"1728:15:34"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"1619:5:34","nodeType":"YulIdentifier","src":"1619:5:34"},{"arguments":[{"kind":"number","nativeSrc":"1630:1:34","nodeType":"YulLiteral","src":"1630:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"1626:3:34","nodeType":"YulIdentifier","src":"1626:3:34"},"nativeSrc":"1626:6:34","nodeType":"YulFunctionCall","src":"1626:6:34"}],"functionName":{"name":"eq","nativeSrc":"1616:2:34","nodeType":"YulIdentifier","src":"1616:2:34"},"nativeSrc":"1616:17:34","nodeType":"YulFunctionCall","src":"1616:17:34"},"nativeSrc":"1613:140:34","nodeType":"YulIf","src":"1613:140:34"},{"nativeSrc":"1762:20:34","nodeType":"YulAssignment","src":"1762:20:34","value":{"arguments":[{"name":"value","nativeSrc":"1773:5:34","nodeType":"YulIdentifier","src":"1773:5:34"},{"kind":"number","nativeSrc":"1780:1:34","nodeType":"YulLiteral","src":"1780:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"1769:3:34","nodeType":"YulIdentifier","src":"1769:3:34"},"nativeSrc":"1769:13:34","nodeType":"YulFunctionCall","src":"1769:13:34"},"variableNames":[{"name":"ret","nativeSrc":"1762:3:34","nodeType":"YulIdentifier","src":"1762:3:34"}]}]},"name":"increment_t_uint256","nativeSrc":"1556:232:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1585:5:34","nodeType":"YulTypedName","src":"1585:5:34","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1595:3:34","nodeType":"YulTypedName","src":"1595:3:34","type":""}],"src":"1556:232:34"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561000f575f80fd5b5060043610610064575f3560e01c806385df51fd1161004d57806385df51fd1461009d57806394f490bd146100bc578063e405bbc3146100d1575f80fd5b8063107bf28c1461006857806326a6557a14610086575b5f80fd5b6100706100da565b60405161007d91906101fe565b60405180910390f35b61008f60015481565b60405190815260200161007d565b61008f6100ab366004610233565b5f9081526003602052604090205490565b6100cf6100ca366004610233565b610165565b005b61008f60025481565b5f80546100e69061024a565b80601f01602080910402602001604051908101604052809291908181526020018280546101129061024a565b801561015d5780601f106101345761010080835404028352916020019161015d565b820191905f5260205f20905b81548152906001019060200180831161014057829003601f168201915b505050505081565b3373bc100000000000000000000000000000000010001461019957604051634ca8886760e01b815260040160405180910390fd5b5f60025f81546101a890610282565b91829055505f8181526003602052604090819020849055519091507fdd5483f1119d050d70b0fe3ed9db0b5f41b3ec55838346cbb624efe0565b0133906101f29083815260200190565b60405180910390a15050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215610243575f80fd5b5035919050565b600181811c9082168061025e57607f821691505b60208210810361027c57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f6001820161029f57634e487b7160e01b5f52601160045260245ffd5b506001019056fea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x64 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85DF51FD GT PUSH2 0x4D JUMPI DUP1 PUSH4 0x85DF51FD EQ PUSH2 0x9D JUMPI DUP1 PUSH4 0x94F490BD EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xE405BBC3 EQ PUSH2 0xD1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x107BF28C EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x26A6557A EQ PUSH2 0x86 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x70 PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7D SWAP2 SWAP1 PUSH2 0x1FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8F PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7D JUMP JUMPDEST PUSH2 0x8F PUSH2 0xAB CALLDATASIZE PUSH1 0x4 PUSH2 0x233 JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xCF PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x233 JUMP JUMPDEST PUSH2 0x165 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8F PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH2 0xE6 SWAP1 PUSH2 0x24A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x112 SWAP1 PUSH2 0x24A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x15D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x134 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x15D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x140 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x199 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x2 PUSH0 DUP2 SLOAD PUSH2 0x1A8 SWAP1 PUSH2 0x282 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP PUSH32 0xDD5483F1119D050D70B0FE3ED9DB0B5F41B3EC55838346CBB624EFE0565B0133 SWAP1 PUSH2 0x1F2 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x243 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x25E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x27C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP3 ADD PUSH2 0x29F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"195:869:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;242:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;273:26;;;;;;;;;583:25:34;;;571:2;556:18;273:26:22;437:177:34;934:128:22;;;;;;:::i;:::-;1015:7;1041:14;;;:6;:14;;;;;;;934:128;746:182;;;;;;:::i;:::-;;:::i;:::-;;305:27;;;;;;242:25;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;746:182::-;224:10:31;125:42:29;224:30:31;220:82;;277:14;;-1:-1:-1;;;277:14:31;;;;;;;;;;;220:82;823:14:22::1;842:12;;840:14;;;;;:::i;:::-;::::0;;;;-1:-1:-1;864:14:22::1;::::0;;;:6:::1;:14;::::0;;;;;;:22;;;901:20;840:14;;-1:-1:-1;901:20:22::1;::::0;::::1;::::0;840:14;583:25:34;;571:2;556:18;;437:177;901:20:22::1;;;;;;;;813:115;746:182:::0;:::o;14:418:34:-;163:2;152:9;145:21;126:4;195:6;189:13;238:6;233:2;222:9;218:18;211:34;297:6;292:2;284:6;280:15;275:2;264:9;260:18;254:50;353:1;348:2;339:6;328:9;324:22;320:31;313:42;423:2;416;412:7;407:2;399:6;395:15;391:29;380:9;376:45;372:54;364:62;;;14:418;;;;:::o;619:180::-;678:6;731:2;719:9;710:7;706:23;702:32;699:52;;;747:1;744;737:12;699:52;-1:-1:-1;770:23:34;;619:180;-1:-1:-1;619:180:34:o;1171:380::-;1250:1;1246:12;;;;1293;;;1314:61;;1368:4;1360:6;1356:17;1346:27;;1314:61;1421:2;1413:6;1410:14;1390:18;1387:38;1384:161;;1467:10;1462:3;1458:20;1455:1;1448:31;1502:4;1499:1;1492:15;1530:4;1527:1;1520:15;1384:161;;1171:380;;;:::o;1556:232::-;1595:3;1616:17;;;1613:140;;1675:10;1670:3;1666:20;1663:1;1656:31;1710:4;1707:1;1700:15;1738:4;1735:1;1728:15;1613:140;-1:-1:-1;1780:1:34;1769:13;;1556:232::o"},"methodIdentifiers":{"blockHash(uint256)":"85df51fd","latestHeight()":"e405bbc3","networkName()":"107bf28c","newBlockHash(bytes32)":"94f490bd","startHeight()":"26a6557a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_network\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"NewBlockHash\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"blockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"newBlockHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bitcoin/Bitcoin.sol\":\"Bitcoin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/bitcoin/Bitcoin.sol\":{\"content\":\"// SPDX-License-Identifier: Business Source License 1.1\\npragma solidity ^0.8.24;\\n\\nimport {BaseAccess} from \\\"../library/utils/BaseAccess.sol\\\";\\nimport {IBitcoin} from \\\"../interfaces/Bitcoin.sol\\\";\\n\\ncontract Bitcoin is BaseAccess, IBitcoin {\\n    string public networkName;\\n    uint256 public startHeight;\\n    uint256 public latestHeight;\\n\\n    mapping(uint256 height => bytes32 blockHash) internal blocks;\\n\\n    // precompiled, testing only\\n    constructor(uint256 _height, bytes32 _hash, string memory _network) {\\n        startHeight = _height;\\n        latestHeight = _height;\\n        blocks[_height] = _hash;\\n        networkName = _network;\\n    }\\n\\n    // newBlockHash adds next finalized block hash\\n    // Note: the block hash uses little endian\\n    function newBlockHash(bytes32 _hash) external override OnlyRelayer {\\n        uint256 height = ++latestHeight;\\n        blocks[height] = _hash;\\n        emit NewBlockHash(height);\\n    }\\n\\n    function blockHash(\\n        uint256 height\\n    ) external view override returns (bytes32) {\\n        return blocks[height];\\n    }\\n}\\n\",\"keccak256\":\"0x20cf42d93a851854e54437d777d04a31466ffb19bdde56194fb5d402d58b4c41\",\"license\":\"Business Source License 1.1\"},\"contracts/interfaces/Bitcoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface IBitcoin {\\n    event NewBlockHash(uint256 height);\\n\\n    function startHeight() external view returns (uint256);\\n\\n    function latestHeight() external view returns (uint256);\\n\\n    function blockHash(uint256 _height) external view returns (bytes32);\\n\\n    function newBlockHash(bytes32 _hash) external;\\n\\n    function networkName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9160d2258595cdc8224e95d8dfbb8b262a328cec251aef3fd59af181f3b29615\",\"license\":\"MIT\"},\"contracts/library/constants/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Executor {\\n    address internal constant Relayer =\\n        0xBc10000000000000000000000000000000001000;\\n\\n    address internal constant Locking =\\n        0xBC10000000000000000000000000000000001001;\\n}\\n\",\"keccak256\":\"0xa31f071b26279ca8fc6f27cbb14f47f545bf6b170b73d38ca5d797d146f6c285\",\"license\":\"MIT\"},\"contracts/library/utils/BaseAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Executor} from \\\"../constants/Executor.sol\\\";\\n\\ncontract BaseAccess {\\n    error AccessDenied();\\n    error Forbidden();\\n\\n    modifier OnlyRelayer() {\\n        if (msg.sender != Executor.Relayer) {\\n            revert AccessDenied();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7bba2af8e432bc544a2742912750286668be9d970a1508bdf53a3557ebf3e024\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/bridge/Bridge.sol":{"Bridge":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"Forbidden","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"MalformedTax","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"RateLimitExceeded","type":"error"},{"inputs":[],"name":"TaxTooHigh","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Canceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Canceling","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"txid","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"txout","type":"uint32"},{"indexed":false,"internalType":"uint256","name":"tax","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"rate","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"max","type":"uint64"}],"name":"DepositTaxUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"txid","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"txout","type":"uint32"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Paid","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxTxPrice","type":"uint256"}],"name":"RBF","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"","type":"uint16"}],"name":"RateLimitUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Refund","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tax","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxTxPrice","type":"uint256"},{"indexed":false,"internalType":"string","name":"receiver","type":"string"}],"name":"Withdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"rate","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"max","type":"uint64"}],"name":"WithdrawalTaxUpdated","type":"event"},{"inputs":[{"internalType":"uint256","name":"_wid","type":"uint256"}],"name":"cancel1","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_wid","type":"uint256"}],"name":"cancel2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txid","type":"bytes32"},{"internalType":"uint32","name":"_txout","type":"uint32"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"tax","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txid","type":"bytes32"},{"internalType":"uint32","name":"_txout","type":"uint32"}],"name":"isDeposited","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_wid","type":"uint256"},{"internalType":"bytes32","name":"_txid","type":"bytes32"},{"internalType":"uint32","name":"_txout","type":"uint32"},{"internalType":"uint256","name":"_received","type":"uint256"}],"name":"paid","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"param","outputs":[{"internalType":"uint16","name":"rateLimit","type":"uint16"},{"internalType":"uint16","name":"depositTaxBP","type":"uint16"},{"internalType":"uint64","name":"maxDepositTax","type":"uint64"},{"internalType":"uint16","name":"withdrawalTaxBP","type":"uint16"},{"internalType":"uint64","name":"maxWithdrawalTax","type":"uint64"},{"internalType":"uint16","name":"_res1","type":"uint16"},{"internalType":"uint64","name":"_res2","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"receipts","outputs":[{"internalType":"bytes32","name":"txid","type":"bytes32"},{"internalType":"uint32","name":"txout","type":"uint32"},{"internalType":"uint256","name":"received","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_wid","type":"uint256"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_wid","type":"uint256"},{"internalType":"uint16","name":"_maxTxPrice","type":"uint16"}],"name":"replaceByFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_bp","type":"uint16"},{"internalType":"uint64","name":"_max","type":"uint64"}],"name":"setDepositTax","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_sec","type":"uint16"}],"name":"setRateLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_bp","type":"uint16"},{"internalType":"uint64","name":"_max","type":"uint64"}],"name":"setWithdrawalTax","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"id","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_receiver","type":"string"},{"internalType":"uint16","name":"_maxTxPrice","type":"uint16"}],"name":"withdraw","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdrawals","outputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"tax","type":"uint256"},{"internalType":"uint256","name":"maxTxPrice","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"string","name":"receiver","type":"string"},{"internalType":"enum IBridge.WithdrawalStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_4104":{"entryPoint":null,"id":4104,"parameterSlots":1,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":193,"id":146,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":272,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:514:34","nodeType":"YulBlock","src":"0:514:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"95:209:34","nodeType":"YulBlock","src":"95:209:34","statements":[{"body":{"nativeSrc":"141:16:34","nodeType":"YulBlock","src":"141:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:34","nodeType":"YulLiteral","src":"150:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:34","nodeType":"YulLiteral","src":"153:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:34","nodeType":"YulIdentifier","src":"143:6:34"},"nativeSrc":"143:12:34","nodeType":"YulFunctionCall","src":"143:12:34"},"nativeSrc":"143:12:34","nodeType":"YulExpressionStatement","src":"143:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"116:7:34","nodeType":"YulIdentifier","src":"116:7:34"},{"name":"headStart","nativeSrc":"125:9:34","nodeType":"YulIdentifier","src":"125:9:34"}],"functionName":{"name":"sub","nativeSrc":"112:3:34","nodeType":"YulIdentifier","src":"112:3:34"},"nativeSrc":"112:23:34","nodeType":"YulFunctionCall","src":"112:23:34"},{"kind":"number","nativeSrc":"137:2:34","nodeType":"YulLiteral","src":"137:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"108:3:34","nodeType":"YulIdentifier","src":"108:3:34"},"nativeSrc":"108:32:34","nodeType":"YulFunctionCall","src":"108:32:34"},"nativeSrc":"105:52:34","nodeType":"YulIf","src":"105:52:34"},{"nativeSrc":"166:29:34","nodeType":"YulVariableDeclaration","src":"166:29:34","value":{"arguments":[{"name":"headStart","nativeSrc":"185:9:34","nodeType":"YulIdentifier","src":"185:9:34"}],"functionName":{"name":"mload","nativeSrc":"179:5:34","nodeType":"YulIdentifier","src":"179:5:34"},"nativeSrc":"179:16:34","nodeType":"YulFunctionCall","src":"179:16:34"},"variables":[{"name":"value","nativeSrc":"170:5:34","nodeType":"YulTypedName","src":"170:5:34","type":""}]},{"body":{"nativeSrc":"258:16:34","nodeType":"YulBlock","src":"258:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"267:1:34","nodeType":"YulLiteral","src":"267:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"270:1:34","nodeType":"YulLiteral","src":"270:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"260:6:34","nodeType":"YulIdentifier","src":"260:6:34"},"nativeSrc":"260:12:34","nodeType":"YulFunctionCall","src":"260:12:34"},"nativeSrc":"260:12:34","nodeType":"YulExpressionStatement","src":"260:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"217:5:34","nodeType":"YulIdentifier","src":"217:5:34"},{"arguments":[{"name":"value","nativeSrc":"228:5:34","nodeType":"YulIdentifier","src":"228:5:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"243:3:34","nodeType":"YulLiteral","src":"243:3:34","type":"","value":"160"},{"kind":"number","nativeSrc":"248:1:34","nodeType":"YulLiteral","src":"248:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"239:3:34","nodeType":"YulIdentifier","src":"239:3:34"},"nativeSrc":"239:11:34","nodeType":"YulFunctionCall","src":"239:11:34"},{"kind":"number","nativeSrc":"252:1:34","nodeType":"YulLiteral","src":"252:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"235:3:34","nodeType":"YulIdentifier","src":"235:3:34"},"nativeSrc":"235:19:34","nodeType":"YulFunctionCall","src":"235:19:34"}],"functionName":{"name":"and","nativeSrc":"224:3:34","nodeType":"YulIdentifier","src":"224:3:34"},"nativeSrc":"224:31:34","nodeType":"YulFunctionCall","src":"224:31:34"}],"functionName":{"name":"eq","nativeSrc":"214:2:34","nodeType":"YulIdentifier","src":"214:2:34"},"nativeSrc":"214:42:34","nodeType":"YulFunctionCall","src":"214:42:34"}],"functionName":{"name":"iszero","nativeSrc":"207:6:34","nodeType":"YulIdentifier","src":"207:6:34"},"nativeSrc":"207:50:34","nodeType":"YulFunctionCall","src":"207:50:34"},"nativeSrc":"204:70:34","nodeType":"YulIf","src":"204:70:34"},{"nativeSrc":"283:15:34","nodeType":"YulAssignment","src":"283:15:34","value":{"name":"value","nativeSrc":"293:5:34","nodeType":"YulIdentifier","src":"293:5:34"},"variableNames":[{"name":"value0","nativeSrc":"283:6:34","nodeType":"YulIdentifier","src":"283:6:34"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"14:290:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"61:9:34","nodeType":"YulTypedName","src":"61:9:34","type":""},{"name":"dataEnd","nativeSrc":"72:7:34","nodeType":"YulTypedName","src":"72:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"84:6:34","nodeType":"YulTypedName","src":"84:6:34","type":""}],"src":"14:290:34"},{"body":{"nativeSrc":"410:102:34","nodeType":"YulBlock","src":"410:102:34","statements":[{"nativeSrc":"420:26:34","nodeType":"YulAssignment","src":"420:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"432:9:34","nodeType":"YulIdentifier","src":"432:9:34"},{"kind":"number","nativeSrc":"443:2:34","nodeType":"YulLiteral","src":"443:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"428:3:34","nodeType":"YulIdentifier","src":"428:3:34"},"nativeSrc":"428:18:34","nodeType":"YulFunctionCall","src":"428:18:34"},"variableNames":[{"name":"tail","nativeSrc":"420:4:34","nodeType":"YulIdentifier","src":"420:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"462:9:34","nodeType":"YulIdentifier","src":"462:9:34"},{"arguments":[{"name":"value0","nativeSrc":"477:6:34","nodeType":"YulIdentifier","src":"477:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"493:3:34","nodeType":"YulLiteral","src":"493:3:34","type":"","value":"160"},{"kind":"number","nativeSrc":"498:1:34","nodeType":"YulLiteral","src":"498:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"489:3:34","nodeType":"YulIdentifier","src":"489:3:34"},"nativeSrc":"489:11:34","nodeType":"YulFunctionCall","src":"489:11:34"},{"kind":"number","nativeSrc":"502:1:34","nodeType":"YulLiteral","src":"502:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"485:3:34","nodeType":"YulIdentifier","src":"485:3:34"},"nativeSrc":"485:19:34","nodeType":"YulFunctionCall","src":"485:19:34"}],"functionName":{"name":"and","nativeSrc":"473:3:34","nodeType":"YulIdentifier","src":"473:3:34"},"nativeSrc":"473:32:34","nodeType":"YulFunctionCall","src":"473:32:34"}],"functionName":{"name":"mstore","nativeSrc":"455:6:34","nodeType":"YulIdentifier","src":"455:6:34"},"nativeSrc":"455:51:34","nodeType":"YulFunctionCall","src":"455:51:34"},"nativeSrc":"455:51:34","nodeType":"YulExpressionStatement","src":"455:51:34"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"309:203:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"379:9:34","nodeType":"YulTypedName","src":"379:9:34","type":""},{"name":"value0","nativeSrc":"390:6:34","nodeType":"YulTypedName","src":"390:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"401:4:34","nodeType":"YulTypedName","src":"401:4:34","type":""}],"src":"309:203:34"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561000f575f80fd5b50604051611d78380380611d7883398101604081905261002e91610110565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b610065816100c1565b50506040805160e08101825261012c81525f602082018190529181018290526014606082015266071afd498d0000608082015260a0810182905260c0015274071afd498d0000001400000000000000000000012c60015561013d565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60208284031215610120575f80fd5b81516001600160a01b0381168114610136575f80fd5b9392505050565b611c2e8061014a5f395ff3fe608060405260043610610123575f3560e01c80638da5cb5b116100a1578063b55ada3911610071578063c19dd32011610057578063c19dd320146103f0578063d653d8201461040f578063f2fde38b1461042e575f80fd5b8063b55ada39146103a4578063b670ab5e146103d1575f80fd5b80638da5cb5b1461032d578063a81de86914610353578063b3dd64dd14610366578063b3f33eda14610385575f80fd5b80635cc07076116100f657806384a64c12116100dc57806384a64c1214610241578063883d87b1146102605780638aa4af891461030e575f80fd5b80635cc07076146101fb578063715018a61461022d575f80fd5b806301ffc9a7146101275780630f7ee1ec1461015b5780631ccc92c7146101bb578063278ecde1146101da575b5f80fd5b348015610132575f80fd5b5061014661014136600461171d565b61044d565b60405190151581526020015b60405180910390f35b348015610166575f80fd5b5061019b61017536600461174b565b60046020525f9081526040902080546001820154600290920154909163ffffffff169083565b6040805193845263ffffffff909216602084015290820152606001610152565b3480156101c6575f80fd5b506101466101d536600461177a565b61049e565b3480156101e5575f80fd5b506101f96101f436600461174b565b6104f8565b005b348015610206575f80fd5b5061021a61021536600461174b565b6105ec565b60405161015297969594939291906117b8565b348015610238575f80fd5b506101f96106cf565b34801561024c575f80fd5b506101f961025b36600461174b565b6106e2565b34801561026b575f80fd5b506001546102c19061ffff8082169162010000810482169167ffffffffffffffff6401000000008304811692600160601b8104831692600160701b8204831692600160b01b830490911691600160c01b90041687565b6040805161ffff9889168152968816602088015267ffffffffffffffff95861690870152928616606086015290831660808501529390931660a083015290911660c082015260e001610152565b348015610319575f80fd5b506101f9610328366004611850565b6107e5565b348015610338575f80fd5b505f546040516001600160a01b039091168152602001610152565b6101f9610361366004611891565b610932565b348015610371575f80fd5b506101f961038036600461190d565b610cdd565b348015610390575f80fd5b506101f961039f366004611850565b610ec7565b3480156103af575f80fd5b506103c36103be366004611944565b610fe6565b604051908152602001610152565b3480156103dc575f80fd5b506101f96103eb366004611985565b61127c565b3480156103fb575f80fd5b506101f961040a36600461174b565b611430565b34801561041a575f80fd5b506101f96104293660046119af565b61150f565b348015610439575f80fd5b506101f96104483660046119c8565b6115b4565b5f6001600160e01b031982166301ffc9a760e01b148061047d57506001600160e01b031982166366933dc760e01b145b8061049857506001600160e01b0319821663ef04497360e01b145b92915050565b5f8083836040516020016104c992919091825260e01b6001600160e01b031916602082015260240190565b60408051808303601f1901815291815281516020928301205f908152600290925290205460ff16949350505050565b5f6003828154811061050c5761050c6119e1565b5f918252602090912060079091020190506003600682015460ff166005811115610538576105386117a4565b1461055657604051631dd2188d60e31b815260040160405180910390fd5b60068101805460ff1916600417905580546001600160a01b031633811461059057604051634ca8886760e01b815260040160405180910390fd5b426004830155600282015460018301546105bd916105ad91611a09565b6001600160a01b038316906115f1565b60405183907f2e1897b0591d764356194f7a795238a87c1987c7a877568e50d829d547c92b97905f90a2505050565b600381815481106105fb575f80fd5b5f9182526020909120600790910201805460018201546002830154600384015460048501546005860180546001600160a01b03909616975093959294919390929161064590611a1c565b80601f016020809104026020016040519081016040528092919081815260200182805461067190611a1c565b80156106bc5780601f10610693576101008083540402835291602001916106bc565b820191905f5260205f20905b81548152906001019060200180831161069f57829003601f168201915b5050506006909301549192505060ff1687565b6106d7611689565b6106e05f6116b5565b565b5f600382815481106106f6576106f66119e1565b5f918252602090912060079091020190506001600682015460ff166005811115610722576107226117a4565b1461074057604051631dd2188d60e31b815260040160405180910390fd5b80546001600160a01b0316331461076a57604051634ca8886760e01b815260040160405180910390fd5b600154600482015461ffff909116906107839042611a54565b10156107a25760405163a74c1c5f60e01b815260040160405180910390fd5b42600482015560068101805460ff1916600217905560405182907f0106f4416537efff55311ef5e2f9c2a48204fcf84731f2b9d5091d23fc52160c905f90a25050565b6107ed611689565b6127108261ffff16111561081457604051632bc7b84d60e21b815260040160405180910390fd5b670de0b6b3a76400008167ffffffffffffffff16111561084757604051632bc7b84d60e21b815260040160405180910390fd5b5f8261ffff16118015610862575067ffffffffffffffff8116155b1561088057604051630fe9ec7160e41b815260040160405180910390fd5b600180547fffffffffffffffffffff00000000000000000000ffffffffffffffffffffffff16600160601b61ffff85169081027fffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffff1691909117600160701b67ffffffffffffffff8516908102919091179092556040805191825260208201929092527f59b73ca79bcb3dcb02c4d2b81e1a2da4c9fd9857ed81cfb16c5431b502f8c71b91015b60405180910390a15050565b5f83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050825192935050602290911090508061097f5750605a8151115b1561099d5760405163e6c4247b60e01b815260040160405180910390fd5b6040805160e08101825260015461ffff80821683526201000082048116602084015267ffffffffffffffff6401000000008304811694840194909452600160601b8204811660608401819052600160701b830485166080850152600160b01b830490911660a0840152600160c01b90910490921660c082015234915f919015610a7857612710816060015161ffff1684610a379190611a67565b610a419190611a92565b9150806080015167ffffffffffffffff16821115610a6b57806080015167ffffffffffffffff1691505b610a758284611a54565b92505b5f610a886402540be40085611aa5565b90508015610aa957610a9a8184611a09565b9250610aa68185611a54565b93505b5f8661ffff1611610b015760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642074782070726963650000000000000000000000000000000060448201526064015b60405180910390fd5b6402540be400610b1761012c61ffff8916611a67565b610b219190611a67565b8411610b5e5760405162461bcd60e51b815260206004820152600c60248201526b756e6166666f726461626c6560a01b6044820152606401610af8565b5f600380549050905060036040518060e00160405280336001600160a01b031681526020018781526020018681526020018961ffff1681526020014281526020018b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093855250506001602093840181905285548082018755958352918390208451600790960201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390961695909517855550908201519083015560408101516002830155606081015160038301556080810151600483015560a08101519091906005820190610c5d9082611b17565b5060c082015160068201805460ff19166001836005811115610c8157610c816117a4565b02179055505050336001600160a01b0316817fa7aa0bf5f2a5106eb711bca96c8ea6ea0d99ec2c496d4d2c5dc0af8217d43c7c87878b8e8e604051610cca959493929190611bd2565b60405180910390a3505050505050505050565b5f60038381548110610cf157610cf16119e1565b5f918252602090912060079091020190506001600682015460ff166005811115610d1d57610d1d6117a4565b14610d3b57604051631dd2188d60e31b815260040160405180910390fd5b80546001600160a01b03163314610d6557604051634ca8886760e01b815260040160405180910390fd5b600154600482015461ffff90911690610d7e9042611a54565b1015610d9d5760405163a74c1c5f60e01b815260040160405180910390fd5b80600301548261ffff1611610e1a5760405162461bcd60e51b815260206004820152602d60248201527f746865206e65772074782070726963652073686f756c64206265206c6172676560448201527f72207468616e206265666f7265000000000000000000000000000000000000006064820152608401610af8565b6402540be400610e3061012c61ffff8516611a67565b610e3a9190611a67565b816001015411610e7b5760405162461bcd60e51b815260206004820152600c60248201526b756e6166666f726461626c6560a01b6044820152606401610af8565b61ffff82166003820181905542600483015560405190815283907fe6190c43c634720bcd5b72bb0b920b88f8d0a15ae7e5dcbb0582c1bb2f98df4b9060200160405180910390a2505050565b610ecf611689565b6127108261ffff161115610ef657604051632bc7b84d60e21b815260040160405180910390fd5b670de0b6b3a76400008167ffffffffffffffff161115610f2957604051632bc7b84d60e21b815260040160405180910390fd5b5f8261ffff16118015610f44575067ffffffffffffffff8116155b15610f6257604051630fe9ec7160e41b815260040160405180910390fd5b600180546bffffffffffffffffffff000019166201000061ffff85169081026bffffffffffffffff0000000019169190911764010000000067ffffffffffffffff8516908102919091179092556040805191825260208201929092527f1007ff7aec53e9626ce51f25d4e093f290f60da8019c8cf489f0ae2f21ebf76a9101610926565b5f3373bc100000000000000000000000000000000010001461101b57604051634ca8886760e01b815260040160405180910390fd5b5f858560405160200161104592919091825260e01b6001600160e01b031916602082015260240190565b60408051601f1981840301815291815281516020928301205f818152600290935291205490915060ff16156110bc5760405162461bcd60e51b815260206004820152600a60248201527f6475706c696361746564000000000000000000000000000000000000000000006044820152606401610af8565b5f831180156110d757506110d56402540be40084611aa5565b155b6111235760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610af8565b6040805160e08101825260015461ffff808216835262010000820481166020840181905267ffffffffffffffff6401000000008404811695850195909552600160601b830482166060850152600160701b830485166080850152600160b01b830490911660a0840152600160c01b90910490921660c082015290156111fa57612710816020015161ffff16856111b99190611a67565b6111c39190611a92565b9250806040015167ffffffffffffffff168311156111ed57806040015167ffffffffffffffff1692505b6111f78385611a54565b93505b5f8281526002602052604090819020805460ff191660011790555184906001600160a01b038716907fbc0e2d4f64f63e9c6b07a1665a26f689b20e42e836968119499db41c2d315efa9061126a908b908b90899092835263ffffffff919091166020830152604082015260600190565b60405180910390a35050949350505050565b3373bc10000000000000000000000000000000001000146112b057604051634ca8886760e01b815260040160405180910390fd5b5f600385815481106112c4576112c46119e1565b5f9182526020909120600790910201600681015490915060ff1660018160058111156112f2576112f26117a4565b148061130f5750600281600581111561130d5761130d6117a4565b145b611317575f80fd5b6040805160608101825286815263ffffffff86811660208084019182528385018881525f8c8152600492839052959095209351845590516001840180549190931663ffffffff1990911617909155915160029182015560068401805460ff19166005179055429184019190915582015480156113ab576113ab73bc10000000000000000000000000000000000002826115f1565b60018301546040515f91906113bf90611711565b82906040518091039083f5915050801580156113dd573d5f803e3d5ffd5b50506040805187815263ffffffff8716602082015290810185905287907fb74f5dbf34aabe02f20ff775b898acf1a9f70e4fbd48ad50548acae86e1ccd789060600160405180910390a250505050505050565b3373bc100000000000000000000000000000000010001461146457604051634ca8886760e01b815260040160405180910390fd5b5f60038281548110611478576114786119e1565b5f9182526020909120600790910201600681015490915060ff1660018160058111156114a6576114a66117a4565b14806114c3575060028160058111156114c1576114c16117a4565b145b6114cb575f80fd5b60068201805460ff1916600317905542600483015560405183907f829a8683c544ad289ce92d3ce06e9ebad69b18a6916e60ec766c2c217461d8e9905f90a2505050565b611517611689565b5f8161ffff161161156a5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207468726f74746c652073657474696e6700000000000000006044820152606401610af8565b6001805461ffff191661ffff83169081179091556040519081527fe536f709e7276119ff965216f1bbd671ef9ea99059743501129a0c9bec5d37ed9060200160405180910390a150565b6115bc611689565b6001600160a01b0381166115e557604051631e4fbdf760e01b81525f6004820152602401610af8565b6115ee816116b5565b50565b804710156116145760405163cd78605960e01b8152306004820152602401610af8565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461165d576040519150601f19603f3d011682016040523d82523d5f602084013e611662565b606091505b505090508061168457604051630a12f52160e11b815260040160405180910390fd5b505050565b5f546001600160a01b031633146106e05760405163118cdaa760e01b8152336004820152602401610af8565b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600880611c1a83390190565b5f6020828403121561172d575f80fd5b81356001600160e01b031981168114611744575f80fd5b9392505050565b5f6020828403121561175b575f80fd5b5035919050565b803563ffffffff81168114611775575f80fd5b919050565b5f806040838503121561178b575f80fd5b8235915061179b60208401611762565b90509250929050565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b038816815286602082015285604082015284606082015283608082015260e060a08201525f83518060e0840152806020860161010085015e5f6101008285010152610100601f19601f8301168401019150506006831061182d57634e487b7160e01b5f52602160045260245ffd5b8260c083015298975050505050505050565b803561ffff81168114611775575f80fd5b5f8060408385031215611861575f80fd5b61186a8361183f565b9150602083013567ffffffffffffffff81168114611886575f80fd5b809150509250929050565b5f805f604084860312156118a3575f80fd5b833567ffffffffffffffff8111156118b9575f80fd5b8401601f810186136118c9575f80fd5b803567ffffffffffffffff8111156118df575f80fd5b8660208284010111156118f0575f80fd5b60209182019450925061190490850161183f565b90509250925092565b5f806040838503121561191e575f80fd5b8235915061179b6020840161183f565b80356001600160a01b0381168114611775575f80fd5b5f805f8060808587031215611957575f80fd5b8435935061196760208601611762565b92506119756040860161192e565b9396929550929360600135925050565b5f805f8060808587031215611998575f80fd5b843593506020850135925061197560408601611762565b5f602082840312156119bf575f80fd5b6117448261183f565b5f602082840312156119d8575f80fd5b6117448261192e565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610498576104986119f5565b600181811c90821680611a3057607f821691505b602082108103611a4e57634e487b7160e01b5f52602260045260245ffd5b50919050565b81810381811115610498576104986119f5565b8082028115828204841417610498576104986119f5565b634e487b7160e01b5f52601260045260245ffd5b5f82611aa057611aa0611a7e565b500490565b5f82611ab357611ab3611a7e565b500690565b634e487b7160e01b5f52604160045260245ffd5b601f82111561168457805f5260205f20601f840160051c81016020851015611af15750805b601f840160051c820191505b81811015611b10575f8155600101611afd565b5050505050565b815167ffffffffffffffff811115611b3157611b31611ab8565b611b4581611b3f8454611a1c565b84611acc565b6020601f821160018114611b77575f8315611b605750848201515b5f19600385901b1c1916600184901b178455611b10565b5f84815260208120601f198516915b82811015611ba65787850151825560209485019460019092019101611b86565b5084821015611bc357868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b85815284602082015261ffff8416604082015260806060820152816080820152818360a08301375f81830160a090810191909152601f909201601f1916010194935050505056fe608060405230fffea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1D78 CODESIZE SUB DUP1 PUSH2 0x1D78 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x110 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x65 DUP2 PUSH2 0xC1 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH2 0x12C DUP2 MSTORE PUSH0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x14 PUSH1 0x60 DUP3 ADD MSTORE PUSH7 0x71AFD498D0000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 ADD MSTORE PUSH21 0x71AFD498D0000001400000000000000000000012C PUSH1 0x1 SSTORE PUSH2 0x13D JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x120 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x136 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1C2E DUP1 PUSH2 0x14A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x123 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA1 JUMPI DUP1 PUSH4 0xB55ADA39 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC19DD320 GT PUSH2 0x57 JUMPI DUP1 PUSH4 0xC19DD320 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0xD653D820 EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB55ADA39 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0xB670AB5E EQ PUSH2 0x3D1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xA81DE869 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0xB3DD64DD EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0xB3F33EDA EQ PUSH2 0x385 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CC07076 GT PUSH2 0xF6 JUMPI DUP1 PUSH4 0x84A64C12 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x84A64C12 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x883D87B1 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x8AA4AF89 EQ PUSH2 0x30E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CC07076 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x22D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0xF7EE1EC EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x1CCC92C7 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x278ECDE1 EQ PUSH2 0x1DA JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x132 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x146 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x171D JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x19B PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 PUSH4 0xFFFFFFFF AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x152 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x146 PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x49E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x4F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x6CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x6E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x2C1 SWAP1 PUSH2 0xFFFF DUP1 DUP3 AND SWAP2 PUSH3 0x10000 DUP2 DIV DUP3 AND SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0x60 SHL DUP2 DIV DUP4 AND SWAP3 PUSH1 0x1 PUSH1 0x70 SHL DUP3 DIV DUP4 AND SWAP3 PUSH1 0x1 PUSH1 0xB0 SHL DUP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV AND DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP9 DUP10 AND DUP2 MSTORE SWAP7 DUP9 AND PUSH1 0x20 DUP9 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP7 AND SWAP1 DUP8 ADD MSTORE SWAP3 DUP7 AND PUSH1 0x60 DUP7 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP4 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x152 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x319 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x1850 JUMP JUMPDEST PUSH2 0x7E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x338 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x152 JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x1891 JUMP JUMPDEST PUSH2 0x932 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x371 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x380 CALLDATASIZE PUSH1 0x4 PUSH2 0x190D JUMP JUMPDEST PUSH2 0xCDD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x390 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x1850 JUMP JUMPDEST PUSH2 0xEC7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C3 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1944 JUMP JUMPDEST PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x152 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DC JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0x127C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x1430 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x429 CALLDATASIZE PUSH1 0x4 PUSH2 0x19AF JUMP JUMPDEST PUSH2 0x150F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x439 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C8 JUMP JUMPDEST PUSH2 0x15B4 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x47D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x66933DC7 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x498 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xEF044973 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C9 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x50C JUMPI PUSH2 0x50C PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD SWAP1 POP PUSH1 0x3 PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x538 JUMPI PUSH2 0x538 PUSH2 0x17A4 JUMP JUMPDEST EQ PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD2188D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x4 OR SWAP1 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0x590 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0x5BD SWAP2 PUSH2 0x5AD SWAP2 PUSH2 0x1A09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x2E1897B0591D764356194F7A795238A87C1987C7A877568E50D829D547C92B97 SWAP1 PUSH0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x5FB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND SWAP8 POP SWAP4 SWAP6 SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 PUSH2 0x645 SWAP1 PUSH2 0x1A1C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x671 SWAP1 PUSH2 0x1A1C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6BC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x693 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6BC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x69F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x6 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 POP POP PUSH1 0xFF AND DUP8 JUMP JUMPDEST PUSH2 0x6D7 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x6E0 PUSH0 PUSH2 0x16B5 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x6F6 JUMPI PUSH2 0x6F6 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD SWAP1 POP PUSH1 0x1 PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x722 JUMPI PUSH2 0x722 PUSH2 0x17A4 JUMP JUMPDEST EQ PUSH2 0x740 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD2188D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x76A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 PUSH2 0x783 SWAP1 TIMESTAMP PUSH2 0x1A54 JUMP JUMPDEST LT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA74C1C5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x6 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH32 0x106F4416537EFFF55311EF5E2F9C2A48204FCF84731F2B9D5091D23FC52160C SWAP1 PUSH0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x7ED PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x2710 DUP3 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x814 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0x862 JUMPI POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFE9EC71 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0xFFFF DUP6 AND SWAP1 DUP2 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x70 SHL PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x59B73CA79BCB3DCB02C4D2B81E1A2DA4C9FD9857ED81CFB16C5431B502F8C71B SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP3 MLOAD SWAP3 SWAP4 POP POP PUSH1 0x22 SWAP1 SWAP2 LT SWAP1 POP DUP1 PUSH2 0x97F JUMPI POP PUSH1 0x5A DUP2 MLOAD GT JUMPDEST ISZERO PUSH2 0x99D JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV DUP2 AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x70 SHL DUP4 DIV DUP6 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xB0 SHL DUP4 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV SWAP1 SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE CALLVALUE SWAP2 PUSH0 SWAP2 SWAP1 ISZERO PUSH2 0xA78 JUMPI PUSH2 0x2710 DUP2 PUSH1 0x60 ADD MLOAD PUSH2 0xFFFF AND DUP5 PUSH2 0xA37 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0xA41 SWAP2 SWAP1 PUSH2 0x1A92 JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x80 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 GT ISZERO PUSH2 0xA6B JUMPI DUP1 PUSH1 0x80 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP2 POP JUMPDEST PUSH2 0xA75 DUP3 DUP5 PUSH2 0x1A54 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH0 PUSH2 0xA88 PUSH5 0x2540BE400 DUP6 PUSH2 0x1AA5 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xAA9 JUMPI PUSH2 0xA9A DUP2 DUP5 PUSH2 0x1A09 JUMP JUMPDEST SWAP3 POP PUSH2 0xAA6 DUP2 DUP6 PUSH2 0x1A54 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH0 DUP7 PUSH2 0xFFFF AND GT PUSH2 0xB01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420747820707269636500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH5 0x2540BE400 PUSH2 0xB17 PUSH2 0x12C PUSH2 0xFFFF DUP10 AND PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0xB21 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST DUP5 GT PUSH2 0xB5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x756E6166666F726461626C65 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP PUSH1 0x1 PUSH1 0x20 SWAP4 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 SLOAD DUP1 DUP3 ADD DUP8 SSTORE SWAP6 DUP4 MSTORE SWAP2 DUP4 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0x7 SWAP1 SWAP7 MUL ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR DUP6 SSTORE POP SWAP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP2 ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x5 DUP3 ADD SWAP1 PUSH2 0xC5D SWAP1 DUP3 PUSH2 0x1B17 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xC81 JUMPI PUSH2 0xC81 PUSH2 0x17A4 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP POP POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0xA7AA0BF5F2A5106EB711BCA96C8EA6EA0D99EC2C496D4D2C5DC0AF8217D43C7C DUP8 DUP8 DUP12 DUP15 DUP15 PUSH1 0x40 MLOAD PUSH2 0xCCA SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xCF1 JUMPI PUSH2 0xCF1 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD SWAP1 POP PUSH1 0x1 PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1D PUSH2 0x17A4 JUMP JUMPDEST EQ PUSH2 0xD3B JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD2188D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 PUSH2 0xD7E SWAP1 TIMESTAMP PUSH2 0x1A54 JUMP JUMPDEST LT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x40 MLOAD PUSH4 0xA74C1C5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD SLOAD DUP3 PUSH2 0xFFFF AND GT PUSH2 0xE1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746865206E65772074782070726963652073686F756C64206265206C61726765 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207468616E206265666F726500000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH5 0x2540BE400 PUSH2 0xE30 PUSH2 0x12C PUSH2 0xFFFF DUP6 AND PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0xE3A SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD GT PUSH2 0xE7B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x756E6166666F726461626C65 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x3 DUP3 ADD DUP2 SWAP1 SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP4 SWAP1 PUSH32 0xE6190C43C634720BCD5B72BB0B920B88F8D0A15AE7E5DCBB0582C1BB2F98DF4B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0xECF PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x2710 DUP3 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0xF44 JUMPI POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFE9EC71 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF DUP6 AND SWAP1 DUP2 MUL PUSH12 0xFFFFFFFFFFFFFFFF00000000 NOT AND SWAP2 SWAP1 SWAP2 OR PUSH5 0x100000000 PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x1007FF7AEC53E9626CE51F25D4E093F290F60DA8019C8CF489F0AE2F21EBF76A SWAP2 ADD PUSH2 0x926 JUMP JUMPDEST PUSH0 CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x101B JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1045 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x10BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6475706C69636174656400000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 DUP4 GT DUP1 ISZERO PUSH2 0x10D7 JUMPI POP PUSH2 0x10D5 PUSH5 0x2540BE400 DUP5 PUSH2 0x1AA5 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x1123 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420616D6F756E74000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP5 DIV DUP2 AND SWAP6 DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x60 SHL DUP4 DIV DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x70 SHL DUP4 DIV DUP6 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xB0 SHL DUP4 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV SWAP1 SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x11FA JUMPI PUSH2 0x2710 DUP2 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND DUP6 PUSH2 0x11B9 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0x11C3 SWAP2 SWAP1 PUSH2 0x1A92 JUMP JUMPDEST SWAP3 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 GT ISZERO PUSH2 0x11ED JUMPI DUP1 PUSH1 0x40 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 POP JUMPDEST PUSH2 0x11F7 DUP4 DUP6 PUSH2 0x1A54 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0xBC0E2D4F64F63E9C6B07A1665A26F689B20E42E836968119499DB41C2D315EFA SWAP1 PUSH2 0x126A SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP10 SWAP1 SWAP3 DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x12B0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x3 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x12C4 JUMPI PUSH2 0x12C4 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x6 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH1 0x1 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x12F2 JUMPI PUSH2 0x12F2 PUSH2 0x17A4 JUMP JUMPDEST EQ DUP1 PUSH2 0x130F JUMPI POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x130D JUMPI PUSH2 0x130D PUSH2 0x17A4 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x1317 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP7 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE DUP4 DUP6 ADD DUP9 DUP2 MSTORE PUSH0 DUP13 DUP2 MSTORE PUSH1 0x4 SWAP3 DUP4 SWAP1 MSTORE SWAP6 SWAP1 SWAP6 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD PUSH1 0x1 DUP5 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND PUSH4 0xFFFFFFFF NOT SWAP1 SWAP2 AND OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD PUSH1 0x2 SWAP2 DUP3 ADD SSTORE PUSH1 0x6 DUP5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x5 OR SWAP1 SSTORE TIMESTAMP SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x13AB JUMPI PUSH2 0x13AB PUSH20 0xBC10000000000000000000000000000000000002 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH0 SWAP2 SWAP1 PUSH2 0x13BF SWAP1 PUSH2 0x1711 JUMP JUMPDEST DUP3 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 DUP4 CREATE2 SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x13DD JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE DUP8 SWAP1 PUSH32 0xB74F5DBF34AABE02F20FF775B898ACF1A9F70E4FBD48AD50548ACAE86E1CCD78 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x1464 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1478 JUMPI PUSH2 0x1478 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x6 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH1 0x1 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x14A6 JUMPI PUSH2 0x14A6 PUSH2 0x17A4 JUMP JUMPDEST EQ DUP1 PUSH2 0x14C3 JUMPI POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x14C1 JUMPI PUSH2 0x14C1 PUSH2 0x17A4 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x14CB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x6 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x3 OR SWAP1 SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x829A8683C544AD289CE92D3CE06E9EBAD69B18A6916E60EC766C2C217461D8E9 SWAP1 PUSH0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1517 PUSH2 0x1689 JUMP JUMPDEST PUSH0 DUP2 PUSH2 0xFFFF AND GT PUSH2 0x156A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964207468726F74746C652073657474696E670000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xE536F709E7276119FF965216F1BBD671EF9EA99059743501129A0C9BEC5D37ED SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x15BC PUSH2 0x1689 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15E5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0x15EE DUP2 PUSH2 0x16B5 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1614 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x165D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1662 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1684 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 PUSH2 0x1C1A DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1744 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x175B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1775 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x178B JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x179B PUSH1 0x20 DUP5 ADD PUSH2 0x1762 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP2 MSTORE DUP7 PUSH1 0x20 DUP3 ADD MSTORE DUP6 PUSH1 0x40 DUP3 ADD MSTORE DUP5 PUSH1 0x60 DUP3 ADD MSTORE DUP4 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 DUP4 MLOAD DUP1 PUSH1 0xE0 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP7 ADD PUSH2 0x100 DUP6 ADD MCOPY PUSH0 PUSH2 0x100 DUP3 DUP6 ADD ADD MSTORE PUSH2 0x100 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP PUSH1 0x6 DUP4 LT PUSH2 0x182D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 PUSH1 0xC0 DUP4 ADD MSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1775 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1861 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x186A DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1886 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18A3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18B9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x18C9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x18F0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP5 POP SWAP3 POP PUSH2 0x1904 SWAP1 DUP6 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x191E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x179B PUSH1 0x20 DUP5 ADD PUSH2 0x183F JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1775 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1957 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x1967 PUSH1 0x20 DUP7 ADD PUSH2 0x1762 JUMP JUMPDEST SWAP3 POP PUSH2 0x1975 PUSH1 0x40 DUP7 ADD PUSH2 0x192E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1998 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x1975 PUSH1 0x40 DUP7 ADD PUSH2 0x1762 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19BF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1744 DUP3 PUSH2 0x183F JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D8 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1744 DUP3 PUSH2 0x192E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x498 JUMPI PUSH2 0x498 PUSH2 0x19F5 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A30 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A4E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x498 JUMPI PUSH2 0x498 PUSH2 0x19F5 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x498 JUMPI PUSH2 0x498 PUSH2 0x19F5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0x1AA0 JUMPI PUSH2 0x1AA0 PUSH2 0x1A7E JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1AB3 JUMPI PUSH2 0x1AB3 PUSH2 0x1A7E JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1684 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1AF1 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1B10 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1AFD JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B31 JUMPI PUSH2 0x1B31 PUSH2 0x1AB8 JUMP JUMPDEST PUSH2 0x1B45 DUP2 PUSH2 0x1B3F DUP5 SLOAD PUSH2 0x1A1C JUMP JUMPDEST DUP5 PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1B77 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x1B60 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x1B10 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1BA6 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1B86 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x1BC3 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFFFF DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE DUP2 PUSH1 0x80 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0xA0 DUP4 ADD CALLDATACOPY PUSH0 DUP2 DUP4 ADD PUSH1 0xA0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE ADDRESS SELFDESTRUCT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"611:9708:23:-:0;;;1240:303;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1275:5;-1:-1:-1;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;455:51:34;428:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;;1300:236:23::1;::::0;;::::1;::::0;::::1;::::0;;1331:3:::1;1300:236:::0;;-1:-1:-1;1300:236:23::1;::::0;::::1;::::0;;;;;;;;;1424:2:::1;1300:236:::0;;;;1458:14:::1;1300:236:::0;;;;;;;;;;;;;1292:244;:5:::1;:244:::0;611:9708;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:290:34:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:34;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:34:o;309:203::-;611:9708:23;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_84":{"entryPoint":5769,"id":84,"parameterSlots":0,"returnSlots":0},"@_msgSender_1429":{"entryPoint":null,"id":1429,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":5813,"id":146,"parameterSlots":1,"returnSlots":0},"@cancel1_4529":{"entryPoint":1762,"id":4529,"parameterSlots":1,"returnSlots":0},"@cancel2_4581":{"entryPoint":5168,"id":4581,"parameterSlots":1,"returnSlots":0},"@deposit_4205":{"entryPoint":4070,"id":4205,"parameterSlots":4,"returnSlots":1},"@isDeposited_4231":{"entryPoint":1182,"id":4231,"parameterSlots":2,"returnSlots":1},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@paid_4751":{"entryPoint":4732,"id":4751,"parameterSlots":4,"returnSlots":0},"@param_4061":{"entryPoint":null,"id":4061,"parameterSlots":0,"returnSlots":0},"@receipts_4074":{"entryPoint":null,"id":4074,"parameterSlots":0,"returnSlots":0},"@refund_4650":{"entryPoint":1272,"id":4650,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_98":{"entryPoint":1743,"id":98,"parameterSlots":0,"returnSlots":0},"@replaceByFee_4464":{"entryPoint":3293,"id":4464,"parameterSlots":2,"returnSlots":0},"@sendValue_1221":{"entryPoint":5617,"id":1221,"parameterSlots":2,"returnSlots":0},"@setDepositTax_4807":{"entryPoint":3783,"id":4807,"parameterSlots":2,"returnSlots":0},"@setRateLimit_4889":{"entryPoint":5391,"id":4889,"parameterSlots":1,"returnSlots":0},"@setWithdrawalTax_4863":{"entryPoint":2021,"id":4863,"parameterSlots":2,"returnSlots":0},"@supportsInterface_4919":{"entryPoint":1101,"id":4919,"parameterSlots":1,"returnSlots":1},"@transferOwnership_126":{"entryPoint":5556,"id":126,"parameterSlots":1,"returnSlots":0},"@withdraw_4376":{"entryPoint":2354,"id":4376,"parameterSlots":3,"returnSlots":0},"@withdrawals_4069":{"entryPoint":1516,"id":4069,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":6446,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6600,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_uint32":{"entryPoint":6010,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint32t_addresst_uint256":{"entryPoint":6468,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":5917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptrt_uint16":{"entryPoint":6289,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint16":{"entryPoint":6575,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint16t_uint64":{"entryPoint":6224,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":5963,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_bytes32t_uint32t_uint256":{"entryPoint":6533,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256t_uint16":{"entryPoint":6413,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint16":{"entryPoint":6207,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint32":{"entryPoint":5986,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_uint32__to_t_bytes32_t_uint32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_enum$_WithdrawalStatus_$5074__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint8__fromStack_reversed":{"entryPoint":6072,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint32_t_uint256__to_t_bytes32_t_uint32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_35e2a7c0e5320f1f9d561dcf29daa653278f4a6b116055ae99c0f73982ee0a11__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_421dca8797e77bf1356bffec8a2c09bf948fbfd8bade7477d3a22d409eb7116a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_660324624872cd0b922aa91b3e00247627a75111d0e93436b452b9f5c54a277e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c408cec1329bb31a3148be2369fbd5b36a4fbd332b42dd56ad2cf165479d4b50__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c8bb60aaf805d6037c85befbef77dc6120c79480f8db99b4aa0598783010d7aa__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint16_t_uint64_t_uint16_t_uint64__to_t_uint16_t_uint16_t_uint64_t_uint16_t_uint64_t_uint16_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint16_t_string_calldata_ptr__to_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7122,"id":null,"parameterSlots":6,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6665,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":6802,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6759,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6740,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":6860,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":6935,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6684,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"mod_t_uint256":{"entryPoint":6821,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":6645,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":6782,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":6052,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6625,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6840,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:14650:34","nodeType":"YulBlock","src":"0:14650:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"83:217:34","nodeType":"YulBlock","src":"83:217:34","statements":[{"body":{"nativeSrc":"129:16:34","nodeType":"YulBlock","src":"129:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:34","nodeType":"YulLiteral","src":"138:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:34","nodeType":"YulLiteral","src":"141:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:34","nodeType":"YulIdentifier","src":"131:6:34"},"nativeSrc":"131:12:34","nodeType":"YulFunctionCall","src":"131:12:34"},"nativeSrc":"131:12:34","nodeType":"YulExpressionStatement","src":"131:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:34","nodeType":"YulIdentifier","src":"104:7:34"},{"name":"headStart","nativeSrc":"113:9:34","nodeType":"YulIdentifier","src":"113:9:34"}],"functionName":{"name":"sub","nativeSrc":"100:3:34","nodeType":"YulIdentifier","src":"100:3:34"},"nativeSrc":"100:23:34","nodeType":"YulFunctionCall","src":"100:23:34"},{"kind":"number","nativeSrc":"125:2:34","nodeType":"YulLiteral","src":"125:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:34","nodeType":"YulIdentifier","src":"96:3:34"},"nativeSrc":"96:32:34","nodeType":"YulFunctionCall","src":"96:32:34"},"nativeSrc":"93:52:34","nodeType":"YulIf","src":"93:52:34"},{"nativeSrc":"154:36:34","nodeType":"YulVariableDeclaration","src":"154:36:34","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:34","nodeType":"YulIdentifier","src":"180:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:34","nodeType":"YulIdentifier","src":"167:12:34"},"nativeSrc":"167:23:34","nodeType":"YulFunctionCall","src":"167:23:34"},"variables":[{"name":"value","nativeSrc":"158:5:34","nodeType":"YulTypedName","src":"158:5:34","type":""}]},{"body":{"nativeSrc":"254:16:34","nodeType":"YulBlock","src":"254:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"263:1:34","nodeType":"YulLiteral","src":"263:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"266:1:34","nodeType":"YulLiteral","src":"266:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"256:6:34","nodeType":"YulIdentifier","src":"256:6:34"},"nativeSrc":"256:12:34","nodeType":"YulFunctionCall","src":"256:12:34"},"nativeSrc":"256:12:34","nodeType":"YulExpressionStatement","src":"256:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:34","nodeType":"YulIdentifier","src":"212:5:34"},{"arguments":[{"name":"value","nativeSrc":"223:5:34","nodeType":"YulIdentifier","src":"223:5:34"},{"arguments":[{"kind":"number","nativeSrc":"234:3:34","nodeType":"YulLiteral","src":"234:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"239:10:34","nodeType":"YulLiteral","src":"239:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"230:3:34","nodeType":"YulIdentifier","src":"230:3:34"},"nativeSrc":"230:20:34","nodeType":"YulFunctionCall","src":"230:20:34"}],"functionName":{"name":"and","nativeSrc":"219:3:34","nodeType":"YulIdentifier","src":"219:3:34"},"nativeSrc":"219:32:34","nodeType":"YulFunctionCall","src":"219:32:34"}],"functionName":{"name":"eq","nativeSrc":"209:2:34","nodeType":"YulIdentifier","src":"209:2:34"},"nativeSrc":"209:43:34","nodeType":"YulFunctionCall","src":"209:43:34"}],"functionName":{"name":"iszero","nativeSrc":"202:6:34","nodeType":"YulIdentifier","src":"202:6:34"},"nativeSrc":"202:51:34","nodeType":"YulFunctionCall","src":"202:51:34"},"nativeSrc":"199:71:34","nodeType":"YulIf","src":"199:71:34"},{"nativeSrc":"279:15:34","nodeType":"YulAssignment","src":"279:15:34","value":{"name":"value","nativeSrc":"289:5:34","nodeType":"YulIdentifier","src":"289:5:34"},"variableNames":[{"name":"value0","nativeSrc":"279:6:34","nodeType":"YulIdentifier","src":"279:6:34"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:286:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:34","nodeType":"YulTypedName","src":"49:9:34","type":""},{"name":"dataEnd","nativeSrc":"60:7:34","nodeType":"YulTypedName","src":"60:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:34","nodeType":"YulTypedName","src":"72:6:34","type":""}],"src":"14:286:34"},{"body":{"nativeSrc":"400:92:34","nodeType":"YulBlock","src":"400:92:34","statements":[{"nativeSrc":"410:26:34","nodeType":"YulAssignment","src":"410:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"422:9:34","nodeType":"YulIdentifier","src":"422:9:34"},{"kind":"number","nativeSrc":"433:2:34","nodeType":"YulLiteral","src":"433:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"418:3:34","nodeType":"YulIdentifier","src":"418:3:34"},"nativeSrc":"418:18:34","nodeType":"YulFunctionCall","src":"418:18:34"},"variableNames":[{"name":"tail","nativeSrc":"410:4:34","nodeType":"YulIdentifier","src":"410:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"452:9:34","nodeType":"YulIdentifier","src":"452:9:34"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"477:6:34","nodeType":"YulIdentifier","src":"477:6:34"}],"functionName":{"name":"iszero","nativeSrc":"470:6:34","nodeType":"YulIdentifier","src":"470:6:34"},"nativeSrc":"470:14:34","nodeType":"YulFunctionCall","src":"470:14:34"}],"functionName":{"name":"iszero","nativeSrc":"463:6:34","nodeType":"YulIdentifier","src":"463:6:34"},"nativeSrc":"463:22:34","nodeType":"YulFunctionCall","src":"463:22:34"}],"functionName":{"name":"mstore","nativeSrc":"445:6:34","nodeType":"YulIdentifier","src":"445:6:34"},"nativeSrc":"445:41:34","nodeType":"YulFunctionCall","src":"445:41:34"},"nativeSrc":"445:41:34","nodeType":"YulExpressionStatement","src":"445:41:34"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"305:187:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"369:9:34","nodeType":"YulTypedName","src":"369:9:34","type":""},{"name":"value0","nativeSrc":"380:6:34","nodeType":"YulTypedName","src":"380:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"391:4:34","nodeType":"YulTypedName","src":"391:4:34","type":""}],"src":"305:187:34"},{"body":{"nativeSrc":"567:156:34","nodeType":"YulBlock","src":"567:156:34","statements":[{"body":{"nativeSrc":"613:16:34","nodeType":"YulBlock","src":"613:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"622:1:34","nodeType":"YulLiteral","src":"622:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"625:1:34","nodeType":"YulLiteral","src":"625:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"615:6:34","nodeType":"YulIdentifier","src":"615:6:34"},"nativeSrc":"615:12:34","nodeType":"YulFunctionCall","src":"615:12:34"},"nativeSrc":"615:12:34","nodeType":"YulExpressionStatement","src":"615:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"588:7:34","nodeType":"YulIdentifier","src":"588:7:34"},{"name":"headStart","nativeSrc":"597:9:34","nodeType":"YulIdentifier","src":"597:9:34"}],"functionName":{"name":"sub","nativeSrc":"584:3:34","nodeType":"YulIdentifier","src":"584:3:34"},"nativeSrc":"584:23:34","nodeType":"YulFunctionCall","src":"584:23:34"},{"kind":"number","nativeSrc":"609:2:34","nodeType":"YulLiteral","src":"609:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"580:3:34","nodeType":"YulIdentifier","src":"580:3:34"},"nativeSrc":"580:32:34","nodeType":"YulFunctionCall","src":"580:32:34"},"nativeSrc":"577:52:34","nodeType":"YulIf","src":"577:52:34"},{"nativeSrc":"638:14:34","nodeType":"YulVariableDeclaration","src":"638:14:34","value":{"kind":"number","nativeSrc":"651:1:34","nodeType":"YulLiteral","src":"651:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"642:5:34","nodeType":"YulTypedName","src":"642:5:34","type":""}]},{"nativeSrc":"661:32:34","nodeType":"YulAssignment","src":"661:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"683:9:34","nodeType":"YulIdentifier","src":"683:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"670:12:34","nodeType":"YulIdentifier","src":"670:12:34"},"nativeSrc":"670:23:34","nodeType":"YulFunctionCall","src":"670:23:34"},"variableNames":[{"name":"value","nativeSrc":"661:5:34","nodeType":"YulIdentifier","src":"661:5:34"}]},{"nativeSrc":"702:15:34","nodeType":"YulAssignment","src":"702:15:34","value":{"name":"value","nativeSrc":"712:5:34","nodeType":"YulIdentifier","src":"712:5:34"},"variableNames":[{"name":"value0","nativeSrc":"702:6:34","nodeType":"YulIdentifier","src":"702:6:34"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"497:226:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"533:9:34","nodeType":"YulTypedName","src":"533:9:34","type":""},{"name":"dataEnd","nativeSrc":"544:7:34","nodeType":"YulTypedName","src":"544:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"556:6:34","nodeType":"YulTypedName","src":"556:6:34","type":""}],"src":"497:226:34"},{"body":{"nativeSrc":"883:179:34","nodeType":"YulBlock","src":"883:179:34","statements":[{"nativeSrc":"893:26:34","nodeType":"YulAssignment","src":"893:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"905:9:34","nodeType":"YulIdentifier","src":"905:9:34"},{"kind":"number","nativeSrc":"916:2:34","nodeType":"YulLiteral","src":"916:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"901:3:34","nodeType":"YulIdentifier","src":"901:3:34"},"nativeSrc":"901:18:34","nodeType":"YulFunctionCall","src":"901:18:34"},"variableNames":[{"name":"tail","nativeSrc":"893:4:34","nodeType":"YulIdentifier","src":"893:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"935:9:34","nodeType":"YulIdentifier","src":"935:9:34"},{"name":"value0","nativeSrc":"946:6:34","nodeType":"YulIdentifier","src":"946:6:34"}],"functionName":{"name":"mstore","nativeSrc":"928:6:34","nodeType":"YulIdentifier","src":"928:6:34"},"nativeSrc":"928:25:34","nodeType":"YulFunctionCall","src":"928:25:34"},"nativeSrc":"928:25:34","nodeType":"YulExpressionStatement","src":"928:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"973:9:34","nodeType":"YulIdentifier","src":"973:9:34"},{"kind":"number","nativeSrc":"984:2:34","nodeType":"YulLiteral","src":"984:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"969:3:34","nodeType":"YulIdentifier","src":"969:3:34"},"nativeSrc":"969:18:34","nodeType":"YulFunctionCall","src":"969:18:34"},{"arguments":[{"name":"value1","nativeSrc":"993:6:34","nodeType":"YulIdentifier","src":"993:6:34"},{"kind":"number","nativeSrc":"1001:10:34","nodeType":"YulLiteral","src":"1001:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"989:3:34","nodeType":"YulIdentifier","src":"989:3:34"},"nativeSrc":"989:23:34","nodeType":"YulFunctionCall","src":"989:23:34"}],"functionName":{"name":"mstore","nativeSrc":"962:6:34","nodeType":"YulIdentifier","src":"962:6:34"},"nativeSrc":"962:51:34","nodeType":"YulFunctionCall","src":"962:51:34"},"nativeSrc":"962:51:34","nodeType":"YulExpressionStatement","src":"962:51:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1033:9:34","nodeType":"YulIdentifier","src":"1033:9:34"},{"kind":"number","nativeSrc":"1044:2:34","nodeType":"YulLiteral","src":"1044:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1029:3:34","nodeType":"YulIdentifier","src":"1029:3:34"},"nativeSrc":"1029:18:34","nodeType":"YulFunctionCall","src":"1029:18:34"},{"name":"value2","nativeSrc":"1049:6:34","nodeType":"YulIdentifier","src":"1049:6:34"}],"functionName":{"name":"mstore","nativeSrc":"1022:6:34","nodeType":"YulIdentifier","src":"1022:6:34"},"nativeSrc":"1022:34:34","nodeType":"YulFunctionCall","src":"1022:34:34"},"nativeSrc":"1022:34:34","nodeType":"YulExpressionStatement","src":"1022:34:34"}]},"name":"abi_encode_tuple_t_bytes32_t_uint32_t_uint256__to_t_bytes32_t_uint32_t_uint256__fromStack_reversed","nativeSrc":"728:334:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"836:9:34","nodeType":"YulTypedName","src":"836:9:34","type":""},{"name":"value2","nativeSrc":"847:6:34","nodeType":"YulTypedName","src":"847:6:34","type":""},{"name":"value1","nativeSrc":"855:6:34","nodeType":"YulTypedName","src":"855:6:34","type":""},{"name":"value0","nativeSrc":"863:6:34","nodeType":"YulTypedName","src":"863:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"874:4:34","nodeType":"YulTypedName","src":"874:4:34","type":""}],"src":"728:334:34"},{"body":{"nativeSrc":"1115:115:34","nodeType":"YulBlock","src":"1115:115:34","statements":[{"nativeSrc":"1125:29:34","nodeType":"YulAssignment","src":"1125:29:34","value":{"arguments":[{"name":"offset","nativeSrc":"1147:6:34","nodeType":"YulIdentifier","src":"1147:6:34"}],"functionName":{"name":"calldataload","nativeSrc":"1134:12:34","nodeType":"YulIdentifier","src":"1134:12:34"},"nativeSrc":"1134:20:34","nodeType":"YulFunctionCall","src":"1134:20:34"},"variableNames":[{"name":"value","nativeSrc":"1125:5:34","nodeType":"YulIdentifier","src":"1125:5:34"}]},{"body":{"nativeSrc":"1208:16:34","nodeType":"YulBlock","src":"1208:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1217:1:34","nodeType":"YulLiteral","src":"1217:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1220:1:34","nodeType":"YulLiteral","src":"1220:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1210:6:34","nodeType":"YulIdentifier","src":"1210:6:34"},"nativeSrc":"1210:12:34","nodeType":"YulFunctionCall","src":"1210:12:34"},"nativeSrc":"1210:12:34","nodeType":"YulExpressionStatement","src":"1210:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1176:5:34","nodeType":"YulIdentifier","src":"1176:5:34"},{"arguments":[{"name":"value","nativeSrc":"1187:5:34","nodeType":"YulIdentifier","src":"1187:5:34"},{"kind":"number","nativeSrc":"1194:10:34","nodeType":"YulLiteral","src":"1194:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"1183:3:34","nodeType":"YulIdentifier","src":"1183:3:34"},"nativeSrc":"1183:22:34","nodeType":"YulFunctionCall","src":"1183:22:34"}],"functionName":{"name":"eq","nativeSrc":"1173:2:34","nodeType":"YulIdentifier","src":"1173:2:34"},"nativeSrc":"1173:33:34","nodeType":"YulFunctionCall","src":"1173:33:34"}],"functionName":{"name":"iszero","nativeSrc":"1166:6:34","nodeType":"YulIdentifier","src":"1166:6:34"},"nativeSrc":"1166:41:34","nodeType":"YulFunctionCall","src":"1166:41:34"},"nativeSrc":"1163:61:34","nodeType":"YulIf","src":"1163:61:34"}]},"name":"abi_decode_uint32","nativeSrc":"1067:163:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1094:6:34","nodeType":"YulTypedName","src":"1094:6:34","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1105:5:34","nodeType":"YulTypedName","src":"1105:5:34","type":""}],"src":"1067:163:34"},{"body":{"nativeSrc":"1321:212:34","nodeType":"YulBlock","src":"1321:212:34","statements":[{"body":{"nativeSrc":"1367:16:34","nodeType":"YulBlock","src":"1367:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1376:1:34","nodeType":"YulLiteral","src":"1376:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1379:1:34","nodeType":"YulLiteral","src":"1379:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1369:6:34","nodeType":"YulIdentifier","src":"1369:6:34"},"nativeSrc":"1369:12:34","nodeType":"YulFunctionCall","src":"1369:12:34"},"nativeSrc":"1369:12:34","nodeType":"YulExpressionStatement","src":"1369:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1342:7:34","nodeType":"YulIdentifier","src":"1342:7:34"},{"name":"headStart","nativeSrc":"1351:9:34","nodeType":"YulIdentifier","src":"1351:9:34"}],"functionName":{"name":"sub","nativeSrc":"1338:3:34","nodeType":"YulIdentifier","src":"1338:3:34"},"nativeSrc":"1338:23:34","nodeType":"YulFunctionCall","src":"1338:23:34"},{"kind":"number","nativeSrc":"1363:2:34","nodeType":"YulLiteral","src":"1363:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1334:3:34","nodeType":"YulIdentifier","src":"1334:3:34"},"nativeSrc":"1334:32:34","nodeType":"YulFunctionCall","src":"1334:32:34"},"nativeSrc":"1331:52:34","nodeType":"YulIf","src":"1331:52:34"},{"nativeSrc":"1392:14:34","nodeType":"YulVariableDeclaration","src":"1392:14:34","value":{"kind":"number","nativeSrc":"1405:1:34","nodeType":"YulLiteral","src":"1405:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1396:5:34","nodeType":"YulTypedName","src":"1396:5:34","type":""}]},{"nativeSrc":"1415:32:34","nodeType":"YulAssignment","src":"1415:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1437:9:34","nodeType":"YulIdentifier","src":"1437:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"1424:12:34","nodeType":"YulIdentifier","src":"1424:12:34"},"nativeSrc":"1424:23:34","nodeType":"YulFunctionCall","src":"1424:23:34"},"variableNames":[{"name":"value","nativeSrc":"1415:5:34","nodeType":"YulIdentifier","src":"1415:5:34"}]},{"nativeSrc":"1456:15:34","nodeType":"YulAssignment","src":"1456:15:34","value":{"name":"value","nativeSrc":"1466:5:34","nodeType":"YulIdentifier","src":"1466:5:34"},"variableNames":[{"name":"value0","nativeSrc":"1456:6:34","nodeType":"YulIdentifier","src":"1456:6:34"}]},{"nativeSrc":"1480:47:34","nodeType":"YulAssignment","src":"1480:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1512:9:34","nodeType":"YulIdentifier","src":"1512:9:34"},{"kind":"number","nativeSrc":"1523:2:34","nodeType":"YulLiteral","src":"1523:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1508:3:34","nodeType":"YulIdentifier","src":"1508:3:34"},"nativeSrc":"1508:18:34","nodeType":"YulFunctionCall","src":"1508:18:34"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"1490:17:34","nodeType":"YulIdentifier","src":"1490:17:34"},"nativeSrc":"1490:37:34","nodeType":"YulFunctionCall","src":"1490:37:34"},"variableNames":[{"name":"value1","nativeSrc":"1480:6:34","nodeType":"YulIdentifier","src":"1480:6:34"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint32","nativeSrc":"1235:298:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1279:9:34","nodeType":"YulTypedName","src":"1279:9:34","type":""},{"name":"dataEnd","nativeSrc":"1290:7:34","nodeType":"YulTypedName","src":"1290:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1302:6:34","nodeType":"YulTypedName","src":"1302:6:34","type":""},{"name":"value1","nativeSrc":"1310:6:34","nodeType":"YulTypedName","src":"1310:6:34","type":""}],"src":"1235:298:34"},{"body":{"nativeSrc":"1570:95:34","nodeType":"YulBlock","src":"1570:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1587:1:34","nodeType":"YulLiteral","src":"1587:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1594:3:34","nodeType":"YulLiteral","src":"1594:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"1599:10:34","nodeType":"YulLiteral","src":"1599:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1590:3:34","nodeType":"YulIdentifier","src":"1590:3:34"},"nativeSrc":"1590:20:34","nodeType":"YulFunctionCall","src":"1590:20:34"}],"functionName":{"name":"mstore","nativeSrc":"1580:6:34","nodeType":"YulIdentifier","src":"1580:6:34"},"nativeSrc":"1580:31:34","nodeType":"YulFunctionCall","src":"1580:31:34"},"nativeSrc":"1580:31:34","nodeType":"YulExpressionStatement","src":"1580:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1627:1:34","nodeType":"YulLiteral","src":"1627:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"1630:4:34","nodeType":"YulLiteral","src":"1630:4:34","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"1620:6:34","nodeType":"YulIdentifier","src":"1620:6:34"},"nativeSrc":"1620:15:34","nodeType":"YulFunctionCall","src":"1620:15:34"},"nativeSrc":"1620:15:34","nodeType":"YulExpressionStatement","src":"1620:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1651:1:34","nodeType":"YulLiteral","src":"1651:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1654:4:34","nodeType":"YulLiteral","src":"1654:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1644:6:34","nodeType":"YulIdentifier","src":"1644:6:34"},"nativeSrc":"1644:15:34","nodeType":"YulFunctionCall","src":"1644:15:34"},"nativeSrc":"1644:15:34","nodeType":"YulExpressionStatement","src":"1644:15:34"}]},"name":"panic_error_0x21","nativeSrc":"1538:127:34","nodeType":"YulFunctionDefinition","src":"1538:127:34"},{"body":{"nativeSrc":"1978:765:34","nodeType":"YulBlock","src":"1978:765:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1995:9:34","nodeType":"YulIdentifier","src":"1995:9:34"},{"arguments":[{"name":"value0","nativeSrc":"2010:6:34","nodeType":"YulIdentifier","src":"2010:6:34"},{"kind":"number","nativeSrc":"2018:42:34","nodeType":"YulLiteral","src":"2018:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2006:3:34","nodeType":"YulIdentifier","src":"2006:3:34"},"nativeSrc":"2006:55:34","nodeType":"YulFunctionCall","src":"2006:55:34"}],"functionName":{"name":"mstore","nativeSrc":"1988:6:34","nodeType":"YulIdentifier","src":"1988:6:34"},"nativeSrc":"1988:74:34","nodeType":"YulFunctionCall","src":"1988:74:34"},"nativeSrc":"1988:74:34","nodeType":"YulExpressionStatement","src":"1988:74:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2082:9:34","nodeType":"YulIdentifier","src":"2082:9:34"},{"kind":"number","nativeSrc":"2093:2:34","nodeType":"YulLiteral","src":"2093:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2078:3:34","nodeType":"YulIdentifier","src":"2078:3:34"},"nativeSrc":"2078:18:34","nodeType":"YulFunctionCall","src":"2078:18:34"},{"name":"value1","nativeSrc":"2098:6:34","nodeType":"YulIdentifier","src":"2098:6:34"}],"functionName":{"name":"mstore","nativeSrc":"2071:6:34","nodeType":"YulIdentifier","src":"2071:6:34"},"nativeSrc":"2071:34:34","nodeType":"YulFunctionCall","src":"2071:34:34"},"nativeSrc":"2071:34:34","nodeType":"YulExpressionStatement","src":"2071:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2125:9:34","nodeType":"YulIdentifier","src":"2125:9:34"},{"kind":"number","nativeSrc":"2136:2:34","nodeType":"YulLiteral","src":"2136:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2121:3:34","nodeType":"YulIdentifier","src":"2121:3:34"},"nativeSrc":"2121:18:34","nodeType":"YulFunctionCall","src":"2121:18:34"},{"name":"value2","nativeSrc":"2141:6:34","nodeType":"YulIdentifier","src":"2141:6:34"}],"functionName":{"name":"mstore","nativeSrc":"2114:6:34","nodeType":"YulIdentifier","src":"2114:6:34"},"nativeSrc":"2114:34:34","nodeType":"YulFunctionCall","src":"2114:34:34"},"nativeSrc":"2114:34:34","nodeType":"YulExpressionStatement","src":"2114:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2168:9:34","nodeType":"YulIdentifier","src":"2168:9:34"},{"kind":"number","nativeSrc":"2179:2:34","nodeType":"YulLiteral","src":"2179:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2164:3:34","nodeType":"YulIdentifier","src":"2164:3:34"},"nativeSrc":"2164:18:34","nodeType":"YulFunctionCall","src":"2164:18:34"},{"name":"value3","nativeSrc":"2184:6:34","nodeType":"YulIdentifier","src":"2184:6:34"}],"functionName":{"name":"mstore","nativeSrc":"2157:6:34","nodeType":"YulIdentifier","src":"2157:6:34"},"nativeSrc":"2157:34:34","nodeType":"YulFunctionCall","src":"2157:34:34"},"nativeSrc":"2157:34:34","nodeType":"YulExpressionStatement","src":"2157:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2211:9:34","nodeType":"YulIdentifier","src":"2211:9:34"},{"kind":"number","nativeSrc":"2222:3:34","nodeType":"YulLiteral","src":"2222:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"2207:3:34","nodeType":"YulIdentifier","src":"2207:3:34"},"nativeSrc":"2207:19:34","nodeType":"YulFunctionCall","src":"2207:19:34"},{"name":"value4","nativeSrc":"2228:6:34","nodeType":"YulIdentifier","src":"2228:6:34"}],"functionName":{"name":"mstore","nativeSrc":"2200:6:34","nodeType":"YulIdentifier","src":"2200:6:34"},"nativeSrc":"2200:35:34","nodeType":"YulFunctionCall","src":"2200:35:34"},"nativeSrc":"2200:35:34","nodeType":"YulExpressionStatement","src":"2200:35:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2255:9:34","nodeType":"YulIdentifier","src":"2255:9:34"},{"kind":"number","nativeSrc":"2266:3:34","nodeType":"YulLiteral","src":"2266:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"2251:3:34","nodeType":"YulIdentifier","src":"2251:3:34"},"nativeSrc":"2251:19:34","nodeType":"YulFunctionCall","src":"2251:19:34"},{"kind":"number","nativeSrc":"2272:3:34","nodeType":"YulLiteral","src":"2272:3:34","type":"","value":"224"}],"functionName":{"name":"mstore","nativeSrc":"2244:6:34","nodeType":"YulIdentifier","src":"2244:6:34"},"nativeSrc":"2244:32:34","nodeType":"YulFunctionCall","src":"2244:32:34"},"nativeSrc":"2244:32:34","nodeType":"YulExpressionStatement","src":"2244:32:34"},{"nativeSrc":"2285:27:34","nodeType":"YulVariableDeclaration","src":"2285:27:34","value":{"arguments":[{"name":"value5","nativeSrc":"2305:6:34","nodeType":"YulIdentifier","src":"2305:6:34"}],"functionName":{"name":"mload","nativeSrc":"2299:5:34","nodeType":"YulIdentifier","src":"2299:5:34"},"nativeSrc":"2299:13:34","nodeType":"YulFunctionCall","src":"2299:13:34"},"variables":[{"name":"length","nativeSrc":"2289:6:34","nodeType":"YulTypedName","src":"2289:6:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2332:9:34","nodeType":"YulIdentifier","src":"2332:9:34"},{"kind":"number","nativeSrc":"2343:3:34","nodeType":"YulLiteral","src":"2343:3:34","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"2328:3:34","nodeType":"YulIdentifier","src":"2328:3:34"},"nativeSrc":"2328:19:34","nodeType":"YulFunctionCall","src":"2328:19:34"},{"name":"length","nativeSrc":"2349:6:34","nodeType":"YulIdentifier","src":"2349:6:34"}],"functionName":{"name":"mstore","nativeSrc":"2321:6:34","nodeType":"YulIdentifier","src":"2321:6:34"},"nativeSrc":"2321:35:34","nodeType":"YulFunctionCall","src":"2321:35:34"},"nativeSrc":"2321:35:34","nodeType":"YulExpressionStatement","src":"2321:35:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2375:9:34","nodeType":"YulIdentifier","src":"2375:9:34"},{"kind":"number","nativeSrc":"2386:3:34","nodeType":"YulLiteral","src":"2386:3:34","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"2371:3:34","nodeType":"YulIdentifier","src":"2371:3:34"},"nativeSrc":"2371:19:34","nodeType":"YulFunctionCall","src":"2371:19:34"},{"arguments":[{"name":"value5","nativeSrc":"2396:6:34","nodeType":"YulIdentifier","src":"2396:6:34"},{"kind":"number","nativeSrc":"2404:2:34","nodeType":"YulLiteral","src":"2404:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2392:3:34","nodeType":"YulIdentifier","src":"2392:3:34"},"nativeSrc":"2392:15:34","nodeType":"YulFunctionCall","src":"2392:15:34"},{"name":"length","nativeSrc":"2409:6:34","nodeType":"YulIdentifier","src":"2409:6:34"}],"functionName":{"name":"mcopy","nativeSrc":"2365:5:34","nodeType":"YulIdentifier","src":"2365:5:34"},"nativeSrc":"2365:51:34","nodeType":"YulFunctionCall","src":"2365:51:34"},"nativeSrc":"2365:51:34","nodeType":"YulExpressionStatement","src":"2365:51:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2440:9:34","nodeType":"YulIdentifier","src":"2440:9:34"},{"name":"length","nativeSrc":"2451:6:34","nodeType":"YulIdentifier","src":"2451:6:34"}],"functionName":{"name":"add","nativeSrc":"2436:3:34","nodeType":"YulIdentifier","src":"2436:3:34"},"nativeSrc":"2436:22:34","nodeType":"YulFunctionCall","src":"2436:22:34"},{"kind":"number","nativeSrc":"2460:3:34","nodeType":"YulLiteral","src":"2460:3:34","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"2432:3:34","nodeType":"YulIdentifier","src":"2432:3:34"},"nativeSrc":"2432:32:34","nodeType":"YulFunctionCall","src":"2432:32:34"},{"kind":"number","nativeSrc":"2466:1:34","nodeType":"YulLiteral","src":"2466:1:34","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2425:6:34","nodeType":"YulIdentifier","src":"2425:6:34"},"nativeSrc":"2425:43:34","nodeType":"YulFunctionCall","src":"2425:43:34"},"nativeSrc":"2425:43:34","nodeType":"YulExpressionStatement","src":"2425:43:34"},{"nativeSrc":"2477:63:34","nodeType":"YulAssignment","src":"2477:63:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2493:9:34","nodeType":"YulIdentifier","src":"2493:9:34"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2512:6:34","nodeType":"YulIdentifier","src":"2512:6:34"},{"kind":"number","nativeSrc":"2520:2:34","nodeType":"YulLiteral","src":"2520:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2508:3:34","nodeType":"YulIdentifier","src":"2508:3:34"},"nativeSrc":"2508:15:34","nodeType":"YulFunctionCall","src":"2508:15:34"},{"arguments":[{"kind":"number","nativeSrc":"2529:2:34","nodeType":"YulLiteral","src":"2529:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2525:3:34","nodeType":"YulIdentifier","src":"2525:3:34"},"nativeSrc":"2525:7:34","nodeType":"YulFunctionCall","src":"2525:7:34"}],"functionName":{"name":"and","nativeSrc":"2504:3:34","nodeType":"YulIdentifier","src":"2504:3:34"},"nativeSrc":"2504:29:34","nodeType":"YulFunctionCall","src":"2504:29:34"}],"functionName":{"name":"add","nativeSrc":"2489:3:34","nodeType":"YulIdentifier","src":"2489:3:34"},"nativeSrc":"2489:45:34","nodeType":"YulFunctionCall","src":"2489:45:34"},{"kind":"number","nativeSrc":"2536:3:34","nodeType":"YulLiteral","src":"2536:3:34","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"2485:3:34","nodeType":"YulIdentifier","src":"2485:3:34"},"nativeSrc":"2485:55:34","nodeType":"YulFunctionCall","src":"2485:55:34"},"variableNames":[{"name":"tail","nativeSrc":"2477:4:34","nodeType":"YulIdentifier","src":"2477:4:34"}]},{"body":{"nativeSrc":"2582:111:34","nodeType":"YulBlock","src":"2582:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2603:1:34","nodeType":"YulLiteral","src":"2603:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2610:3:34","nodeType":"YulLiteral","src":"2610:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"2615:10:34","nodeType":"YulLiteral","src":"2615:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2606:3:34","nodeType":"YulIdentifier","src":"2606:3:34"},"nativeSrc":"2606:20:34","nodeType":"YulFunctionCall","src":"2606:20:34"}],"functionName":{"name":"mstore","nativeSrc":"2596:6:34","nodeType":"YulIdentifier","src":"2596:6:34"},"nativeSrc":"2596:31:34","nodeType":"YulFunctionCall","src":"2596:31:34"},"nativeSrc":"2596:31:34","nodeType":"YulExpressionStatement","src":"2596:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2647:1:34","nodeType":"YulLiteral","src":"2647:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"2650:4:34","nodeType":"YulLiteral","src":"2650:4:34","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"2640:6:34","nodeType":"YulIdentifier","src":"2640:6:34"},"nativeSrc":"2640:15:34","nodeType":"YulFunctionCall","src":"2640:15:34"},"nativeSrc":"2640:15:34","nodeType":"YulExpressionStatement","src":"2640:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2675:1:34","nodeType":"YulLiteral","src":"2675:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"2678:4:34","nodeType":"YulLiteral","src":"2678:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2668:6:34","nodeType":"YulIdentifier","src":"2668:6:34"},"nativeSrc":"2668:15:34","nodeType":"YulFunctionCall","src":"2668:15:34"},"nativeSrc":"2668:15:34","nodeType":"YulExpressionStatement","src":"2668:15:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value6","nativeSrc":"2562:6:34","nodeType":"YulIdentifier","src":"2562:6:34"},{"kind":"number","nativeSrc":"2570:1:34","nodeType":"YulLiteral","src":"2570:1:34","type":"","value":"6"}],"functionName":{"name":"lt","nativeSrc":"2559:2:34","nodeType":"YulIdentifier","src":"2559:2:34"},"nativeSrc":"2559:13:34","nodeType":"YulFunctionCall","src":"2559:13:34"}],"functionName":{"name":"iszero","nativeSrc":"2552:6:34","nodeType":"YulIdentifier","src":"2552:6:34"},"nativeSrc":"2552:21:34","nodeType":"YulFunctionCall","src":"2552:21:34"},"nativeSrc":"2549:144:34","nodeType":"YulIf","src":"2549:144:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2713:9:34","nodeType":"YulIdentifier","src":"2713:9:34"},{"kind":"number","nativeSrc":"2724:3:34","nodeType":"YulLiteral","src":"2724:3:34","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"2709:3:34","nodeType":"YulIdentifier","src":"2709:3:34"},"nativeSrc":"2709:19:34","nodeType":"YulFunctionCall","src":"2709:19:34"},{"name":"value6","nativeSrc":"2730:6:34","nodeType":"YulIdentifier","src":"2730:6:34"}],"functionName":{"name":"mstore","nativeSrc":"2702:6:34","nodeType":"YulIdentifier","src":"2702:6:34"},"nativeSrc":"2702:35:34","nodeType":"YulFunctionCall","src":"2702:35:34"},"nativeSrc":"2702:35:34","nodeType":"YulExpressionStatement","src":"2702:35:34"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_enum$_WithdrawalStatus_$5074__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint8__fromStack_reversed","nativeSrc":"1670:1073:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1899:9:34","nodeType":"YulTypedName","src":"1899:9:34","type":""},{"name":"value6","nativeSrc":"1910:6:34","nodeType":"YulTypedName","src":"1910:6:34","type":""},{"name":"value5","nativeSrc":"1918:6:34","nodeType":"YulTypedName","src":"1918:6:34","type":""},{"name":"value4","nativeSrc":"1926:6:34","nodeType":"YulTypedName","src":"1926:6:34","type":""},{"name":"value3","nativeSrc":"1934:6:34","nodeType":"YulTypedName","src":"1934:6:34","type":""},{"name":"value2","nativeSrc":"1942:6:34","nodeType":"YulTypedName","src":"1942:6:34","type":""},{"name":"value1","nativeSrc":"1950:6:34","nodeType":"YulTypedName","src":"1950:6:34","type":""},{"name":"value0","nativeSrc":"1958:6:34","nodeType":"YulTypedName","src":"1958:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1969:4:34","nodeType":"YulTypedName","src":"1969:4:34","type":""}],"src":"1670:1073:34"},{"body":{"nativeSrc":"3003:465:34","nodeType":"YulBlock","src":"3003:465:34","statements":[{"nativeSrc":"3013:27:34","nodeType":"YulAssignment","src":"3013:27:34","value":{"arguments":[{"name":"headStart","nativeSrc":"3025:9:34","nodeType":"YulIdentifier","src":"3025:9:34"},{"kind":"number","nativeSrc":"3036:3:34","nodeType":"YulLiteral","src":"3036:3:34","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"3021:3:34","nodeType":"YulIdentifier","src":"3021:3:34"},"nativeSrc":"3021:19:34","nodeType":"YulFunctionCall","src":"3021:19:34"},"variableNames":[{"name":"tail","nativeSrc":"3013:4:34","nodeType":"YulIdentifier","src":"3013:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3056:9:34","nodeType":"YulIdentifier","src":"3056:9:34"},{"arguments":[{"name":"value0","nativeSrc":"3071:6:34","nodeType":"YulIdentifier","src":"3071:6:34"},{"kind":"number","nativeSrc":"3079:6:34","nodeType":"YulLiteral","src":"3079:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3067:3:34","nodeType":"YulIdentifier","src":"3067:3:34"},"nativeSrc":"3067:19:34","nodeType":"YulFunctionCall","src":"3067:19:34"}],"functionName":{"name":"mstore","nativeSrc":"3049:6:34","nodeType":"YulIdentifier","src":"3049:6:34"},"nativeSrc":"3049:38:34","nodeType":"YulFunctionCall","src":"3049:38:34"},"nativeSrc":"3049:38:34","nodeType":"YulExpressionStatement","src":"3049:38:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3107:9:34","nodeType":"YulIdentifier","src":"3107:9:34"},{"kind":"number","nativeSrc":"3118:2:34","nodeType":"YulLiteral","src":"3118:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3103:3:34","nodeType":"YulIdentifier","src":"3103:3:34"},"nativeSrc":"3103:18:34","nodeType":"YulFunctionCall","src":"3103:18:34"},{"arguments":[{"name":"value1","nativeSrc":"3127:6:34","nodeType":"YulIdentifier","src":"3127:6:34"},{"kind":"number","nativeSrc":"3135:6:34","nodeType":"YulLiteral","src":"3135:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3123:3:34","nodeType":"YulIdentifier","src":"3123:3:34"},"nativeSrc":"3123:19:34","nodeType":"YulFunctionCall","src":"3123:19:34"}],"functionName":{"name":"mstore","nativeSrc":"3096:6:34","nodeType":"YulIdentifier","src":"3096:6:34"},"nativeSrc":"3096:47:34","nodeType":"YulFunctionCall","src":"3096:47:34"},"nativeSrc":"3096:47:34","nodeType":"YulExpressionStatement","src":"3096:47:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3163:9:34","nodeType":"YulIdentifier","src":"3163:9:34"},{"kind":"number","nativeSrc":"3174:2:34","nodeType":"YulLiteral","src":"3174:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3159:3:34","nodeType":"YulIdentifier","src":"3159:3:34"},"nativeSrc":"3159:18:34","nodeType":"YulFunctionCall","src":"3159:18:34"},{"arguments":[{"name":"value2","nativeSrc":"3183:6:34","nodeType":"YulIdentifier","src":"3183:6:34"},{"kind":"number","nativeSrc":"3191:18:34","nodeType":"YulLiteral","src":"3191:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3179:3:34","nodeType":"YulIdentifier","src":"3179:3:34"},"nativeSrc":"3179:31:34","nodeType":"YulFunctionCall","src":"3179:31:34"}],"functionName":{"name":"mstore","nativeSrc":"3152:6:34","nodeType":"YulIdentifier","src":"3152:6:34"},"nativeSrc":"3152:59:34","nodeType":"YulFunctionCall","src":"3152:59:34"},"nativeSrc":"3152:59:34","nodeType":"YulExpressionStatement","src":"3152:59:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3231:9:34","nodeType":"YulIdentifier","src":"3231:9:34"},{"kind":"number","nativeSrc":"3242:2:34","nodeType":"YulLiteral","src":"3242:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3227:3:34","nodeType":"YulIdentifier","src":"3227:3:34"},"nativeSrc":"3227:18:34","nodeType":"YulFunctionCall","src":"3227:18:34"},{"arguments":[{"name":"value3","nativeSrc":"3251:6:34","nodeType":"YulIdentifier","src":"3251:6:34"},{"kind":"number","nativeSrc":"3259:6:34","nodeType":"YulLiteral","src":"3259:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3247:3:34","nodeType":"YulIdentifier","src":"3247:3:34"},"nativeSrc":"3247:19:34","nodeType":"YulFunctionCall","src":"3247:19:34"}],"functionName":{"name":"mstore","nativeSrc":"3220:6:34","nodeType":"YulIdentifier","src":"3220:6:34"},"nativeSrc":"3220:47:34","nodeType":"YulFunctionCall","src":"3220:47:34"},"nativeSrc":"3220:47:34","nodeType":"YulExpressionStatement","src":"3220:47:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3287:9:34","nodeType":"YulIdentifier","src":"3287:9:34"},{"kind":"number","nativeSrc":"3298:3:34","nodeType":"YulLiteral","src":"3298:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3283:3:34","nodeType":"YulIdentifier","src":"3283:3:34"},"nativeSrc":"3283:19:34","nodeType":"YulFunctionCall","src":"3283:19:34"},{"arguments":[{"name":"value4","nativeSrc":"3308:6:34","nodeType":"YulIdentifier","src":"3308:6:34"},{"kind":"number","nativeSrc":"3316:18:34","nodeType":"YulLiteral","src":"3316:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3304:3:34","nodeType":"YulIdentifier","src":"3304:3:34"},"nativeSrc":"3304:31:34","nodeType":"YulFunctionCall","src":"3304:31:34"}],"functionName":{"name":"mstore","nativeSrc":"3276:6:34","nodeType":"YulIdentifier","src":"3276:6:34"},"nativeSrc":"3276:60:34","nodeType":"YulFunctionCall","src":"3276:60:34"},"nativeSrc":"3276:60:34","nodeType":"YulExpressionStatement","src":"3276:60:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3356:9:34","nodeType":"YulIdentifier","src":"3356:9:34"},{"kind":"number","nativeSrc":"3367:3:34","nodeType":"YulLiteral","src":"3367:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"3352:3:34","nodeType":"YulIdentifier","src":"3352:3:34"},"nativeSrc":"3352:19:34","nodeType":"YulFunctionCall","src":"3352:19:34"},{"arguments":[{"name":"value5","nativeSrc":"3377:6:34","nodeType":"YulIdentifier","src":"3377:6:34"},{"kind":"number","nativeSrc":"3385:6:34","nodeType":"YulLiteral","src":"3385:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3373:3:34","nodeType":"YulIdentifier","src":"3373:3:34"},"nativeSrc":"3373:19:34","nodeType":"YulFunctionCall","src":"3373:19:34"}],"functionName":{"name":"mstore","nativeSrc":"3345:6:34","nodeType":"YulIdentifier","src":"3345:6:34"},"nativeSrc":"3345:48:34","nodeType":"YulFunctionCall","src":"3345:48:34"},"nativeSrc":"3345:48:34","nodeType":"YulExpressionStatement","src":"3345:48:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3413:9:34","nodeType":"YulIdentifier","src":"3413:9:34"},{"kind":"number","nativeSrc":"3424:3:34","nodeType":"YulLiteral","src":"3424:3:34","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"3409:3:34","nodeType":"YulIdentifier","src":"3409:3:34"},"nativeSrc":"3409:19:34","nodeType":"YulFunctionCall","src":"3409:19:34"},{"arguments":[{"name":"value6","nativeSrc":"3434:6:34","nodeType":"YulIdentifier","src":"3434:6:34"},{"kind":"number","nativeSrc":"3442:18:34","nodeType":"YulLiteral","src":"3442:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3430:3:34","nodeType":"YulIdentifier","src":"3430:3:34"},"nativeSrc":"3430:31:34","nodeType":"YulFunctionCall","src":"3430:31:34"}],"functionName":{"name":"mstore","nativeSrc":"3402:6:34","nodeType":"YulIdentifier","src":"3402:6:34"},"nativeSrc":"3402:60:34","nodeType":"YulFunctionCall","src":"3402:60:34"},"nativeSrc":"3402:60:34","nodeType":"YulExpressionStatement","src":"3402:60:34"}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint16_t_uint64_t_uint16_t_uint64__to_t_uint16_t_uint16_t_uint64_t_uint16_t_uint64_t_uint16_t_uint64__fromStack_reversed","nativeSrc":"2748:720:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2924:9:34","nodeType":"YulTypedName","src":"2924:9:34","type":""},{"name":"value6","nativeSrc":"2935:6:34","nodeType":"YulTypedName","src":"2935:6:34","type":""},{"name":"value5","nativeSrc":"2943:6:34","nodeType":"YulTypedName","src":"2943:6:34","type":""},{"name":"value4","nativeSrc":"2951:6:34","nodeType":"YulTypedName","src":"2951:6:34","type":""},{"name":"value3","nativeSrc":"2959:6:34","nodeType":"YulTypedName","src":"2959:6:34","type":""},{"name":"value2","nativeSrc":"2967:6:34","nodeType":"YulTypedName","src":"2967:6:34","type":""},{"name":"value1","nativeSrc":"2975:6:34","nodeType":"YulTypedName","src":"2975:6:34","type":""},{"name":"value0","nativeSrc":"2983:6:34","nodeType":"YulTypedName","src":"2983:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2994:4:34","nodeType":"YulTypedName","src":"2994:4:34","type":""}],"src":"2748:720:34"},{"body":{"nativeSrc":"3521:111:34","nodeType":"YulBlock","src":"3521:111:34","statements":[{"nativeSrc":"3531:29:34","nodeType":"YulAssignment","src":"3531:29:34","value":{"arguments":[{"name":"offset","nativeSrc":"3553:6:34","nodeType":"YulIdentifier","src":"3553:6:34"}],"functionName":{"name":"calldataload","nativeSrc":"3540:12:34","nodeType":"YulIdentifier","src":"3540:12:34"},"nativeSrc":"3540:20:34","nodeType":"YulFunctionCall","src":"3540:20:34"},"variableNames":[{"name":"value","nativeSrc":"3531:5:34","nodeType":"YulIdentifier","src":"3531:5:34"}]},{"body":{"nativeSrc":"3610:16:34","nodeType":"YulBlock","src":"3610:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3619:1:34","nodeType":"YulLiteral","src":"3619:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"3622:1:34","nodeType":"YulLiteral","src":"3622:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3612:6:34","nodeType":"YulIdentifier","src":"3612:6:34"},"nativeSrc":"3612:12:34","nodeType":"YulFunctionCall","src":"3612:12:34"},"nativeSrc":"3612:12:34","nodeType":"YulExpressionStatement","src":"3612:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3582:5:34","nodeType":"YulIdentifier","src":"3582:5:34"},{"arguments":[{"name":"value","nativeSrc":"3593:5:34","nodeType":"YulIdentifier","src":"3593:5:34"},{"kind":"number","nativeSrc":"3600:6:34","nodeType":"YulLiteral","src":"3600:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3589:3:34","nodeType":"YulIdentifier","src":"3589:3:34"},"nativeSrc":"3589:18:34","nodeType":"YulFunctionCall","src":"3589:18:34"}],"functionName":{"name":"eq","nativeSrc":"3579:2:34","nodeType":"YulIdentifier","src":"3579:2:34"},"nativeSrc":"3579:29:34","nodeType":"YulFunctionCall","src":"3579:29:34"}],"functionName":{"name":"iszero","nativeSrc":"3572:6:34","nodeType":"YulIdentifier","src":"3572:6:34"},"nativeSrc":"3572:37:34","nodeType":"YulFunctionCall","src":"3572:37:34"},"nativeSrc":"3569:57:34","nodeType":"YulIf","src":"3569:57:34"}]},"name":"abi_decode_uint16","nativeSrc":"3473:159:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3500:6:34","nodeType":"YulTypedName","src":"3500:6:34","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3511:5:34","nodeType":"YulTypedName","src":"3511:5:34","type":""}],"src":"3473:159:34"},{"body":{"nativeSrc":"3722:271:34","nodeType":"YulBlock","src":"3722:271:34","statements":[{"body":{"nativeSrc":"3768:16:34","nodeType":"YulBlock","src":"3768:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3777:1:34","nodeType":"YulLiteral","src":"3777:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"3780:1:34","nodeType":"YulLiteral","src":"3780:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3770:6:34","nodeType":"YulIdentifier","src":"3770:6:34"},"nativeSrc":"3770:12:34","nodeType":"YulFunctionCall","src":"3770:12:34"},"nativeSrc":"3770:12:34","nodeType":"YulExpressionStatement","src":"3770:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3743:7:34","nodeType":"YulIdentifier","src":"3743:7:34"},{"name":"headStart","nativeSrc":"3752:9:34","nodeType":"YulIdentifier","src":"3752:9:34"}],"functionName":{"name":"sub","nativeSrc":"3739:3:34","nodeType":"YulIdentifier","src":"3739:3:34"},"nativeSrc":"3739:23:34","nodeType":"YulFunctionCall","src":"3739:23:34"},{"kind":"number","nativeSrc":"3764:2:34","nodeType":"YulLiteral","src":"3764:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3735:3:34","nodeType":"YulIdentifier","src":"3735:3:34"},"nativeSrc":"3735:32:34","nodeType":"YulFunctionCall","src":"3735:32:34"},"nativeSrc":"3732:52:34","nodeType":"YulIf","src":"3732:52:34"},{"nativeSrc":"3793:38:34","nodeType":"YulAssignment","src":"3793:38:34","value":{"arguments":[{"name":"headStart","nativeSrc":"3821:9:34","nodeType":"YulIdentifier","src":"3821:9:34"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"3803:17:34","nodeType":"YulIdentifier","src":"3803:17:34"},"nativeSrc":"3803:28:34","nodeType":"YulFunctionCall","src":"3803:28:34"},"variableNames":[{"name":"value0","nativeSrc":"3793:6:34","nodeType":"YulIdentifier","src":"3793:6:34"}]},{"nativeSrc":"3840:45:34","nodeType":"YulVariableDeclaration","src":"3840:45:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3870:9:34","nodeType":"YulIdentifier","src":"3870:9:34"},{"kind":"number","nativeSrc":"3881:2:34","nodeType":"YulLiteral","src":"3881:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3866:3:34","nodeType":"YulIdentifier","src":"3866:3:34"},"nativeSrc":"3866:18:34","nodeType":"YulFunctionCall","src":"3866:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"3853:12:34","nodeType":"YulIdentifier","src":"3853:12:34"},"nativeSrc":"3853:32:34","nodeType":"YulFunctionCall","src":"3853:32:34"},"variables":[{"name":"value","nativeSrc":"3844:5:34","nodeType":"YulTypedName","src":"3844:5:34","type":""}]},{"body":{"nativeSrc":"3947:16:34","nodeType":"YulBlock","src":"3947:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3956:1:34","nodeType":"YulLiteral","src":"3956:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"3959:1:34","nodeType":"YulLiteral","src":"3959:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3949:6:34","nodeType":"YulIdentifier","src":"3949:6:34"},"nativeSrc":"3949:12:34","nodeType":"YulFunctionCall","src":"3949:12:34"},"nativeSrc":"3949:12:34","nodeType":"YulExpressionStatement","src":"3949:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3907:5:34","nodeType":"YulIdentifier","src":"3907:5:34"},{"arguments":[{"name":"value","nativeSrc":"3918:5:34","nodeType":"YulIdentifier","src":"3918:5:34"},{"kind":"number","nativeSrc":"3925:18:34","nodeType":"YulLiteral","src":"3925:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3914:3:34","nodeType":"YulIdentifier","src":"3914:3:34"},"nativeSrc":"3914:30:34","nodeType":"YulFunctionCall","src":"3914:30:34"}],"functionName":{"name":"eq","nativeSrc":"3904:2:34","nodeType":"YulIdentifier","src":"3904:2:34"},"nativeSrc":"3904:41:34","nodeType":"YulFunctionCall","src":"3904:41:34"}],"functionName":{"name":"iszero","nativeSrc":"3897:6:34","nodeType":"YulIdentifier","src":"3897:6:34"},"nativeSrc":"3897:49:34","nodeType":"YulFunctionCall","src":"3897:49:34"},"nativeSrc":"3894:69:34","nodeType":"YulIf","src":"3894:69:34"},{"nativeSrc":"3972:15:34","nodeType":"YulAssignment","src":"3972:15:34","value":{"name":"value","nativeSrc":"3982:5:34","nodeType":"YulIdentifier","src":"3982:5:34"},"variableNames":[{"name":"value1","nativeSrc":"3972:6:34","nodeType":"YulIdentifier","src":"3972:6:34"}]}]},"name":"abi_decode_tuple_t_uint16t_uint64","nativeSrc":"3637:356:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3680:9:34","nodeType":"YulTypedName","src":"3680:9:34","type":""},{"name":"dataEnd","nativeSrc":"3691:7:34","nodeType":"YulTypedName","src":"3691:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3703:6:34","nodeType":"YulTypedName","src":"3703:6:34","type":""},{"name":"value1","nativeSrc":"3711:6:34","nodeType":"YulTypedName","src":"3711:6:34","type":""}],"src":"3637:356:34"},{"body":{"nativeSrc":"4099:125:34","nodeType":"YulBlock","src":"4099:125:34","statements":[{"nativeSrc":"4109:26:34","nodeType":"YulAssignment","src":"4109:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"4121:9:34","nodeType":"YulIdentifier","src":"4121:9:34"},{"kind":"number","nativeSrc":"4132:2:34","nodeType":"YulLiteral","src":"4132:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4117:3:34","nodeType":"YulIdentifier","src":"4117:3:34"},"nativeSrc":"4117:18:34","nodeType":"YulFunctionCall","src":"4117:18:34"},"variableNames":[{"name":"tail","nativeSrc":"4109:4:34","nodeType":"YulIdentifier","src":"4109:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4151:9:34","nodeType":"YulIdentifier","src":"4151:9:34"},{"arguments":[{"name":"value0","nativeSrc":"4166:6:34","nodeType":"YulIdentifier","src":"4166:6:34"},{"kind":"number","nativeSrc":"4174:42:34","nodeType":"YulLiteral","src":"4174:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4162:3:34","nodeType":"YulIdentifier","src":"4162:3:34"},"nativeSrc":"4162:55:34","nodeType":"YulFunctionCall","src":"4162:55:34"}],"functionName":{"name":"mstore","nativeSrc":"4144:6:34","nodeType":"YulIdentifier","src":"4144:6:34"},"nativeSrc":"4144:74:34","nodeType":"YulFunctionCall","src":"4144:74:34"},"nativeSrc":"4144:74:34","nodeType":"YulExpressionStatement","src":"4144:74:34"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3998:226:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4068:9:34","nodeType":"YulTypedName","src":"4068:9:34","type":""},{"name":"value0","nativeSrc":"4079:6:34","nodeType":"YulTypedName","src":"4079:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4090:4:34","nodeType":"YulTypedName","src":"4090:4:34","type":""}],"src":"3998:226:34"},{"body":{"nativeSrc":"4335:559:34","nodeType":"YulBlock","src":"4335:559:34","statements":[{"body":{"nativeSrc":"4381:16:34","nodeType":"YulBlock","src":"4381:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4390:1:34","nodeType":"YulLiteral","src":"4390:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"4393:1:34","nodeType":"YulLiteral","src":"4393:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4383:6:34","nodeType":"YulIdentifier","src":"4383:6:34"},"nativeSrc":"4383:12:34","nodeType":"YulFunctionCall","src":"4383:12:34"},"nativeSrc":"4383:12:34","nodeType":"YulExpressionStatement","src":"4383:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4356:7:34","nodeType":"YulIdentifier","src":"4356:7:34"},{"name":"headStart","nativeSrc":"4365:9:34","nodeType":"YulIdentifier","src":"4365:9:34"}],"functionName":{"name":"sub","nativeSrc":"4352:3:34","nodeType":"YulIdentifier","src":"4352:3:34"},"nativeSrc":"4352:23:34","nodeType":"YulFunctionCall","src":"4352:23:34"},{"kind":"number","nativeSrc":"4377:2:34","nodeType":"YulLiteral","src":"4377:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4348:3:34","nodeType":"YulIdentifier","src":"4348:3:34"},"nativeSrc":"4348:32:34","nodeType":"YulFunctionCall","src":"4348:32:34"},"nativeSrc":"4345:52:34","nodeType":"YulIf","src":"4345:52:34"},{"nativeSrc":"4406:37:34","nodeType":"YulVariableDeclaration","src":"4406:37:34","value":{"arguments":[{"name":"headStart","nativeSrc":"4433:9:34","nodeType":"YulIdentifier","src":"4433:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"4420:12:34","nodeType":"YulIdentifier","src":"4420:12:34"},"nativeSrc":"4420:23:34","nodeType":"YulFunctionCall","src":"4420:23:34"},"variables":[{"name":"offset","nativeSrc":"4410:6:34","nodeType":"YulTypedName","src":"4410:6:34","type":""}]},{"body":{"nativeSrc":"4486:16:34","nodeType":"YulBlock","src":"4486:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4495:1:34","nodeType":"YulLiteral","src":"4495:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"4498:1:34","nodeType":"YulLiteral","src":"4498:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4488:6:34","nodeType":"YulIdentifier","src":"4488:6:34"},"nativeSrc":"4488:12:34","nodeType":"YulFunctionCall","src":"4488:12:34"},"nativeSrc":"4488:12:34","nodeType":"YulExpressionStatement","src":"4488:12:34"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4458:6:34","nodeType":"YulIdentifier","src":"4458:6:34"},{"kind":"number","nativeSrc":"4466:18:34","nodeType":"YulLiteral","src":"4466:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4455:2:34","nodeType":"YulIdentifier","src":"4455:2:34"},"nativeSrc":"4455:30:34","nodeType":"YulFunctionCall","src":"4455:30:34"},"nativeSrc":"4452:50:34","nodeType":"YulIf","src":"4452:50:34"},{"nativeSrc":"4511:32:34","nodeType":"YulVariableDeclaration","src":"4511:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"4525:9:34","nodeType":"YulIdentifier","src":"4525:9:34"},{"name":"offset","nativeSrc":"4536:6:34","nodeType":"YulIdentifier","src":"4536:6:34"}],"functionName":{"name":"add","nativeSrc":"4521:3:34","nodeType":"YulIdentifier","src":"4521:3:34"},"nativeSrc":"4521:22:34","nodeType":"YulFunctionCall","src":"4521:22:34"},"variables":[{"name":"_1","nativeSrc":"4515:2:34","nodeType":"YulTypedName","src":"4515:2:34","type":""}]},{"body":{"nativeSrc":"4591:16:34","nodeType":"YulBlock","src":"4591:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4600:1:34","nodeType":"YulLiteral","src":"4600:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"4603:1:34","nodeType":"YulLiteral","src":"4603:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4593:6:34","nodeType":"YulIdentifier","src":"4593:6:34"},"nativeSrc":"4593:12:34","nodeType":"YulFunctionCall","src":"4593:12:34"},"nativeSrc":"4593:12:34","nodeType":"YulExpressionStatement","src":"4593:12:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"4570:2:34","nodeType":"YulIdentifier","src":"4570:2:34"},{"kind":"number","nativeSrc":"4574:4:34","nodeType":"YulLiteral","src":"4574:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4566:3:34","nodeType":"YulIdentifier","src":"4566:3:34"},"nativeSrc":"4566:13:34","nodeType":"YulFunctionCall","src":"4566:13:34"},{"name":"dataEnd","nativeSrc":"4581:7:34","nodeType":"YulIdentifier","src":"4581:7:34"}],"functionName":{"name":"slt","nativeSrc":"4562:3:34","nodeType":"YulIdentifier","src":"4562:3:34"},"nativeSrc":"4562:27:34","nodeType":"YulFunctionCall","src":"4562:27:34"}],"functionName":{"name":"iszero","nativeSrc":"4555:6:34","nodeType":"YulIdentifier","src":"4555:6:34"},"nativeSrc":"4555:35:34","nodeType":"YulFunctionCall","src":"4555:35:34"},"nativeSrc":"4552:55:34","nodeType":"YulIf","src":"4552:55:34"},{"nativeSrc":"4616:30:34","nodeType":"YulVariableDeclaration","src":"4616:30:34","value":{"arguments":[{"name":"_1","nativeSrc":"4643:2:34","nodeType":"YulIdentifier","src":"4643:2:34"}],"functionName":{"name":"calldataload","nativeSrc":"4630:12:34","nodeType":"YulIdentifier","src":"4630:12:34"},"nativeSrc":"4630:16:34","nodeType":"YulFunctionCall","src":"4630:16:34"},"variables":[{"name":"length","nativeSrc":"4620:6:34","nodeType":"YulTypedName","src":"4620:6:34","type":""}]},{"body":{"nativeSrc":"4689:16:34","nodeType":"YulBlock","src":"4689:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4698:1:34","nodeType":"YulLiteral","src":"4698:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"4701:1:34","nodeType":"YulLiteral","src":"4701:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4691:6:34","nodeType":"YulIdentifier","src":"4691:6:34"},"nativeSrc":"4691:12:34","nodeType":"YulFunctionCall","src":"4691:12:34"},"nativeSrc":"4691:12:34","nodeType":"YulExpressionStatement","src":"4691:12:34"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4661:6:34","nodeType":"YulIdentifier","src":"4661:6:34"},{"kind":"number","nativeSrc":"4669:18:34","nodeType":"YulLiteral","src":"4669:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4658:2:34","nodeType":"YulIdentifier","src":"4658:2:34"},"nativeSrc":"4658:30:34","nodeType":"YulFunctionCall","src":"4658:30:34"},"nativeSrc":"4655:50:34","nodeType":"YulIf","src":"4655:50:34"},{"body":{"nativeSrc":"4757:16:34","nodeType":"YulBlock","src":"4757:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4766:1:34","nodeType":"YulLiteral","src":"4766:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"4769:1:34","nodeType":"YulLiteral","src":"4769:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4759:6:34","nodeType":"YulIdentifier","src":"4759:6:34"},"nativeSrc":"4759:12:34","nodeType":"YulFunctionCall","src":"4759:12:34"},"nativeSrc":"4759:12:34","nodeType":"YulExpressionStatement","src":"4759:12:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"4728:2:34","nodeType":"YulIdentifier","src":"4728:2:34"},{"name":"length","nativeSrc":"4732:6:34","nodeType":"YulIdentifier","src":"4732:6:34"}],"functionName":{"name":"add","nativeSrc":"4724:3:34","nodeType":"YulIdentifier","src":"4724:3:34"},"nativeSrc":"4724:15:34","nodeType":"YulFunctionCall","src":"4724:15:34"},{"kind":"number","nativeSrc":"4741:4:34","nodeType":"YulLiteral","src":"4741:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4720:3:34","nodeType":"YulIdentifier","src":"4720:3:34"},"nativeSrc":"4720:26:34","nodeType":"YulFunctionCall","src":"4720:26:34"},{"name":"dataEnd","nativeSrc":"4748:7:34","nodeType":"YulIdentifier","src":"4748:7:34"}],"functionName":{"name":"gt","nativeSrc":"4717:2:34","nodeType":"YulIdentifier","src":"4717:2:34"},"nativeSrc":"4717:39:34","nodeType":"YulFunctionCall","src":"4717:39:34"},"nativeSrc":"4714:59:34","nodeType":"YulIf","src":"4714:59:34"},{"nativeSrc":"4782:23:34","nodeType":"YulAssignment","src":"4782:23:34","value":{"arguments":[{"name":"_1","nativeSrc":"4796:2:34","nodeType":"YulIdentifier","src":"4796:2:34"},{"kind":"number","nativeSrc":"4800:4:34","nodeType":"YulLiteral","src":"4800:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4792:3:34","nodeType":"YulIdentifier","src":"4792:3:34"},"nativeSrc":"4792:13:34","nodeType":"YulFunctionCall","src":"4792:13:34"},"variableNames":[{"name":"value0","nativeSrc":"4782:6:34","nodeType":"YulIdentifier","src":"4782:6:34"}]},{"nativeSrc":"4814:16:34","nodeType":"YulAssignment","src":"4814:16:34","value":{"name":"length","nativeSrc":"4824:6:34","nodeType":"YulIdentifier","src":"4824:6:34"},"variableNames":[{"name":"value1","nativeSrc":"4814:6:34","nodeType":"YulIdentifier","src":"4814:6:34"}]},{"nativeSrc":"4839:49:34","nodeType":"YulAssignment","src":"4839:49:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4871:9:34","nodeType":"YulIdentifier","src":"4871:9:34"},{"kind":"number","nativeSrc":"4882:4:34","nodeType":"YulLiteral","src":"4882:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4867:3:34","nodeType":"YulIdentifier","src":"4867:3:34"},"nativeSrc":"4867:20:34","nodeType":"YulFunctionCall","src":"4867:20:34"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"4849:17:34","nodeType":"YulIdentifier","src":"4849:17:34"},"nativeSrc":"4849:39:34","nodeType":"YulFunctionCall","src":"4849:39:34"},"variableNames":[{"name":"value2","nativeSrc":"4839:6:34","nodeType":"YulIdentifier","src":"4839:6:34"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_uint16","nativeSrc":"4229:665:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4285:9:34","nodeType":"YulTypedName","src":"4285:9:34","type":""},{"name":"dataEnd","nativeSrc":"4296:7:34","nodeType":"YulTypedName","src":"4296:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4308:6:34","nodeType":"YulTypedName","src":"4308:6:34","type":""},{"name":"value1","nativeSrc":"4316:6:34","nodeType":"YulTypedName","src":"4316:6:34","type":""},{"name":"value2","nativeSrc":"4324:6:34","nodeType":"YulTypedName","src":"4324:6:34","type":""}],"src":"4229:665:34"},{"body":{"nativeSrc":"4985:212:34","nodeType":"YulBlock","src":"4985:212:34","statements":[{"body":{"nativeSrc":"5031:16:34","nodeType":"YulBlock","src":"5031:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5040:1:34","nodeType":"YulLiteral","src":"5040:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"5043:1:34","nodeType":"YulLiteral","src":"5043:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5033:6:34","nodeType":"YulIdentifier","src":"5033:6:34"},"nativeSrc":"5033:12:34","nodeType":"YulFunctionCall","src":"5033:12:34"},"nativeSrc":"5033:12:34","nodeType":"YulExpressionStatement","src":"5033:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5006:7:34","nodeType":"YulIdentifier","src":"5006:7:34"},{"name":"headStart","nativeSrc":"5015:9:34","nodeType":"YulIdentifier","src":"5015:9:34"}],"functionName":{"name":"sub","nativeSrc":"5002:3:34","nodeType":"YulIdentifier","src":"5002:3:34"},"nativeSrc":"5002:23:34","nodeType":"YulFunctionCall","src":"5002:23:34"},{"kind":"number","nativeSrc":"5027:2:34","nodeType":"YulLiteral","src":"5027:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4998:3:34","nodeType":"YulIdentifier","src":"4998:3:34"},"nativeSrc":"4998:32:34","nodeType":"YulFunctionCall","src":"4998:32:34"},"nativeSrc":"4995:52:34","nodeType":"YulIf","src":"4995:52:34"},{"nativeSrc":"5056:14:34","nodeType":"YulVariableDeclaration","src":"5056:14:34","value":{"kind":"number","nativeSrc":"5069:1:34","nodeType":"YulLiteral","src":"5069:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"5060:5:34","nodeType":"YulTypedName","src":"5060:5:34","type":""}]},{"nativeSrc":"5079:32:34","nodeType":"YulAssignment","src":"5079:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"5101:9:34","nodeType":"YulIdentifier","src":"5101:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"5088:12:34","nodeType":"YulIdentifier","src":"5088:12:34"},"nativeSrc":"5088:23:34","nodeType":"YulFunctionCall","src":"5088:23:34"},"variableNames":[{"name":"value","nativeSrc":"5079:5:34","nodeType":"YulIdentifier","src":"5079:5:34"}]},{"nativeSrc":"5120:15:34","nodeType":"YulAssignment","src":"5120:15:34","value":{"name":"value","nativeSrc":"5130:5:34","nodeType":"YulIdentifier","src":"5130:5:34"},"variableNames":[{"name":"value0","nativeSrc":"5120:6:34","nodeType":"YulIdentifier","src":"5120:6:34"}]},{"nativeSrc":"5144:47:34","nodeType":"YulAssignment","src":"5144:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5176:9:34","nodeType":"YulIdentifier","src":"5176:9:34"},{"kind":"number","nativeSrc":"5187:2:34","nodeType":"YulLiteral","src":"5187:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5172:3:34","nodeType":"YulIdentifier","src":"5172:3:34"},"nativeSrc":"5172:18:34","nodeType":"YulFunctionCall","src":"5172:18:34"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"5154:17:34","nodeType":"YulIdentifier","src":"5154:17:34"},"nativeSrc":"5154:37:34","nodeType":"YulFunctionCall","src":"5154:37:34"},"variableNames":[{"name":"value1","nativeSrc":"5144:6:34","nodeType":"YulIdentifier","src":"5144:6:34"}]}]},"name":"abi_decode_tuple_t_uint256t_uint16","nativeSrc":"4899:298:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4943:9:34","nodeType":"YulTypedName","src":"4943:9:34","type":""},{"name":"dataEnd","nativeSrc":"4954:7:34","nodeType":"YulTypedName","src":"4954:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4966:6:34","nodeType":"YulTypedName","src":"4966:6:34","type":""},{"name":"value1","nativeSrc":"4974:6:34","nodeType":"YulTypedName","src":"4974:6:34","type":""}],"src":"4899:298:34"},{"body":{"nativeSrc":"5251:147:34","nodeType":"YulBlock","src":"5251:147:34","statements":[{"nativeSrc":"5261:29:34","nodeType":"YulAssignment","src":"5261:29:34","value":{"arguments":[{"name":"offset","nativeSrc":"5283:6:34","nodeType":"YulIdentifier","src":"5283:6:34"}],"functionName":{"name":"calldataload","nativeSrc":"5270:12:34","nodeType":"YulIdentifier","src":"5270:12:34"},"nativeSrc":"5270:20:34","nodeType":"YulFunctionCall","src":"5270:20:34"},"variableNames":[{"name":"value","nativeSrc":"5261:5:34","nodeType":"YulIdentifier","src":"5261:5:34"}]},{"body":{"nativeSrc":"5376:16:34","nodeType":"YulBlock","src":"5376:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5385:1:34","nodeType":"YulLiteral","src":"5385:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"5388:1:34","nodeType":"YulLiteral","src":"5388:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5378:6:34","nodeType":"YulIdentifier","src":"5378:6:34"},"nativeSrc":"5378:12:34","nodeType":"YulFunctionCall","src":"5378:12:34"},"nativeSrc":"5378:12:34","nodeType":"YulExpressionStatement","src":"5378:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5312:5:34","nodeType":"YulIdentifier","src":"5312:5:34"},{"arguments":[{"name":"value","nativeSrc":"5323:5:34","nodeType":"YulIdentifier","src":"5323:5:34"},{"kind":"number","nativeSrc":"5330:42:34","nodeType":"YulLiteral","src":"5330:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5319:3:34","nodeType":"YulIdentifier","src":"5319:3:34"},"nativeSrc":"5319:54:34","nodeType":"YulFunctionCall","src":"5319:54:34"}],"functionName":{"name":"eq","nativeSrc":"5309:2:34","nodeType":"YulIdentifier","src":"5309:2:34"},"nativeSrc":"5309:65:34","nodeType":"YulFunctionCall","src":"5309:65:34"}],"functionName":{"name":"iszero","nativeSrc":"5302:6:34","nodeType":"YulIdentifier","src":"5302:6:34"},"nativeSrc":"5302:73:34","nodeType":"YulFunctionCall","src":"5302:73:34"},"nativeSrc":"5299:93:34","nodeType":"YulIf","src":"5299:93:34"}]},"name":"abi_decode_address","nativeSrc":"5202:196:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"5230:6:34","nodeType":"YulTypedName","src":"5230:6:34","type":""}],"returnVariables":[{"name":"value","nativeSrc":"5241:5:34","nodeType":"YulTypedName","src":"5241:5:34","type":""}],"src":"5202:196:34"},{"body":{"nativeSrc":"5523:373:34","nodeType":"YulBlock","src":"5523:373:34","statements":[{"body":{"nativeSrc":"5570:16:34","nodeType":"YulBlock","src":"5570:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5579:1:34","nodeType":"YulLiteral","src":"5579:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"5582:1:34","nodeType":"YulLiteral","src":"5582:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5572:6:34","nodeType":"YulIdentifier","src":"5572:6:34"},"nativeSrc":"5572:12:34","nodeType":"YulFunctionCall","src":"5572:12:34"},"nativeSrc":"5572:12:34","nodeType":"YulExpressionStatement","src":"5572:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5544:7:34","nodeType":"YulIdentifier","src":"5544:7:34"},{"name":"headStart","nativeSrc":"5553:9:34","nodeType":"YulIdentifier","src":"5553:9:34"}],"functionName":{"name":"sub","nativeSrc":"5540:3:34","nodeType":"YulIdentifier","src":"5540:3:34"},"nativeSrc":"5540:23:34","nodeType":"YulFunctionCall","src":"5540:23:34"},{"kind":"number","nativeSrc":"5565:3:34","nodeType":"YulLiteral","src":"5565:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"5536:3:34","nodeType":"YulIdentifier","src":"5536:3:34"},"nativeSrc":"5536:33:34","nodeType":"YulFunctionCall","src":"5536:33:34"},"nativeSrc":"5533:53:34","nodeType":"YulIf","src":"5533:53:34"},{"nativeSrc":"5595:14:34","nodeType":"YulVariableDeclaration","src":"5595:14:34","value":{"kind":"number","nativeSrc":"5608:1:34","nodeType":"YulLiteral","src":"5608:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"5599:5:34","nodeType":"YulTypedName","src":"5599:5:34","type":""}]},{"nativeSrc":"5618:32:34","nodeType":"YulAssignment","src":"5618:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"5640:9:34","nodeType":"YulIdentifier","src":"5640:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"5627:12:34","nodeType":"YulIdentifier","src":"5627:12:34"},"nativeSrc":"5627:23:34","nodeType":"YulFunctionCall","src":"5627:23:34"},"variableNames":[{"name":"value","nativeSrc":"5618:5:34","nodeType":"YulIdentifier","src":"5618:5:34"}]},{"nativeSrc":"5659:15:34","nodeType":"YulAssignment","src":"5659:15:34","value":{"name":"value","nativeSrc":"5669:5:34","nodeType":"YulIdentifier","src":"5669:5:34"},"variableNames":[{"name":"value0","nativeSrc":"5659:6:34","nodeType":"YulIdentifier","src":"5659:6:34"}]},{"nativeSrc":"5683:47:34","nodeType":"YulAssignment","src":"5683:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5715:9:34","nodeType":"YulIdentifier","src":"5715:9:34"},{"kind":"number","nativeSrc":"5726:2:34","nodeType":"YulLiteral","src":"5726:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5711:3:34","nodeType":"YulIdentifier","src":"5711:3:34"},"nativeSrc":"5711:18:34","nodeType":"YulFunctionCall","src":"5711:18:34"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"5693:17:34","nodeType":"YulIdentifier","src":"5693:17:34"},"nativeSrc":"5693:37:34","nodeType":"YulFunctionCall","src":"5693:37:34"},"variableNames":[{"name":"value1","nativeSrc":"5683:6:34","nodeType":"YulIdentifier","src":"5683:6:34"}]},{"nativeSrc":"5739:48:34","nodeType":"YulAssignment","src":"5739:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5772:9:34","nodeType":"YulIdentifier","src":"5772:9:34"},{"kind":"number","nativeSrc":"5783:2:34","nodeType":"YulLiteral","src":"5783:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5768:3:34","nodeType":"YulIdentifier","src":"5768:3:34"},"nativeSrc":"5768:18:34","nodeType":"YulFunctionCall","src":"5768:18:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5749:18:34","nodeType":"YulIdentifier","src":"5749:18:34"},"nativeSrc":"5749:38:34","nodeType":"YulFunctionCall","src":"5749:38:34"},"variableNames":[{"name":"value2","nativeSrc":"5739:6:34","nodeType":"YulIdentifier","src":"5739:6:34"}]},{"nativeSrc":"5796:16:34","nodeType":"YulVariableDeclaration","src":"5796:16:34","value":{"kind":"number","nativeSrc":"5811:1:34","nodeType":"YulLiteral","src":"5811:1:34","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"5800:7:34","nodeType":"YulTypedName","src":"5800:7:34","type":""}]},{"nativeSrc":"5821:43:34","nodeType":"YulAssignment","src":"5821:43:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5849:9:34","nodeType":"YulIdentifier","src":"5849:9:34"},{"kind":"number","nativeSrc":"5860:2:34","nodeType":"YulLiteral","src":"5860:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5845:3:34","nodeType":"YulIdentifier","src":"5845:3:34"},"nativeSrc":"5845:18:34","nodeType":"YulFunctionCall","src":"5845:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"5832:12:34","nodeType":"YulIdentifier","src":"5832:12:34"},"nativeSrc":"5832:32:34","nodeType":"YulFunctionCall","src":"5832:32:34"},"variableNames":[{"name":"value_1","nativeSrc":"5821:7:34","nodeType":"YulIdentifier","src":"5821:7:34"}]},{"nativeSrc":"5873:17:34","nodeType":"YulAssignment","src":"5873:17:34","value":{"name":"value_1","nativeSrc":"5883:7:34","nodeType":"YulIdentifier","src":"5883:7:34"},"variableNames":[{"name":"value3","nativeSrc":"5873:6:34","nodeType":"YulIdentifier","src":"5873:6:34"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint32t_addresst_uint256","nativeSrc":"5403:493:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5465:9:34","nodeType":"YulTypedName","src":"5465:9:34","type":""},{"name":"dataEnd","nativeSrc":"5476:7:34","nodeType":"YulTypedName","src":"5476:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5488:6:34","nodeType":"YulTypedName","src":"5488:6:34","type":""},{"name":"value1","nativeSrc":"5496:6:34","nodeType":"YulTypedName","src":"5496:6:34","type":""},{"name":"value2","nativeSrc":"5504:6:34","nodeType":"YulTypedName","src":"5504:6:34","type":""},{"name":"value3","nativeSrc":"5512:6:34","nodeType":"YulTypedName","src":"5512:6:34","type":""}],"src":"5403:493:34"},{"body":{"nativeSrc":"6002:76:34","nodeType":"YulBlock","src":"6002:76:34","statements":[{"nativeSrc":"6012:26:34","nodeType":"YulAssignment","src":"6012:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"6024:9:34","nodeType":"YulIdentifier","src":"6024:9:34"},{"kind":"number","nativeSrc":"6035:2:34","nodeType":"YulLiteral","src":"6035:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6020:3:34","nodeType":"YulIdentifier","src":"6020:3:34"},"nativeSrc":"6020:18:34","nodeType":"YulFunctionCall","src":"6020:18:34"},"variableNames":[{"name":"tail","nativeSrc":"6012:4:34","nodeType":"YulIdentifier","src":"6012:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6054:9:34","nodeType":"YulIdentifier","src":"6054:9:34"},{"name":"value0","nativeSrc":"6065:6:34","nodeType":"YulIdentifier","src":"6065:6:34"}],"functionName":{"name":"mstore","nativeSrc":"6047:6:34","nodeType":"YulIdentifier","src":"6047:6:34"},"nativeSrc":"6047:25:34","nodeType":"YulFunctionCall","src":"6047:25:34"},"nativeSrc":"6047:25:34","nodeType":"YulExpressionStatement","src":"6047:25:34"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5901:177:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5971:9:34","nodeType":"YulTypedName","src":"5971:9:34","type":""},{"name":"value0","nativeSrc":"5982:6:34","nodeType":"YulTypedName","src":"5982:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5993:4:34","nodeType":"YulTypedName","src":"5993:4:34","type":""}],"src":"5901:177:34"},{"body":{"nativeSrc":"6203:419:34","nodeType":"YulBlock","src":"6203:419:34","statements":[{"body":{"nativeSrc":"6250:16:34","nodeType":"YulBlock","src":"6250:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6259:1:34","nodeType":"YulLiteral","src":"6259:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"6262:1:34","nodeType":"YulLiteral","src":"6262:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6252:6:34","nodeType":"YulIdentifier","src":"6252:6:34"},"nativeSrc":"6252:12:34","nodeType":"YulFunctionCall","src":"6252:12:34"},"nativeSrc":"6252:12:34","nodeType":"YulExpressionStatement","src":"6252:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6224:7:34","nodeType":"YulIdentifier","src":"6224:7:34"},{"name":"headStart","nativeSrc":"6233:9:34","nodeType":"YulIdentifier","src":"6233:9:34"}],"functionName":{"name":"sub","nativeSrc":"6220:3:34","nodeType":"YulIdentifier","src":"6220:3:34"},"nativeSrc":"6220:23:34","nodeType":"YulFunctionCall","src":"6220:23:34"},{"kind":"number","nativeSrc":"6245:3:34","nodeType":"YulLiteral","src":"6245:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"6216:3:34","nodeType":"YulIdentifier","src":"6216:3:34"},"nativeSrc":"6216:33:34","nodeType":"YulFunctionCall","src":"6216:33:34"},"nativeSrc":"6213:53:34","nodeType":"YulIf","src":"6213:53:34"},{"nativeSrc":"6275:14:34","nodeType":"YulVariableDeclaration","src":"6275:14:34","value":{"kind":"number","nativeSrc":"6288:1:34","nodeType":"YulLiteral","src":"6288:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"6279:5:34","nodeType":"YulTypedName","src":"6279:5:34","type":""}]},{"nativeSrc":"6298:32:34","nodeType":"YulAssignment","src":"6298:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"6320:9:34","nodeType":"YulIdentifier","src":"6320:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"6307:12:34","nodeType":"YulIdentifier","src":"6307:12:34"},"nativeSrc":"6307:23:34","nodeType":"YulFunctionCall","src":"6307:23:34"},"variableNames":[{"name":"value","nativeSrc":"6298:5:34","nodeType":"YulIdentifier","src":"6298:5:34"}]},{"nativeSrc":"6339:15:34","nodeType":"YulAssignment","src":"6339:15:34","value":{"name":"value","nativeSrc":"6349:5:34","nodeType":"YulIdentifier","src":"6349:5:34"},"variableNames":[{"name":"value0","nativeSrc":"6339:6:34","nodeType":"YulIdentifier","src":"6339:6:34"}]},{"nativeSrc":"6363:16:34","nodeType":"YulVariableDeclaration","src":"6363:16:34","value":{"kind":"number","nativeSrc":"6378:1:34","nodeType":"YulLiteral","src":"6378:1:34","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"6367:7:34","nodeType":"YulTypedName","src":"6367:7:34","type":""}]},{"nativeSrc":"6388:43:34","nodeType":"YulAssignment","src":"6388:43:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6416:9:34","nodeType":"YulIdentifier","src":"6416:9:34"},{"kind":"number","nativeSrc":"6427:2:34","nodeType":"YulLiteral","src":"6427:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6412:3:34","nodeType":"YulIdentifier","src":"6412:3:34"},"nativeSrc":"6412:18:34","nodeType":"YulFunctionCall","src":"6412:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"6399:12:34","nodeType":"YulIdentifier","src":"6399:12:34"},"nativeSrc":"6399:32:34","nodeType":"YulFunctionCall","src":"6399:32:34"},"variableNames":[{"name":"value_1","nativeSrc":"6388:7:34","nodeType":"YulIdentifier","src":"6388:7:34"}]},{"nativeSrc":"6440:17:34","nodeType":"YulAssignment","src":"6440:17:34","value":{"name":"value_1","nativeSrc":"6450:7:34","nodeType":"YulIdentifier","src":"6450:7:34"},"variableNames":[{"name":"value1","nativeSrc":"6440:6:34","nodeType":"YulIdentifier","src":"6440:6:34"}]},{"nativeSrc":"6466:47:34","nodeType":"YulAssignment","src":"6466:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6498:9:34","nodeType":"YulIdentifier","src":"6498:9:34"},{"kind":"number","nativeSrc":"6509:2:34","nodeType":"YulLiteral","src":"6509:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6494:3:34","nodeType":"YulIdentifier","src":"6494:3:34"},"nativeSrc":"6494:18:34","nodeType":"YulFunctionCall","src":"6494:18:34"}],"functionName":{"name":"abi_decode_uint32","nativeSrc":"6476:17:34","nodeType":"YulIdentifier","src":"6476:17:34"},"nativeSrc":"6476:37:34","nodeType":"YulFunctionCall","src":"6476:37:34"},"variableNames":[{"name":"value2","nativeSrc":"6466:6:34","nodeType":"YulIdentifier","src":"6466:6:34"}]},{"nativeSrc":"6522:16:34","nodeType":"YulVariableDeclaration","src":"6522:16:34","value":{"kind":"number","nativeSrc":"6537:1:34","nodeType":"YulLiteral","src":"6537:1:34","type":"","value":"0"},"variables":[{"name":"value_2","nativeSrc":"6526:7:34","nodeType":"YulTypedName","src":"6526:7:34","type":""}]},{"nativeSrc":"6547:43:34","nodeType":"YulAssignment","src":"6547:43:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6575:9:34","nodeType":"YulIdentifier","src":"6575:9:34"},{"kind":"number","nativeSrc":"6586:2:34","nodeType":"YulLiteral","src":"6586:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6571:3:34","nodeType":"YulIdentifier","src":"6571:3:34"},"nativeSrc":"6571:18:34","nodeType":"YulFunctionCall","src":"6571:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"6558:12:34","nodeType":"YulIdentifier","src":"6558:12:34"},"nativeSrc":"6558:32:34","nodeType":"YulFunctionCall","src":"6558:32:34"},"variableNames":[{"name":"value_2","nativeSrc":"6547:7:34","nodeType":"YulIdentifier","src":"6547:7:34"}]},{"nativeSrc":"6599:17:34","nodeType":"YulAssignment","src":"6599:17:34","value":{"name":"value_2","nativeSrc":"6609:7:34","nodeType":"YulIdentifier","src":"6609:7:34"},"variableNames":[{"name":"value3","nativeSrc":"6599:6:34","nodeType":"YulIdentifier","src":"6599:6:34"}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32t_uint32t_uint256","nativeSrc":"6083:539:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6145:9:34","nodeType":"YulTypedName","src":"6145:9:34","type":""},{"name":"dataEnd","nativeSrc":"6156:7:34","nodeType":"YulTypedName","src":"6156:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6168:6:34","nodeType":"YulTypedName","src":"6168:6:34","type":""},{"name":"value1","nativeSrc":"6176:6:34","nodeType":"YulTypedName","src":"6176:6:34","type":""},{"name":"value2","nativeSrc":"6184:6:34","nodeType":"YulTypedName","src":"6184:6:34","type":""},{"name":"value3","nativeSrc":"6192:6:34","nodeType":"YulTypedName","src":"6192:6:34","type":""}],"src":"6083:539:34"},{"body":{"nativeSrc":"6696:115:34","nodeType":"YulBlock","src":"6696:115:34","statements":[{"body":{"nativeSrc":"6742:16:34","nodeType":"YulBlock","src":"6742:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6751:1:34","nodeType":"YulLiteral","src":"6751:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"6754:1:34","nodeType":"YulLiteral","src":"6754:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6744:6:34","nodeType":"YulIdentifier","src":"6744:6:34"},"nativeSrc":"6744:12:34","nodeType":"YulFunctionCall","src":"6744:12:34"},"nativeSrc":"6744:12:34","nodeType":"YulExpressionStatement","src":"6744:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6717:7:34","nodeType":"YulIdentifier","src":"6717:7:34"},{"name":"headStart","nativeSrc":"6726:9:34","nodeType":"YulIdentifier","src":"6726:9:34"}],"functionName":{"name":"sub","nativeSrc":"6713:3:34","nodeType":"YulIdentifier","src":"6713:3:34"},"nativeSrc":"6713:23:34","nodeType":"YulFunctionCall","src":"6713:23:34"},{"kind":"number","nativeSrc":"6738:2:34","nodeType":"YulLiteral","src":"6738:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6709:3:34","nodeType":"YulIdentifier","src":"6709:3:34"},"nativeSrc":"6709:32:34","nodeType":"YulFunctionCall","src":"6709:32:34"},"nativeSrc":"6706:52:34","nodeType":"YulIf","src":"6706:52:34"},{"nativeSrc":"6767:38:34","nodeType":"YulAssignment","src":"6767:38:34","value":{"arguments":[{"name":"headStart","nativeSrc":"6795:9:34","nodeType":"YulIdentifier","src":"6795:9:34"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"6777:17:34","nodeType":"YulIdentifier","src":"6777:17:34"},"nativeSrc":"6777:28:34","nodeType":"YulFunctionCall","src":"6777:28:34"},"variableNames":[{"name":"value0","nativeSrc":"6767:6:34","nodeType":"YulIdentifier","src":"6767:6:34"}]}]},"name":"abi_decode_tuple_t_uint16","nativeSrc":"6627:184:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6662:9:34","nodeType":"YulTypedName","src":"6662:9:34","type":""},{"name":"dataEnd","nativeSrc":"6673:7:34","nodeType":"YulTypedName","src":"6673:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6685:6:34","nodeType":"YulTypedName","src":"6685:6:34","type":""}],"src":"6627:184:34"},{"body":{"nativeSrc":"6886:116:34","nodeType":"YulBlock","src":"6886:116:34","statements":[{"body":{"nativeSrc":"6932:16:34","nodeType":"YulBlock","src":"6932:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6941:1:34","nodeType":"YulLiteral","src":"6941:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"6944:1:34","nodeType":"YulLiteral","src":"6944:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6934:6:34","nodeType":"YulIdentifier","src":"6934:6:34"},"nativeSrc":"6934:12:34","nodeType":"YulFunctionCall","src":"6934:12:34"},"nativeSrc":"6934:12:34","nodeType":"YulExpressionStatement","src":"6934:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6907:7:34","nodeType":"YulIdentifier","src":"6907:7:34"},{"name":"headStart","nativeSrc":"6916:9:34","nodeType":"YulIdentifier","src":"6916:9:34"}],"functionName":{"name":"sub","nativeSrc":"6903:3:34","nodeType":"YulIdentifier","src":"6903:3:34"},"nativeSrc":"6903:23:34","nodeType":"YulFunctionCall","src":"6903:23:34"},{"kind":"number","nativeSrc":"6928:2:34","nodeType":"YulLiteral","src":"6928:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6899:3:34","nodeType":"YulIdentifier","src":"6899:3:34"},"nativeSrc":"6899:32:34","nodeType":"YulFunctionCall","src":"6899:32:34"},"nativeSrc":"6896:52:34","nodeType":"YulIf","src":"6896:52:34"},{"nativeSrc":"6957:39:34","nodeType":"YulAssignment","src":"6957:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"6986:9:34","nodeType":"YulIdentifier","src":"6986:9:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6967:18:34","nodeType":"YulIdentifier","src":"6967:18:34"},"nativeSrc":"6967:29:34","nodeType":"YulFunctionCall","src":"6967:29:34"},"variableNames":[{"name":"value0","nativeSrc":"6957:6:34","nodeType":"YulIdentifier","src":"6957:6:34"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"6816:186:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6852:9:34","nodeType":"YulTypedName","src":"6852:9:34","type":""},{"name":"dataEnd","nativeSrc":"6863:7:34","nodeType":"YulTypedName","src":"6863:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6875:6:34","nodeType":"YulTypedName","src":"6875:6:34","type":""}],"src":"6816:186:34"},{"body":{"nativeSrc":"7152:137:34","nodeType":"YulBlock","src":"7152:137:34","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7169:3:34","nodeType":"YulIdentifier","src":"7169:3:34"},{"name":"value0","nativeSrc":"7174:6:34","nodeType":"YulIdentifier","src":"7174:6:34"}],"functionName":{"name":"mstore","nativeSrc":"7162:6:34","nodeType":"YulIdentifier","src":"7162:6:34"},"nativeSrc":"7162:19:34","nodeType":"YulFunctionCall","src":"7162:19:34"},"nativeSrc":"7162:19:34","nodeType":"YulExpressionStatement","src":"7162:19:34"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"7201:3:34","nodeType":"YulIdentifier","src":"7201:3:34"},{"kind":"number","nativeSrc":"7206:2:34","nodeType":"YulLiteral","src":"7206:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7197:3:34","nodeType":"YulIdentifier","src":"7197:3:34"},"nativeSrc":"7197:12:34","nodeType":"YulFunctionCall","src":"7197:12:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7219:3:34","nodeType":"YulLiteral","src":"7219:3:34","type":"","value":"224"},{"name":"value1","nativeSrc":"7224:6:34","nodeType":"YulIdentifier","src":"7224:6:34"}],"functionName":{"name":"shl","nativeSrc":"7215:3:34","nodeType":"YulIdentifier","src":"7215:3:34"},"nativeSrc":"7215:16:34","nodeType":"YulFunctionCall","src":"7215:16:34"},{"arguments":[{"kind":"number","nativeSrc":"7237:3:34","nodeType":"YulLiteral","src":"7237:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"7242:10:34","nodeType":"YulLiteral","src":"7242:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"7233:3:34","nodeType":"YulIdentifier","src":"7233:3:34"},"nativeSrc":"7233:20:34","nodeType":"YulFunctionCall","src":"7233:20:34"}],"functionName":{"name":"and","nativeSrc":"7211:3:34","nodeType":"YulIdentifier","src":"7211:3:34"},"nativeSrc":"7211:43:34","nodeType":"YulFunctionCall","src":"7211:43:34"}],"functionName":{"name":"mstore","nativeSrc":"7190:6:34","nodeType":"YulIdentifier","src":"7190:6:34"},"nativeSrc":"7190:65:34","nodeType":"YulFunctionCall","src":"7190:65:34"},"nativeSrc":"7190:65:34","nodeType":"YulExpressionStatement","src":"7190:65:34"},{"nativeSrc":"7264:19:34","nodeType":"YulAssignment","src":"7264:19:34","value":{"arguments":[{"name":"pos","nativeSrc":"7275:3:34","nodeType":"YulIdentifier","src":"7275:3:34"},{"kind":"number","nativeSrc":"7280:2:34","nodeType":"YulLiteral","src":"7280:2:34","type":"","value":"36"}],"functionName":{"name":"add","nativeSrc":"7271:3:34","nodeType":"YulIdentifier","src":"7271:3:34"},"nativeSrc":"7271:12:34","nodeType":"YulFunctionCall","src":"7271:12:34"},"variableNames":[{"name":"end","nativeSrc":"7264:3:34","nodeType":"YulIdentifier","src":"7264:3:34"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_uint32__to_t_bytes32_t_uint32__nonPadded_inplace_fromStack_reversed","nativeSrc":"7007:282:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"7120:3:34","nodeType":"YulTypedName","src":"7120:3:34","type":""},{"name":"value1","nativeSrc":"7125:6:34","nodeType":"YulTypedName","src":"7125:6:34","type":""},{"name":"value0","nativeSrc":"7133:6:34","nodeType":"YulTypedName","src":"7133:6:34","type":""}],"returnVariables":[{"name":"end","nativeSrc":"7144:3:34","nodeType":"YulTypedName","src":"7144:3:34","type":""}],"src":"7007:282:34"},{"body":{"nativeSrc":"7326:95:34","nodeType":"YulBlock","src":"7326:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7343:1:34","nodeType":"YulLiteral","src":"7343:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"7350:3:34","nodeType":"YulLiteral","src":"7350:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"7355:10:34","nodeType":"YulLiteral","src":"7355:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"7346:3:34","nodeType":"YulIdentifier","src":"7346:3:34"},"nativeSrc":"7346:20:34","nodeType":"YulFunctionCall","src":"7346:20:34"}],"functionName":{"name":"mstore","nativeSrc":"7336:6:34","nodeType":"YulIdentifier","src":"7336:6:34"},"nativeSrc":"7336:31:34","nodeType":"YulFunctionCall","src":"7336:31:34"},"nativeSrc":"7336:31:34","nodeType":"YulExpressionStatement","src":"7336:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7383:1:34","nodeType":"YulLiteral","src":"7383:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"7386:4:34","nodeType":"YulLiteral","src":"7386:4:34","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7376:6:34","nodeType":"YulIdentifier","src":"7376:6:34"},"nativeSrc":"7376:15:34","nodeType":"YulFunctionCall","src":"7376:15:34"},"nativeSrc":"7376:15:34","nodeType":"YulExpressionStatement","src":"7376:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7407:1:34","nodeType":"YulLiteral","src":"7407:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"7410:4:34","nodeType":"YulLiteral","src":"7410:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7400:6:34","nodeType":"YulIdentifier","src":"7400:6:34"},"nativeSrc":"7400:15:34","nodeType":"YulFunctionCall","src":"7400:15:34"},"nativeSrc":"7400:15:34","nodeType":"YulExpressionStatement","src":"7400:15:34"}]},"name":"panic_error_0x32","nativeSrc":"7294:127:34","nodeType":"YulFunctionDefinition","src":"7294:127:34"},{"body":{"nativeSrc":"7458:95:34","nodeType":"YulBlock","src":"7458:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7475:1:34","nodeType":"YulLiteral","src":"7475:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"7482:3:34","nodeType":"YulLiteral","src":"7482:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"7487:10:34","nodeType":"YulLiteral","src":"7487:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"7478:3:34","nodeType":"YulIdentifier","src":"7478:3:34"},"nativeSrc":"7478:20:34","nodeType":"YulFunctionCall","src":"7478:20:34"}],"functionName":{"name":"mstore","nativeSrc":"7468:6:34","nodeType":"YulIdentifier","src":"7468:6:34"},"nativeSrc":"7468:31:34","nodeType":"YulFunctionCall","src":"7468:31:34"},"nativeSrc":"7468:31:34","nodeType":"YulExpressionStatement","src":"7468:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7515:1:34","nodeType":"YulLiteral","src":"7515:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"7518:4:34","nodeType":"YulLiteral","src":"7518:4:34","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"7508:6:34","nodeType":"YulIdentifier","src":"7508:6:34"},"nativeSrc":"7508:15:34","nodeType":"YulFunctionCall","src":"7508:15:34"},"nativeSrc":"7508:15:34","nodeType":"YulExpressionStatement","src":"7508:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7539:1:34","nodeType":"YulLiteral","src":"7539:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"7542:4:34","nodeType":"YulLiteral","src":"7542:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7532:6:34","nodeType":"YulIdentifier","src":"7532:6:34"},"nativeSrc":"7532:15:34","nodeType":"YulFunctionCall","src":"7532:15:34"},"nativeSrc":"7532:15:34","nodeType":"YulExpressionStatement","src":"7532:15:34"}]},"name":"panic_error_0x11","nativeSrc":"7426:127:34","nodeType":"YulFunctionDefinition","src":"7426:127:34"},{"body":{"nativeSrc":"7606:77:34","nodeType":"YulBlock","src":"7606:77:34","statements":[{"nativeSrc":"7616:16:34","nodeType":"YulAssignment","src":"7616:16:34","value":{"arguments":[{"name":"x","nativeSrc":"7627:1:34","nodeType":"YulIdentifier","src":"7627:1:34"},{"name":"y","nativeSrc":"7630:1:34","nodeType":"YulIdentifier","src":"7630:1:34"}],"functionName":{"name":"add","nativeSrc":"7623:3:34","nodeType":"YulIdentifier","src":"7623:3:34"},"nativeSrc":"7623:9:34","nodeType":"YulFunctionCall","src":"7623:9:34"},"variableNames":[{"name":"sum","nativeSrc":"7616:3:34","nodeType":"YulIdentifier","src":"7616:3:34"}]},{"body":{"nativeSrc":"7655:22:34","nodeType":"YulBlock","src":"7655:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7657:16:34","nodeType":"YulIdentifier","src":"7657:16:34"},"nativeSrc":"7657:18:34","nodeType":"YulFunctionCall","src":"7657:18:34"},"nativeSrc":"7657:18:34","nodeType":"YulExpressionStatement","src":"7657:18:34"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"7647:1:34","nodeType":"YulIdentifier","src":"7647:1:34"},{"name":"sum","nativeSrc":"7650:3:34","nodeType":"YulIdentifier","src":"7650:3:34"}],"functionName":{"name":"gt","nativeSrc":"7644:2:34","nodeType":"YulIdentifier","src":"7644:2:34"},"nativeSrc":"7644:10:34","nodeType":"YulFunctionCall","src":"7644:10:34"},"nativeSrc":"7641:36:34","nodeType":"YulIf","src":"7641:36:34"}]},"name":"checked_add_t_uint256","nativeSrc":"7558:125:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7589:1:34","nodeType":"YulTypedName","src":"7589:1:34","type":""},{"name":"y","nativeSrc":"7592:1:34","nodeType":"YulTypedName","src":"7592:1:34","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"7598:3:34","nodeType":"YulTypedName","src":"7598:3:34","type":""}],"src":"7558:125:34"},{"body":{"nativeSrc":"7743:325:34","nodeType":"YulBlock","src":"7743:325:34","statements":[{"nativeSrc":"7753:22:34","nodeType":"YulAssignment","src":"7753:22:34","value":{"arguments":[{"kind":"number","nativeSrc":"7767:1:34","nodeType":"YulLiteral","src":"7767:1:34","type":"","value":"1"},{"name":"data","nativeSrc":"7770:4:34","nodeType":"YulIdentifier","src":"7770:4:34"}],"functionName":{"name":"shr","nativeSrc":"7763:3:34","nodeType":"YulIdentifier","src":"7763:3:34"},"nativeSrc":"7763:12:34","nodeType":"YulFunctionCall","src":"7763:12:34"},"variableNames":[{"name":"length","nativeSrc":"7753:6:34","nodeType":"YulIdentifier","src":"7753:6:34"}]},{"nativeSrc":"7784:38:34","nodeType":"YulVariableDeclaration","src":"7784:38:34","value":{"arguments":[{"name":"data","nativeSrc":"7814:4:34","nodeType":"YulIdentifier","src":"7814:4:34"},{"kind":"number","nativeSrc":"7820:1:34","nodeType":"YulLiteral","src":"7820:1:34","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"7810:3:34","nodeType":"YulIdentifier","src":"7810:3:34"},"nativeSrc":"7810:12:34","nodeType":"YulFunctionCall","src":"7810:12:34"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"7788:18:34","nodeType":"YulTypedName","src":"7788:18:34","type":""}]},{"body":{"nativeSrc":"7861:31:34","nodeType":"YulBlock","src":"7861:31:34","statements":[{"nativeSrc":"7863:27:34","nodeType":"YulAssignment","src":"7863:27:34","value":{"arguments":[{"name":"length","nativeSrc":"7877:6:34","nodeType":"YulIdentifier","src":"7877:6:34"},{"kind":"number","nativeSrc":"7885:4:34","nodeType":"YulLiteral","src":"7885:4:34","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"7873:3:34","nodeType":"YulIdentifier","src":"7873:3:34"},"nativeSrc":"7873:17:34","nodeType":"YulFunctionCall","src":"7873:17:34"},"variableNames":[{"name":"length","nativeSrc":"7863:6:34","nodeType":"YulIdentifier","src":"7863:6:34"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"7841:18:34","nodeType":"YulIdentifier","src":"7841:18:34"}],"functionName":{"name":"iszero","nativeSrc":"7834:6:34","nodeType":"YulIdentifier","src":"7834:6:34"},"nativeSrc":"7834:26:34","nodeType":"YulFunctionCall","src":"7834:26:34"},"nativeSrc":"7831:61:34","nodeType":"YulIf","src":"7831:61:34"},{"body":{"nativeSrc":"7951:111:34","nodeType":"YulBlock","src":"7951:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7972:1:34","nodeType":"YulLiteral","src":"7972:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"7979:3:34","nodeType":"YulLiteral","src":"7979:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"7984:10:34","nodeType":"YulLiteral","src":"7984:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"7975:3:34","nodeType":"YulIdentifier","src":"7975:3:34"},"nativeSrc":"7975:20:34","nodeType":"YulFunctionCall","src":"7975:20:34"}],"functionName":{"name":"mstore","nativeSrc":"7965:6:34","nodeType":"YulIdentifier","src":"7965:6:34"},"nativeSrc":"7965:31:34","nodeType":"YulFunctionCall","src":"7965:31:34"},"nativeSrc":"7965:31:34","nodeType":"YulExpressionStatement","src":"7965:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8016:1:34","nodeType":"YulLiteral","src":"8016:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"8019:4:34","nodeType":"YulLiteral","src":"8019:4:34","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"8009:6:34","nodeType":"YulIdentifier","src":"8009:6:34"},"nativeSrc":"8009:15:34","nodeType":"YulFunctionCall","src":"8009:15:34"},"nativeSrc":"8009:15:34","nodeType":"YulExpressionStatement","src":"8009:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8044:1:34","nodeType":"YulLiteral","src":"8044:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"8047:4:34","nodeType":"YulLiteral","src":"8047:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8037:6:34","nodeType":"YulIdentifier","src":"8037:6:34"},"nativeSrc":"8037:15:34","nodeType":"YulFunctionCall","src":"8037:15:34"},"nativeSrc":"8037:15:34","nodeType":"YulExpressionStatement","src":"8037:15:34"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"7907:18:34","nodeType":"YulIdentifier","src":"7907:18:34"},{"arguments":[{"name":"length","nativeSrc":"7930:6:34","nodeType":"YulIdentifier","src":"7930:6:34"},{"kind":"number","nativeSrc":"7938:2:34","nodeType":"YulLiteral","src":"7938:2:34","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"7927:2:34","nodeType":"YulIdentifier","src":"7927:2:34"},"nativeSrc":"7927:14:34","nodeType":"YulFunctionCall","src":"7927:14:34"}],"functionName":{"name":"eq","nativeSrc":"7904:2:34","nodeType":"YulIdentifier","src":"7904:2:34"},"nativeSrc":"7904:38:34","nodeType":"YulFunctionCall","src":"7904:38:34"},"nativeSrc":"7901:161:34","nodeType":"YulIf","src":"7901:161:34"}]},"name":"extract_byte_array_length","nativeSrc":"7688:380:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"7723:4:34","nodeType":"YulTypedName","src":"7723:4:34","type":""}],"returnVariables":[{"name":"length","nativeSrc":"7732:6:34","nodeType":"YulTypedName","src":"7732:6:34","type":""}],"src":"7688:380:34"},{"body":{"nativeSrc":"8122:79:34","nodeType":"YulBlock","src":"8122:79:34","statements":[{"nativeSrc":"8132:17:34","nodeType":"YulAssignment","src":"8132:17:34","value":{"arguments":[{"name":"x","nativeSrc":"8144:1:34","nodeType":"YulIdentifier","src":"8144:1:34"},{"name":"y","nativeSrc":"8147:1:34","nodeType":"YulIdentifier","src":"8147:1:34"}],"functionName":{"name":"sub","nativeSrc":"8140:3:34","nodeType":"YulIdentifier","src":"8140:3:34"},"nativeSrc":"8140:9:34","nodeType":"YulFunctionCall","src":"8140:9:34"},"variableNames":[{"name":"diff","nativeSrc":"8132:4:34","nodeType":"YulIdentifier","src":"8132:4:34"}]},{"body":{"nativeSrc":"8173:22:34","nodeType":"YulBlock","src":"8173:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8175:16:34","nodeType":"YulIdentifier","src":"8175:16:34"},"nativeSrc":"8175:18:34","nodeType":"YulFunctionCall","src":"8175:18:34"},"nativeSrc":"8175:18:34","nodeType":"YulExpressionStatement","src":"8175:18:34"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8164:4:34","nodeType":"YulIdentifier","src":"8164:4:34"},{"name":"x","nativeSrc":"8170:1:34","nodeType":"YulIdentifier","src":"8170:1:34"}],"functionName":{"name":"gt","nativeSrc":"8161:2:34","nodeType":"YulIdentifier","src":"8161:2:34"},"nativeSrc":"8161:11:34","nodeType":"YulFunctionCall","src":"8161:11:34"},"nativeSrc":"8158:37:34","nodeType":"YulIf","src":"8158:37:34"}]},"name":"checked_sub_t_uint256","nativeSrc":"8073:128:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8104:1:34","nodeType":"YulTypedName","src":"8104:1:34","type":""},{"name":"y","nativeSrc":"8107:1:34","nodeType":"YulTypedName","src":"8107:1:34","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8113:4:34","nodeType":"YulTypedName","src":"8113:4:34","type":""}],"src":"8073:128:34"},{"body":{"nativeSrc":"8331:157:34","nodeType":"YulBlock","src":"8331:157:34","statements":[{"nativeSrc":"8341:26:34","nodeType":"YulAssignment","src":"8341:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"8353:9:34","nodeType":"YulIdentifier","src":"8353:9:34"},{"kind":"number","nativeSrc":"8364:2:34","nodeType":"YulLiteral","src":"8364:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8349:3:34","nodeType":"YulIdentifier","src":"8349:3:34"},"nativeSrc":"8349:18:34","nodeType":"YulFunctionCall","src":"8349:18:34"},"variableNames":[{"name":"tail","nativeSrc":"8341:4:34","nodeType":"YulIdentifier","src":"8341:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8383:9:34","nodeType":"YulIdentifier","src":"8383:9:34"},{"arguments":[{"name":"value0","nativeSrc":"8398:6:34","nodeType":"YulIdentifier","src":"8398:6:34"},{"kind":"number","nativeSrc":"8406:6:34","nodeType":"YulLiteral","src":"8406:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"8394:3:34","nodeType":"YulIdentifier","src":"8394:3:34"},"nativeSrc":"8394:19:34","nodeType":"YulFunctionCall","src":"8394:19:34"}],"functionName":{"name":"mstore","nativeSrc":"8376:6:34","nodeType":"YulIdentifier","src":"8376:6:34"},"nativeSrc":"8376:38:34","nodeType":"YulFunctionCall","src":"8376:38:34"},"nativeSrc":"8376:38:34","nodeType":"YulExpressionStatement","src":"8376:38:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8434:9:34","nodeType":"YulIdentifier","src":"8434:9:34"},{"kind":"number","nativeSrc":"8445:2:34","nodeType":"YulLiteral","src":"8445:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8430:3:34","nodeType":"YulIdentifier","src":"8430:3:34"},"nativeSrc":"8430:18:34","nodeType":"YulFunctionCall","src":"8430:18:34"},{"arguments":[{"name":"value1","nativeSrc":"8454:6:34","nodeType":"YulIdentifier","src":"8454:6:34"},{"kind":"number","nativeSrc":"8462:18:34","nodeType":"YulLiteral","src":"8462:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8450:3:34","nodeType":"YulIdentifier","src":"8450:3:34"},"nativeSrc":"8450:31:34","nodeType":"YulFunctionCall","src":"8450:31:34"}],"functionName":{"name":"mstore","nativeSrc":"8423:6:34","nodeType":"YulIdentifier","src":"8423:6:34"},"nativeSrc":"8423:59:34","nodeType":"YulFunctionCall","src":"8423:59:34"},"nativeSrc":"8423:59:34","nodeType":"YulExpressionStatement","src":"8423:59:34"}]},"name":"abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed","nativeSrc":"8206:282:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8292:9:34","nodeType":"YulTypedName","src":"8292:9:34","type":""},{"name":"value1","nativeSrc":"8303:6:34","nodeType":"YulTypedName","src":"8303:6:34","type":""},{"name":"value0","nativeSrc":"8311:6:34","nodeType":"YulTypedName","src":"8311:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8322:4:34","nodeType":"YulTypedName","src":"8322:4:34","type":""}],"src":"8206:282:34"},{"body":{"nativeSrc":"8545:116:34","nodeType":"YulBlock","src":"8545:116:34","statements":[{"nativeSrc":"8555:20:34","nodeType":"YulAssignment","src":"8555:20:34","value":{"arguments":[{"name":"x","nativeSrc":"8570:1:34","nodeType":"YulIdentifier","src":"8570:1:34"},{"name":"y","nativeSrc":"8573:1:34","nodeType":"YulIdentifier","src":"8573:1:34"}],"functionName":{"name":"mul","nativeSrc":"8566:3:34","nodeType":"YulIdentifier","src":"8566:3:34"},"nativeSrc":"8566:9:34","nodeType":"YulFunctionCall","src":"8566:9:34"},"variableNames":[{"name":"product","nativeSrc":"8555:7:34","nodeType":"YulIdentifier","src":"8555:7:34"}]},{"body":{"nativeSrc":"8633:22:34","nodeType":"YulBlock","src":"8633:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8635:16:34","nodeType":"YulIdentifier","src":"8635:16:34"},"nativeSrc":"8635:18:34","nodeType":"YulFunctionCall","src":"8635:18:34"},"nativeSrc":"8635:18:34","nodeType":"YulExpressionStatement","src":"8635:18:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"8604:1:34","nodeType":"YulIdentifier","src":"8604:1:34"}],"functionName":{"name":"iszero","nativeSrc":"8597:6:34","nodeType":"YulIdentifier","src":"8597:6:34"},"nativeSrc":"8597:9:34","nodeType":"YulFunctionCall","src":"8597:9:34"},{"arguments":[{"name":"y","nativeSrc":"8611:1:34","nodeType":"YulIdentifier","src":"8611:1:34"},{"arguments":[{"name":"product","nativeSrc":"8618:7:34","nodeType":"YulIdentifier","src":"8618:7:34"},{"name":"x","nativeSrc":"8627:1:34","nodeType":"YulIdentifier","src":"8627:1:34"}],"functionName":{"name":"div","nativeSrc":"8614:3:34","nodeType":"YulIdentifier","src":"8614:3:34"},"nativeSrc":"8614:15:34","nodeType":"YulFunctionCall","src":"8614:15:34"}],"functionName":{"name":"eq","nativeSrc":"8608:2:34","nodeType":"YulIdentifier","src":"8608:2:34"},"nativeSrc":"8608:22:34","nodeType":"YulFunctionCall","src":"8608:22:34"}],"functionName":{"name":"or","nativeSrc":"8594:2:34","nodeType":"YulIdentifier","src":"8594:2:34"},"nativeSrc":"8594:37:34","nodeType":"YulFunctionCall","src":"8594:37:34"}],"functionName":{"name":"iszero","nativeSrc":"8587:6:34","nodeType":"YulIdentifier","src":"8587:6:34"},"nativeSrc":"8587:45:34","nodeType":"YulFunctionCall","src":"8587:45:34"},"nativeSrc":"8584:71:34","nodeType":"YulIf","src":"8584:71:34"}]},"name":"checked_mul_t_uint256","nativeSrc":"8493:168:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8524:1:34","nodeType":"YulTypedName","src":"8524:1:34","type":""},{"name":"y","nativeSrc":"8527:1:34","nodeType":"YulTypedName","src":"8527:1:34","type":""}],"returnVariables":[{"name":"product","nativeSrc":"8533:7:34","nodeType":"YulTypedName","src":"8533:7:34","type":""}],"src":"8493:168:34"},{"body":{"nativeSrc":"8698:95:34","nodeType":"YulBlock","src":"8698:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8715:1:34","nodeType":"YulLiteral","src":"8715:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"8722:3:34","nodeType":"YulLiteral","src":"8722:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"8727:10:34","nodeType":"YulLiteral","src":"8727:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"8718:3:34","nodeType":"YulIdentifier","src":"8718:3:34"},"nativeSrc":"8718:20:34","nodeType":"YulFunctionCall","src":"8718:20:34"}],"functionName":{"name":"mstore","nativeSrc":"8708:6:34","nodeType":"YulIdentifier","src":"8708:6:34"},"nativeSrc":"8708:31:34","nodeType":"YulFunctionCall","src":"8708:31:34"},"nativeSrc":"8708:31:34","nodeType":"YulExpressionStatement","src":"8708:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8755:1:34","nodeType":"YulLiteral","src":"8755:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"8758:4:34","nodeType":"YulLiteral","src":"8758:4:34","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"8748:6:34","nodeType":"YulIdentifier","src":"8748:6:34"},"nativeSrc":"8748:15:34","nodeType":"YulFunctionCall","src":"8748:15:34"},"nativeSrc":"8748:15:34","nodeType":"YulExpressionStatement","src":"8748:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8779:1:34","nodeType":"YulLiteral","src":"8779:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"8782:4:34","nodeType":"YulLiteral","src":"8782:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8772:6:34","nodeType":"YulIdentifier","src":"8772:6:34"},"nativeSrc":"8772:15:34","nodeType":"YulFunctionCall","src":"8772:15:34"},"nativeSrc":"8772:15:34","nodeType":"YulExpressionStatement","src":"8772:15:34"}]},"name":"panic_error_0x12","nativeSrc":"8666:127:34","nodeType":"YulFunctionDefinition","src":"8666:127:34"},{"body":{"nativeSrc":"8844:74:34","nodeType":"YulBlock","src":"8844:74:34","statements":[{"body":{"nativeSrc":"8867:22:34","nodeType":"YulBlock","src":"8867:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"8869:16:34","nodeType":"YulIdentifier","src":"8869:16:34"},"nativeSrc":"8869:18:34","nodeType":"YulFunctionCall","src":"8869:18:34"},"nativeSrc":"8869:18:34","nodeType":"YulExpressionStatement","src":"8869:18:34"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"8864:1:34","nodeType":"YulIdentifier","src":"8864:1:34"}],"functionName":{"name":"iszero","nativeSrc":"8857:6:34","nodeType":"YulIdentifier","src":"8857:6:34"},"nativeSrc":"8857:9:34","nodeType":"YulFunctionCall","src":"8857:9:34"},"nativeSrc":"8854:35:34","nodeType":"YulIf","src":"8854:35:34"},{"nativeSrc":"8898:14:34","nodeType":"YulAssignment","src":"8898:14:34","value":{"arguments":[{"name":"x","nativeSrc":"8907:1:34","nodeType":"YulIdentifier","src":"8907:1:34"},{"name":"y","nativeSrc":"8910:1:34","nodeType":"YulIdentifier","src":"8910:1:34"}],"functionName":{"name":"div","nativeSrc":"8903:3:34","nodeType":"YulIdentifier","src":"8903:3:34"},"nativeSrc":"8903:9:34","nodeType":"YulFunctionCall","src":"8903:9:34"},"variableNames":[{"name":"r","nativeSrc":"8898:1:34","nodeType":"YulIdentifier","src":"8898:1:34"}]}]},"name":"checked_div_t_uint256","nativeSrc":"8798:120:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8829:1:34","nodeType":"YulTypedName","src":"8829:1:34","type":""},{"name":"y","nativeSrc":"8832:1:34","nodeType":"YulTypedName","src":"8832:1:34","type":""}],"returnVariables":[{"name":"r","nativeSrc":"8838:1:34","nodeType":"YulTypedName","src":"8838:1:34","type":""}],"src":"8798:120:34"},{"body":{"nativeSrc":"8961:74:34","nodeType":"YulBlock","src":"8961:74:34","statements":[{"body":{"nativeSrc":"8984:22:34","nodeType":"YulBlock","src":"8984:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"8986:16:34","nodeType":"YulIdentifier","src":"8986:16:34"},"nativeSrc":"8986:18:34","nodeType":"YulFunctionCall","src":"8986:18:34"},"nativeSrc":"8986:18:34","nodeType":"YulExpressionStatement","src":"8986:18:34"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"8981:1:34","nodeType":"YulIdentifier","src":"8981:1:34"}],"functionName":{"name":"iszero","nativeSrc":"8974:6:34","nodeType":"YulIdentifier","src":"8974:6:34"},"nativeSrc":"8974:9:34","nodeType":"YulFunctionCall","src":"8974:9:34"},"nativeSrc":"8971:35:34","nodeType":"YulIf","src":"8971:35:34"},{"nativeSrc":"9015:14:34","nodeType":"YulAssignment","src":"9015:14:34","value":{"arguments":[{"name":"x","nativeSrc":"9024:1:34","nodeType":"YulIdentifier","src":"9024:1:34"},{"name":"y","nativeSrc":"9027:1:34","nodeType":"YulIdentifier","src":"9027:1:34"}],"functionName":{"name":"mod","nativeSrc":"9020:3:34","nodeType":"YulIdentifier","src":"9020:3:34"},"nativeSrc":"9020:9:34","nodeType":"YulFunctionCall","src":"9020:9:34"},"variableNames":[{"name":"r","nativeSrc":"9015:1:34","nodeType":"YulIdentifier","src":"9015:1:34"}]}]},"name":"mod_t_uint256","nativeSrc":"8923:112:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8946:1:34","nodeType":"YulTypedName","src":"8946:1:34","type":""},{"name":"y","nativeSrc":"8949:1:34","nodeType":"YulTypedName","src":"8949:1:34","type":""}],"returnVariables":[{"name":"r","nativeSrc":"8955:1:34","nodeType":"YulTypedName","src":"8955:1:34","type":""}],"src":"8923:112:34"},{"body":{"nativeSrc":"9214:166:34","nodeType":"YulBlock","src":"9214:166:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9231:9:34","nodeType":"YulIdentifier","src":"9231:9:34"},{"kind":"number","nativeSrc":"9242:2:34","nodeType":"YulLiteral","src":"9242:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"9224:6:34","nodeType":"YulIdentifier","src":"9224:6:34"},"nativeSrc":"9224:21:34","nodeType":"YulFunctionCall","src":"9224:21:34"},"nativeSrc":"9224:21:34","nodeType":"YulExpressionStatement","src":"9224:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9265:9:34","nodeType":"YulIdentifier","src":"9265:9:34"},{"kind":"number","nativeSrc":"9276:2:34","nodeType":"YulLiteral","src":"9276:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9261:3:34","nodeType":"YulIdentifier","src":"9261:3:34"},"nativeSrc":"9261:18:34","nodeType":"YulFunctionCall","src":"9261:18:34"},{"kind":"number","nativeSrc":"9281:2:34","nodeType":"YulLiteral","src":"9281:2:34","type":"","value":"16"}],"functionName":{"name":"mstore","nativeSrc":"9254:6:34","nodeType":"YulIdentifier","src":"9254:6:34"},"nativeSrc":"9254:30:34","nodeType":"YulFunctionCall","src":"9254:30:34"},"nativeSrc":"9254:30:34","nodeType":"YulExpressionStatement","src":"9254:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9304:9:34","nodeType":"YulIdentifier","src":"9304:9:34"},{"kind":"number","nativeSrc":"9315:2:34","nodeType":"YulLiteral","src":"9315:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9300:3:34","nodeType":"YulIdentifier","src":"9300:3:34"},"nativeSrc":"9300:18:34","nodeType":"YulFunctionCall","src":"9300:18:34"},{"hexValue":"696e76616c6964207478207072696365","kind":"string","nativeSrc":"9320:18:34","nodeType":"YulLiteral","src":"9320:18:34","type":"","value":"invalid tx price"}],"functionName":{"name":"mstore","nativeSrc":"9293:6:34","nodeType":"YulIdentifier","src":"9293:6:34"},"nativeSrc":"9293:46:34","nodeType":"YulFunctionCall","src":"9293:46:34"},"nativeSrc":"9293:46:34","nodeType":"YulExpressionStatement","src":"9293:46:34"},{"nativeSrc":"9348:26:34","nodeType":"YulAssignment","src":"9348:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"9360:9:34","nodeType":"YulIdentifier","src":"9360:9:34"},{"kind":"number","nativeSrc":"9371:2:34","nodeType":"YulLiteral","src":"9371:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9356:3:34","nodeType":"YulIdentifier","src":"9356:3:34"},"nativeSrc":"9356:18:34","nodeType":"YulFunctionCall","src":"9356:18:34"},"variableNames":[{"name":"tail","nativeSrc":"9348:4:34","nodeType":"YulIdentifier","src":"9348:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_35e2a7c0e5320f1f9d561dcf29daa653278f4a6b116055ae99c0f73982ee0a11__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9040:340:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9191:9:34","nodeType":"YulTypedName","src":"9191:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9205:4:34","nodeType":"YulTypedName","src":"9205:4:34","type":""}],"src":"9040:340:34"},{"body":{"nativeSrc":"9559:162:34","nodeType":"YulBlock","src":"9559:162:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9576:9:34","nodeType":"YulIdentifier","src":"9576:9:34"},{"kind":"number","nativeSrc":"9587:2:34","nodeType":"YulLiteral","src":"9587:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"9569:6:34","nodeType":"YulIdentifier","src":"9569:6:34"},"nativeSrc":"9569:21:34","nodeType":"YulFunctionCall","src":"9569:21:34"},"nativeSrc":"9569:21:34","nodeType":"YulExpressionStatement","src":"9569:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9610:9:34","nodeType":"YulIdentifier","src":"9610:9:34"},{"kind":"number","nativeSrc":"9621:2:34","nodeType":"YulLiteral","src":"9621:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9606:3:34","nodeType":"YulIdentifier","src":"9606:3:34"},"nativeSrc":"9606:18:34","nodeType":"YulFunctionCall","src":"9606:18:34"},{"kind":"number","nativeSrc":"9626:2:34","nodeType":"YulLiteral","src":"9626:2:34","type":"","value":"12"}],"functionName":{"name":"mstore","nativeSrc":"9599:6:34","nodeType":"YulIdentifier","src":"9599:6:34"},"nativeSrc":"9599:30:34","nodeType":"YulFunctionCall","src":"9599:30:34"},"nativeSrc":"9599:30:34","nodeType":"YulExpressionStatement","src":"9599:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9649:9:34","nodeType":"YulIdentifier","src":"9649:9:34"},{"kind":"number","nativeSrc":"9660:2:34","nodeType":"YulLiteral","src":"9660:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9645:3:34","nodeType":"YulIdentifier","src":"9645:3:34"},"nativeSrc":"9645:18:34","nodeType":"YulFunctionCall","src":"9645:18:34"},{"hexValue":"756e6166666f726461626c65","kind":"string","nativeSrc":"9665:14:34","nodeType":"YulLiteral","src":"9665:14:34","type":"","value":"unaffordable"}],"functionName":{"name":"mstore","nativeSrc":"9638:6:34","nodeType":"YulIdentifier","src":"9638:6:34"},"nativeSrc":"9638:42:34","nodeType":"YulFunctionCall","src":"9638:42:34"},"nativeSrc":"9638:42:34","nodeType":"YulExpressionStatement","src":"9638:42:34"},{"nativeSrc":"9689:26:34","nodeType":"YulAssignment","src":"9689:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"9701:9:34","nodeType":"YulIdentifier","src":"9701:9:34"},{"kind":"number","nativeSrc":"9712:2:34","nodeType":"YulLiteral","src":"9712:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9697:3:34","nodeType":"YulIdentifier","src":"9697:3:34"},"nativeSrc":"9697:18:34","nodeType":"YulFunctionCall","src":"9697:18:34"},"variableNames":[{"name":"tail","nativeSrc":"9689:4:34","nodeType":"YulIdentifier","src":"9689:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_660324624872cd0b922aa91b3e00247627a75111d0e93436b452b9f5c54a277e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9385:336:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9536:9:34","nodeType":"YulTypedName","src":"9536:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9550:4:34","nodeType":"YulTypedName","src":"9550:4:34","type":""}],"src":"9385:336:34"},{"body":{"nativeSrc":"9758:95:34","nodeType":"YulBlock","src":"9758:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9775:1:34","nodeType":"YulLiteral","src":"9775:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"9782:3:34","nodeType":"YulLiteral","src":"9782:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"9787:10:34","nodeType":"YulLiteral","src":"9787:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"9778:3:34","nodeType":"YulIdentifier","src":"9778:3:34"},"nativeSrc":"9778:20:34","nodeType":"YulFunctionCall","src":"9778:20:34"}],"functionName":{"name":"mstore","nativeSrc":"9768:6:34","nodeType":"YulIdentifier","src":"9768:6:34"},"nativeSrc":"9768:31:34","nodeType":"YulFunctionCall","src":"9768:31:34"},"nativeSrc":"9768:31:34","nodeType":"YulExpressionStatement","src":"9768:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9815:1:34","nodeType":"YulLiteral","src":"9815:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"9818:4:34","nodeType":"YulLiteral","src":"9818:4:34","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"9808:6:34","nodeType":"YulIdentifier","src":"9808:6:34"},"nativeSrc":"9808:15:34","nodeType":"YulFunctionCall","src":"9808:15:34"},"nativeSrc":"9808:15:34","nodeType":"YulExpressionStatement","src":"9808:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9839:1:34","nodeType":"YulLiteral","src":"9839:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"9842:4:34","nodeType":"YulLiteral","src":"9842:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9832:6:34","nodeType":"YulIdentifier","src":"9832:6:34"},"nativeSrc":"9832:15:34","nodeType":"YulFunctionCall","src":"9832:15:34"},"nativeSrc":"9832:15:34","nodeType":"YulExpressionStatement","src":"9832:15:34"}]},"name":"panic_error_0x41","nativeSrc":"9726:127:34","nodeType":"YulFunctionDefinition","src":"9726:127:34"},{"body":{"nativeSrc":"9914:65:34","nodeType":"YulBlock","src":"9914:65:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9931:1:34","nodeType":"YulLiteral","src":"9931:1:34","type":"","value":"0"},{"name":"ptr","nativeSrc":"9934:3:34","nodeType":"YulIdentifier","src":"9934:3:34"}],"functionName":{"name":"mstore","nativeSrc":"9924:6:34","nodeType":"YulIdentifier","src":"9924:6:34"},"nativeSrc":"9924:14:34","nodeType":"YulFunctionCall","src":"9924:14:34"},"nativeSrc":"9924:14:34","nodeType":"YulExpressionStatement","src":"9924:14:34"},{"nativeSrc":"9947:26:34","nodeType":"YulAssignment","src":"9947:26:34","value":{"arguments":[{"kind":"number","nativeSrc":"9965:1:34","nodeType":"YulLiteral","src":"9965:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"9968:4:34","nodeType":"YulLiteral","src":"9968:4:34","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"9955:9:34","nodeType":"YulIdentifier","src":"9955:9:34"},"nativeSrc":"9955:18:34","nodeType":"YulFunctionCall","src":"9955:18:34"},"variableNames":[{"name":"data","nativeSrc":"9947:4:34","nodeType":"YulIdentifier","src":"9947:4:34"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"9858:121:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"9897:3:34","nodeType":"YulTypedName","src":"9897:3:34","type":""}],"returnVariables":[{"name":"data","nativeSrc":"9905:4:34","nodeType":"YulTypedName","src":"9905:4:34","type":""}],"src":"9858:121:34"},{"body":{"nativeSrc":"10065:437:34","nodeType":"YulBlock","src":"10065:437:34","statements":[{"body":{"nativeSrc":"10098:398:34","nodeType":"YulBlock","src":"10098:398:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10119:1:34","nodeType":"YulLiteral","src":"10119:1:34","type":"","value":"0"},{"name":"array","nativeSrc":"10122:5:34","nodeType":"YulIdentifier","src":"10122:5:34"}],"functionName":{"name":"mstore","nativeSrc":"10112:6:34","nodeType":"YulIdentifier","src":"10112:6:34"},"nativeSrc":"10112:16:34","nodeType":"YulFunctionCall","src":"10112:16:34"},"nativeSrc":"10112:16:34","nodeType":"YulExpressionStatement","src":"10112:16:34"},{"nativeSrc":"10141:30:34","nodeType":"YulVariableDeclaration","src":"10141:30:34","value":{"arguments":[{"kind":"number","nativeSrc":"10163:1:34","nodeType":"YulLiteral","src":"10163:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"10166:4:34","nodeType":"YulLiteral","src":"10166:4:34","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"10153:9:34","nodeType":"YulIdentifier","src":"10153:9:34"},"nativeSrc":"10153:18:34","nodeType":"YulFunctionCall","src":"10153:18:34"},"variables":[{"name":"data","nativeSrc":"10145:4:34","nodeType":"YulTypedName","src":"10145:4:34","type":""}]},{"nativeSrc":"10184:57:34","nodeType":"YulVariableDeclaration","src":"10184:57:34","value":{"arguments":[{"name":"data","nativeSrc":"10207:4:34","nodeType":"YulIdentifier","src":"10207:4:34"},{"arguments":[{"kind":"number","nativeSrc":"10217:1:34","nodeType":"YulLiteral","src":"10217:1:34","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"10224:10:34","nodeType":"YulIdentifier","src":"10224:10:34"},{"kind":"number","nativeSrc":"10236:2:34","nodeType":"YulLiteral","src":"10236:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"10220:3:34","nodeType":"YulIdentifier","src":"10220:3:34"},"nativeSrc":"10220:19:34","nodeType":"YulFunctionCall","src":"10220:19:34"}],"functionName":{"name":"shr","nativeSrc":"10213:3:34","nodeType":"YulIdentifier","src":"10213:3:34"},"nativeSrc":"10213:27:34","nodeType":"YulFunctionCall","src":"10213:27:34"}],"functionName":{"name":"add","nativeSrc":"10203:3:34","nodeType":"YulIdentifier","src":"10203:3:34"},"nativeSrc":"10203:38:34","nodeType":"YulFunctionCall","src":"10203:38:34"},"variables":[{"name":"deleteStart","nativeSrc":"10188:11:34","nodeType":"YulTypedName","src":"10188:11:34","type":""}]},{"body":{"nativeSrc":"10278:23:34","nodeType":"YulBlock","src":"10278:23:34","statements":[{"nativeSrc":"10280:19:34","nodeType":"YulAssignment","src":"10280:19:34","value":{"name":"data","nativeSrc":"10295:4:34","nodeType":"YulIdentifier","src":"10295:4:34"},"variableNames":[{"name":"deleteStart","nativeSrc":"10280:11:34","nodeType":"YulIdentifier","src":"10280:11:34"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"10260:10:34","nodeType":"YulIdentifier","src":"10260:10:34"},{"kind":"number","nativeSrc":"10272:4:34","nodeType":"YulLiteral","src":"10272:4:34","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"10257:2:34","nodeType":"YulIdentifier","src":"10257:2:34"},"nativeSrc":"10257:20:34","nodeType":"YulFunctionCall","src":"10257:20:34"},"nativeSrc":"10254:47:34","nodeType":"YulIf","src":"10254:47:34"},{"nativeSrc":"10314:41:34","nodeType":"YulVariableDeclaration","src":"10314:41:34","value":{"arguments":[{"name":"data","nativeSrc":"10328:4:34","nodeType":"YulIdentifier","src":"10328:4:34"},{"arguments":[{"kind":"number","nativeSrc":"10338:1:34","nodeType":"YulLiteral","src":"10338:1:34","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"10345:3:34","nodeType":"YulIdentifier","src":"10345:3:34"},{"kind":"number","nativeSrc":"10350:2:34","nodeType":"YulLiteral","src":"10350:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"10341:3:34","nodeType":"YulIdentifier","src":"10341:3:34"},"nativeSrc":"10341:12:34","nodeType":"YulFunctionCall","src":"10341:12:34"}],"functionName":{"name":"shr","nativeSrc":"10334:3:34","nodeType":"YulIdentifier","src":"10334:3:34"},"nativeSrc":"10334:20:34","nodeType":"YulFunctionCall","src":"10334:20:34"}],"functionName":{"name":"add","nativeSrc":"10324:3:34","nodeType":"YulIdentifier","src":"10324:3:34"},"nativeSrc":"10324:31:34","nodeType":"YulFunctionCall","src":"10324:31:34"},"variables":[{"name":"_1","nativeSrc":"10318:2:34","nodeType":"YulTypedName","src":"10318:2:34","type":""}]},{"nativeSrc":"10368:24:34","nodeType":"YulVariableDeclaration","src":"10368:24:34","value":{"name":"deleteStart","nativeSrc":"10381:11:34","nodeType":"YulIdentifier","src":"10381:11:34"},"variables":[{"name":"start","nativeSrc":"10372:5:34","nodeType":"YulTypedName","src":"10372:5:34","type":""}]},{"body":{"nativeSrc":"10466:20:34","nodeType":"YulBlock","src":"10466:20:34","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"10475:5:34","nodeType":"YulIdentifier","src":"10475:5:34"},{"kind":"number","nativeSrc":"10482:1:34","nodeType":"YulLiteral","src":"10482:1:34","type":"","value":"0"}],"functionName":{"name":"sstore","nativeSrc":"10468:6:34","nodeType":"YulIdentifier","src":"10468:6:34"},"nativeSrc":"10468:16:34","nodeType":"YulFunctionCall","src":"10468:16:34"},"nativeSrc":"10468:16:34","nodeType":"YulExpressionStatement","src":"10468:16:34"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"10416:5:34","nodeType":"YulIdentifier","src":"10416:5:34"},{"name":"_1","nativeSrc":"10423:2:34","nodeType":"YulIdentifier","src":"10423:2:34"}],"functionName":{"name":"lt","nativeSrc":"10413:2:34","nodeType":"YulIdentifier","src":"10413:2:34"},"nativeSrc":"10413:13:34","nodeType":"YulFunctionCall","src":"10413:13:34"},"nativeSrc":"10405:81:34","nodeType":"YulForLoop","post":{"nativeSrc":"10427:26:34","nodeType":"YulBlock","src":"10427:26:34","statements":[{"nativeSrc":"10429:22:34","nodeType":"YulAssignment","src":"10429:22:34","value":{"arguments":[{"name":"start","nativeSrc":"10442:5:34","nodeType":"YulIdentifier","src":"10442:5:34"},{"kind":"number","nativeSrc":"10449:1:34","nodeType":"YulLiteral","src":"10449:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"10438:3:34","nodeType":"YulIdentifier","src":"10438:3:34"},"nativeSrc":"10438:13:34","nodeType":"YulFunctionCall","src":"10438:13:34"},"variableNames":[{"name":"start","nativeSrc":"10429:5:34","nodeType":"YulIdentifier","src":"10429:5:34"}]}]},"pre":{"nativeSrc":"10409:3:34","nodeType":"YulBlock","src":"10409:3:34","statements":[]},"src":"10405:81:34"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"10081:3:34","nodeType":"YulIdentifier","src":"10081:3:34"},{"kind":"number","nativeSrc":"10086:2:34","nodeType":"YulLiteral","src":"10086:2:34","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"10078:2:34","nodeType":"YulIdentifier","src":"10078:2:34"},"nativeSrc":"10078:11:34","nodeType":"YulFunctionCall","src":"10078:11:34"},"nativeSrc":"10075:421:34","nodeType":"YulIf","src":"10075:421:34"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"9984:518:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"10037:5:34","nodeType":"YulTypedName","src":"10037:5:34","type":""},{"name":"len","nativeSrc":"10044:3:34","nodeType":"YulTypedName","src":"10044:3:34","type":""},{"name":"startIndex","nativeSrc":"10049:10:34","nodeType":"YulTypedName","src":"10049:10:34","type":""}],"src":"9984:518:34"},{"body":{"nativeSrc":"10592:81:34","nodeType":"YulBlock","src":"10592:81:34","statements":[{"nativeSrc":"10602:65:34","nodeType":"YulAssignment","src":"10602:65:34","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"10617:4:34","nodeType":"YulIdentifier","src":"10617:4:34"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10635:1:34","nodeType":"YulLiteral","src":"10635:1:34","type":"","value":"3"},{"name":"len","nativeSrc":"10638:3:34","nodeType":"YulIdentifier","src":"10638:3:34"}],"functionName":{"name":"shl","nativeSrc":"10631:3:34","nodeType":"YulIdentifier","src":"10631:3:34"},"nativeSrc":"10631:11:34","nodeType":"YulFunctionCall","src":"10631:11:34"},{"arguments":[{"kind":"number","nativeSrc":"10648:1:34","nodeType":"YulLiteral","src":"10648:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"10644:3:34","nodeType":"YulIdentifier","src":"10644:3:34"},"nativeSrc":"10644:6:34","nodeType":"YulFunctionCall","src":"10644:6:34"}],"functionName":{"name":"shr","nativeSrc":"10627:3:34","nodeType":"YulIdentifier","src":"10627:3:34"},"nativeSrc":"10627:24:34","nodeType":"YulFunctionCall","src":"10627:24:34"}],"functionName":{"name":"not","nativeSrc":"10623:3:34","nodeType":"YulIdentifier","src":"10623:3:34"},"nativeSrc":"10623:29:34","nodeType":"YulFunctionCall","src":"10623:29:34"}],"functionName":{"name":"and","nativeSrc":"10613:3:34","nodeType":"YulIdentifier","src":"10613:3:34"},"nativeSrc":"10613:40:34","nodeType":"YulFunctionCall","src":"10613:40:34"},{"arguments":[{"kind":"number","nativeSrc":"10659:1:34","nodeType":"YulLiteral","src":"10659:1:34","type":"","value":"1"},{"name":"len","nativeSrc":"10662:3:34","nodeType":"YulIdentifier","src":"10662:3:34"}],"functionName":{"name":"shl","nativeSrc":"10655:3:34","nodeType":"YulIdentifier","src":"10655:3:34"},"nativeSrc":"10655:11:34","nodeType":"YulFunctionCall","src":"10655:11:34"}],"functionName":{"name":"or","nativeSrc":"10610:2:34","nodeType":"YulIdentifier","src":"10610:2:34"},"nativeSrc":"10610:57:34","nodeType":"YulFunctionCall","src":"10610:57:34"},"variableNames":[{"name":"used","nativeSrc":"10602:4:34","nodeType":"YulIdentifier","src":"10602:4:34"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"10507:166:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"10569:4:34","nodeType":"YulTypedName","src":"10569:4:34","type":""},{"name":"len","nativeSrc":"10575:3:34","nodeType":"YulTypedName","src":"10575:3:34","type":""}],"returnVariables":[{"name":"used","nativeSrc":"10583:4:34","nodeType":"YulTypedName","src":"10583:4:34","type":""}],"src":"10507:166:34"},{"body":{"nativeSrc":"10774:1203:34","nodeType":"YulBlock","src":"10774:1203:34","statements":[{"nativeSrc":"10784:24:34","nodeType":"YulVariableDeclaration","src":"10784:24:34","value":{"arguments":[{"name":"src","nativeSrc":"10804:3:34","nodeType":"YulIdentifier","src":"10804:3:34"}],"functionName":{"name":"mload","nativeSrc":"10798:5:34","nodeType":"YulIdentifier","src":"10798:5:34"},"nativeSrc":"10798:10:34","nodeType":"YulFunctionCall","src":"10798:10:34"},"variables":[{"name":"newLen","nativeSrc":"10788:6:34","nodeType":"YulTypedName","src":"10788:6:34","type":""}]},{"body":{"nativeSrc":"10851:22:34","nodeType":"YulBlock","src":"10851:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"10853:16:34","nodeType":"YulIdentifier","src":"10853:16:34"},"nativeSrc":"10853:18:34","nodeType":"YulFunctionCall","src":"10853:18:34"},"nativeSrc":"10853:18:34","nodeType":"YulExpressionStatement","src":"10853:18:34"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"10823:6:34","nodeType":"YulIdentifier","src":"10823:6:34"},{"kind":"number","nativeSrc":"10831:18:34","nodeType":"YulLiteral","src":"10831:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10820:2:34","nodeType":"YulIdentifier","src":"10820:2:34"},"nativeSrc":"10820:30:34","nodeType":"YulFunctionCall","src":"10820:30:34"},"nativeSrc":"10817:56:34","nodeType":"YulIf","src":"10817:56:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"10926:4:34","nodeType":"YulIdentifier","src":"10926:4:34"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"10964:4:34","nodeType":"YulIdentifier","src":"10964:4:34"}],"functionName":{"name":"sload","nativeSrc":"10958:5:34","nodeType":"YulIdentifier","src":"10958:5:34"},"nativeSrc":"10958:11:34","nodeType":"YulFunctionCall","src":"10958:11:34"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"10932:25:34","nodeType":"YulIdentifier","src":"10932:25:34"},"nativeSrc":"10932:38:34","nodeType":"YulFunctionCall","src":"10932:38:34"},{"name":"newLen","nativeSrc":"10972:6:34","nodeType":"YulIdentifier","src":"10972:6:34"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"10882:43:34","nodeType":"YulIdentifier","src":"10882:43:34"},"nativeSrc":"10882:97:34","nodeType":"YulFunctionCall","src":"10882:97:34"},"nativeSrc":"10882:97:34","nodeType":"YulExpressionStatement","src":"10882:97:34"},{"nativeSrc":"10988:18:34","nodeType":"YulVariableDeclaration","src":"10988:18:34","value":{"kind":"number","nativeSrc":"11005:1:34","nodeType":"YulLiteral","src":"11005:1:34","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"10992:9:34","nodeType":"YulTypedName","src":"10992:9:34","type":""}]},{"nativeSrc":"11015:17:34","nodeType":"YulAssignment","src":"11015:17:34","value":{"kind":"number","nativeSrc":"11028:4:34","nodeType":"YulLiteral","src":"11028:4:34","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"11015:9:34","nodeType":"YulIdentifier","src":"11015:9:34"}]},{"cases":[{"body":{"nativeSrc":"11078:642:34","nodeType":"YulBlock","src":"11078:642:34","statements":[{"nativeSrc":"11092:35:34","nodeType":"YulVariableDeclaration","src":"11092:35:34","value":{"arguments":[{"name":"newLen","nativeSrc":"11111:6:34","nodeType":"YulIdentifier","src":"11111:6:34"},{"arguments":[{"kind":"number","nativeSrc":"11123:2:34","nodeType":"YulLiteral","src":"11123:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"11119:3:34","nodeType":"YulIdentifier","src":"11119:3:34"},"nativeSrc":"11119:7:34","nodeType":"YulFunctionCall","src":"11119:7:34"}],"functionName":{"name":"and","nativeSrc":"11107:3:34","nodeType":"YulIdentifier","src":"11107:3:34"},"nativeSrc":"11107:20:34","nodeType":"YulFunctionCall","src":"11107:20:34"},"variables":[{"name":"loopEnd","nativeSrc":"11096:7:34","nodeType":"YulTypedName","src":"11096:7:34","type":""}]},{"nativeSrc":"11140:49:34","nodeType":"YulVariableDeclaration","src":"11140:49:34","value":{"arguments":[{"name":"slot","nativeSrc":"11184:4:34","nodeType":"YulIdentifier","src":"11184:4:34"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"11154:29:34","nodeType":"YulIdentifier","src":"11154:29:34"},"nativeSrc":"11154:35:34","nodeType":"YulFunctionCall","src":"11154:35:34"},"variables":[{"name":"dstPtr","nativeSrc":"11144:6:34","nodeType":"YulTypedName","src":"11144:6:34","type":""}]},{"nativeSrc":"11202:10:34","nodeType":"YulVariableDeclaration","src":"11202:10:34","value":{"kind":"number","nativeSrc":"11211:1:34","nodeType":"YulLiteral","src":"11211:1:34","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"11206:1:34","nodeType":"YulTypedName","src":"11206:1:34","type":""}]},{"body":{"nativeSrc":"11282:165:34","nodeType":"YulBlock","src":"11282:165:34","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"11307:6:34","nodeType":"YulIdentifier","src":"11307:6:34"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"11325:3:34","nodeType":"YulIdentifier","src":"11325:3:34"},{"name":"srcOffset","nativeSrc":"11330:9:34","nodeType":"YulIdentifier","src":"11330:9:34"}],"functionName":{"name":"add","nativeSrc":"11321:3:34","nodeType":"YulIdentifier","src":"11321:3:34"},"nativeSrc":"11321:19:34","nodeType":"YulFunctionCall","src":"11321:19:34"}],"functionName":{"name":"mload","nativeSrc":"11315:5:34","nodeType":"YulIdentifier","src":"11315:5:34"},"nativeSrc":"11315:26:34","nodeType":"YulFunctionCall","src":"11315:26:34"}],"functionName":{"name":"sstore","nativeSrc":"11300:6:34","nodeType":"YulIdentifier","src":"11300:6:34"},"nativeSrc":"11300:42:34","nodeType":"YulFunctionCall","src":"11300:42:34"},"nativeSrc":"11300:42:34","nodeType":"YulExpressionStatement","src":"11300:42:34"},{"nativeSrc":"11359:24:34","nodeType":"YulAssignment","src":"11359:24:34","value":{"arguments":[{"name":"dstPtr","nativeSrc":"11373:6:34","nodeType":"YulIdentifier","src":"11373:6:34"},{"kind":"number","nativeSrc":"11381:1:34","nodeType":"YulLiteral","src":"11381:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"11369:3:34","nodeType":"YulIdentifier","src":"11369:3:34"},"nativeSrc":"11369:14:34","nodeType":"YulFunctionCall","src":"11369:14:34"},"variableNames":[{"name":"dstPtr","nativeSrc":"11359:6:34","nodeType":"YulIdentifier","src":"11359:6:34"}]},{"nativeSrc":"11400:33:34","nodeType":"YulAssignment","src":"11400:33:34","value":{"arguments":[{"name":"srcOffset","nativeSrc":"11417:9:34","nodeType":"YulIdentifier","src":"11417:9:34"},{"kind":"number","nativeSrc":"11428:4:34","nodeType":"YulLiteral","src":"11428:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11413:3:34","nodeType":"YulIdentifier","src":"11413:3:34"},"nativeSrc":"11413:20:34","nodeType":"YulFunctionCall","src":"11413:20:34"},"variableNames":[{"name":"srcOffset","nativeSrc":"11400:9:34","nodeType":"YulIdentifier","src":"11400:9:34"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"11236:1:34","nodeType":"YulIdentifier","src":"11236:1:34"},{"name":"loopEnd","nativeSrc":"11239:7:34","nodeType":"YulIdentifier","src":"11239:7:34"}],"functionName":{"name":"lt","nativeSrc":"11233:2:34","nodeType":"YulIdentifier","src":"11233:2:34"},"nativeSrc":"11233:14:34","nodeType":"YulFunctionCall","src":"11233:14:34"},"nativeSrc":"11225:222:34","nodeType":"YulForLoop","post":{"nativeSrc":"11248:21:34","nodeType":"YulBlock","src":"11248:21:34","statements":[{"nativeSrc":"11250:17:34","nodeType":"YulAssignment","src":"11250:17:34","value":{"arguments":[{"name":"i","nativeSrc":"11259:1:34","nodeType":"YulIdentifier","src":"11259:1:34"},{"kind":"number","nativeSrc":"11262:4:34","nodeType":"YulLiteral","src":"11262:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11255:3:34","nodeType":"YulIdentifier","src":"11255:3:34"},"nativeSrc":"11255:12:34","nodeType":"YulFunctionCall","src":"11255:12:34"},"variableNames":[{"name":"i","nativeSrc":"11250:1:34","nodeType":"YulIdentifier","src":"11250:1:34"}]}]},"pre":{"nativeSrc":"11229:3:34","nodeType":"YulBlock","src":"11229:3:34","statements":[]},"src":"11225:222:34"},{"body":{"nativeSrc":"11495:166:34","nodeType":"YulBlock","src":"11495:166:34","statements":[{"nativeSrc":"11513:43:34","nodeType":"YulVariableDeclaration","src":"11513:43:34","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"11540:3:34","nodeType":"YulIdentifier","src":"11540:3:34"},{"name":"srcOffset","nativeSrc":"11545:9:34","nodeType":"YulIdentifier","src":"11545:9:34"}],"functionName":{"name":"add","nativeSrc":"11536:3:34","nodeType":"YulIdentifier","src":"11536:3:34"},"nativeSrc":"11536:19:34","nodeType":"YulFunctionCall","src":"11536:19:34"}],"functionName":{"name":"mload","nativeSrc":"11530:5:34","nodeType":"YulIdentifier","src":"11530:5:34"},"nativeSrc":"11530:26:34","nodeType":"YulFunctionCall","src":"11530:26:34"},"variables":[{"name":"lastValue","nativeSrc":"11517:9:34","nodeType":"YulTypedName","src":"11517:9:34","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"11580:6:34","nodeType":"YulIdentifier","src":"11580:6:34"},{"arguments":[{"name":"lastValue","nativeSrc":"11592:9:34","nodeType":"YulIdentifier","src":"11592:9:34"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"11619:1:34","nodeType":"YulLiteral","src":"11619:1:34","type":"","value":"3"},{"name":"newLen","nativeSrc":"11622:6:34","nodeType":"YulIdentifier","src":"11622:6:34"}],"functionName":{"name":"shl","nativeSrc":"11615:3:34","nodeType":"YulIdentifier","src":"11615:3:34"},"nativeSrc":"11615:14:34","nodeType":"YulFunctionCall","src":"11615:14:34"},{"kind":"number","nativeSrc":"11631:3:34","nodeType":"YulLiteral","src":"11631:3:34","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"11611:3:34","nodeType":"YulIdentifier","src":"11611:3:34"},"nativeSrc":"11611:24:34","nodeType":"YulFunctionCall","src":"11611:24:34"},{"arguments":[{"kind":"number","nativeSrc":"11641:1:34","nodeType":"YulLiteral","src":"11641:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"11637:3:34","nodeType":"YulIdentifier","src":"11637:3:34"},"nativeSrc":"11637:6:34","nodeType":"YulFunctionCall","src":"11637:6:34"}],"functionName":{"name":"shr","nativeSrc":"11607:3:34","nodeType":"YulIdentifier","src":"11607:3:34"},"nativeSrc":"11607:37:34","nodeType":"YulFunctionCall","src":"11607:37:34"}],"functionName":{"name":"not","nativeSrc":"11603:3:34","nodeType":"YulIdentifier","src":"11603:3:34"},"nativeSrc":"11603:42:34","nodeType":"YulFunctionCall","src":"11603:42:34"}],"functionName":{"name":"and","nativeSrc":"11588:3:34","nodeType":"YulIdentifier","src":"11588:3:34"},"nativeSrc":"11588:58:34","nodeType":"YulFunctionCall","src":"11588:58:34"}],"functionName":{"name":"sstore","nativeSrc":"11573:6:34","nodeType":"YulIdentifier","src":"11573:6:34"},"nativeSrc":"11573:74:34","nodeType":"YulFunctionCall","src":"11573:74:34"},"nativeSrc":"11573:74:34","nodeType":"YulExpressionStatement","src":"11573:74:34"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"11466:7:34","nodeType":"YulIdentifier","src":"11466:7:34"},{"name":"newLen","nativeSrc":"11475:6:34","nodeType":"YulIdentifier","src":"11475:6:34"}],"functionName":{"name":"lt","nativeSrc":"11463:2:34","nodeType":"YulIdentifier","src":"11463:2:34"},"nativeSrc":"11463:19:34","nodeType":"YulFunctionCall","src":"11463:19:34"},"nativeSrc":"11460:201:34","nodeType":"YulIf","src":"11460:201:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"11681:4:34","nodeType":"YulIdentifier","src":"11681:4:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"11695:1:34","nodeType":"YulLiteral","src":"11695:1:34","type":"","value":"1"},{"name":"newLen","nativeSrc":"11698:6:34","nodeType":"YulIdentifier","src":"11698:6:34"}],"functionName":{"name":"shl","nativeSrc":"11691:3:34","nodeType":"YulIdentifier","src":"11691:3:34"},"nativeSrc":"11691:14:34","nodeType":"YulFunctionCall","src":"11691:14:34"},{"kind":"number","nativeSrc":"11707:1:34","nodeType":"YulLiteral","src":"11707:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"11687:3:34","nodeType":"YulIdentifier","src":"11687:3:34"},"nativeSrc":"11687:22:34","nodeType":"YulFunctionCall","src":"11687:22:34"}],"functionName":{"name":"sstore","nativeSrc":"11674:6:34","nodeType":"YulIdentifier","src":"11674:6:34"},"nativeSrc":"11674:36:34","nodeType":"YulFunctionCall","src":"11674:36:34"},"nativeSrc":"11674:36:34","nodeType":"YulExpressionStatement","src":"11674:36:34"}]},"nativeSrc":"11071:649:34","nodeType":"YulCase","src":"11071:649:34","value":{"kind":"number","nativeSrc":"11076:1:34","nodeType":"YulLiteral","src":"11076:1:34","type":"","value":"1"}},{"body":{"nativeSrc":"11737:234:34","nodeType":"YulBlock","src":"11737:234:34","statements":[{"nativeSrc":"11751:14:34","nodeType":"YulVariableDeclaration","src":"11751:14:34","value":{"kind":"number","nativeSrc":"11764:1:34","nodeType":"YulLiteral","src":"11764:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"11755:5:34","nodeType":"YulTypedName","src":"11755:5:34","type":""}]},{"body":{"nativeSrc":"11800:67:34","nodeType":"YulBlock","src":"11800:67:34","statements":[{"nativeSrc":"11818:35:34","nodeType":"YulAssignment","src":"11818:35:34","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"11837:3:34","nodeType":"YulIdentifier","src":"11837:3:34"},{"name":"srcOffset","nativeSrc":"11842:9:34","nodeType":"YulIdentifier","src":"11842:9:34"}],"functionName":{"name":"add","nativeSrc":"11833:3:34","nodeType":"YulIdentifier","src":"11833:3:34"},"nativeSrc":"11833:19:34","nodeType":"YulFunctionCall","src":"11833:19:34"}],"functionName":{"name":"mload","nativeSrc":"11827:5:34","nodeType":"YulIdentifier","src":"11827:5:34"},"nativeSrc":"11827:26:34","nodeType":"YulFunctionCall","src":"11827:26:34"},"variableNames":[{"name":"value","nativeSrc":"11818:5:34","nodeType":"YulIdentifier","src":"11818:5:34"}]}]},"condition":{"name":"newLen","nativeSrc":"11781:6:34","nodeType":"YulIdentifier","src":"11781:6:34"},"nativeSrc":"11778:89:34","nodeType":"YulIf","src":"11778:89:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"11887:4:34","nodeType":"YulIdentifier","src":"11887:4:34"},{"arguments":[{"name":"value","nativeSrc":"11946:5:34","nodeType":"YulIdentifier","src":"11946:5:34"},{"name":"newLen","nativeSrc":"11953:6:34","nodeType":"YulIdentifier","src":"11953:6:34"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"11893:52:34","nodeType":"YulIdentifier","src":"11893:52:34"},"nativeSrc":"11893:67:34","nodeType":"YulFunctionCall","src":"11893:67:34"}],"functionName":{"name":"sstore","nativeSrc":"11880:6:34","nodeType":"YulIdentifier","src":"11880:6:34"},"nativeSrc":"11880:81:34","nodeType":"YulFunctionCall","src":"11880:81:34"},"nativeSrc":"11880:81:34","nodeType":"YulExpressionStatement","src":"11880:81:34"}]},"nativeSrc":"11729:242:34","nodeType":"YulCase","src":"11729:242:34","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"11051:6:34","nodeType":"YulIdentifier","src":"11051:6:34"},{"kind":"number","nativeSrc":"11059:2:34","nodeType":"YulLiteral","src":"11059:2:34","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"11048:2:34","nodeType":"YulIdentifier","src":"11048:2:34"},"nativeSrc":"11048:14:34","nodeType":"YulFunctionCall","src":"11048:14:34"},"nativeSrc":"11041:930:34","nodeType":"YulSwitch","src":"11041:930:34"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"10678:1299:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"10759:4:34","nodeType":"YulTypedName","src":"10759:4:34","type":""},{"name":"src","nativeSrc":"10765:3:34","nodeType":"YulTypedName","src":"10765:3:34","type":""}],"src":"10678:1299:34"},{"body":{"nativeSrc":"12196:406:34","nodeType":"YulBlock","src":"12196:406:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12213:9:34","nodeType":"YulIdentifier","src":"12213:9:34"},{"name":"value0","nativeSrc":"12224:6:34","nodeType":"YulIdentifier","src":"12224:6:34"}],"functionName":{"name":"mstore","nativeSrc":"12206:6:34","nodeType":"YulIdentifier","src":"12206:6:34"},"nativeSrc":"12206:25:34","nodeType":"YulFunctionCall","src":"12206:25:34"},"nativeSrc":"12206:25:34","nodeType":"YulExpressionStatement","src":"12206:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12251:9:34","nodeType":"YulIdentifier","src":"12251:9:34"},{"kind":"number","nativeSrc":"12262:2:34","nodeType":"YulLiteral","src":"12262:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12247:3:34","nodeType":"YulIdentifier","src":"12247:3:34"},"nativeSrc":"12247:18:34","nodeType":"YulFunctionCall","src":"12247:18:34"},{"name":"value1","nativeSrc":"12267:6:34","nodeType":"YulIdentifier","src":"12267:6:34"}],"functionName":{"name":"mstore","nativeSrc":"12240:6:34","nodeType":"YulIdentifier","src":"12240:6:34"},"nativeSrc":"12240:34:34","nodeType":"YulFunctionCall","src":"12240:34:34"},"nativeSrc":"12240:34:34","nodeType":"YulExpressionStatement","src":"12240:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12294:9:34","nodeType":"YulIdentifier","src":"12294:9:34"},{"kind":"number","nativeSrc":"12305:2:34","nodeType":"YulLiteral","src":"12305:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12290:3:34","nodeType":"YulIdentifier","src":"12290:3:34"},"nativeSrc":"12290:18:34","nodeType":"YulFunctionCall","src":"12290:18:34"},{"arguments":[{"name":"value2","nativeSrc":"12314:6:34","nodeType":"YulIdentifier","src":"12314:6:34"},{"kind":"number","nativeSrc":"12322:6:34","nodeType":"YulLiteral","src":"12322:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"12310:3:34","nodeType":"YulIdentifier","src":"12310:3:34"},"nativeSrc":"12310:19:34","nodeType":"YulFunctionCall","src":"12310:19:34"}],"functionName":{"name":"mstore","nativeSrc":"12283:6:34","nodeType":"YulIdentifier","src":"12283:6:34"},"nativeSrc":"12283:47:34","nodeType":"YulFunctionCall","src":"12283:47:34"},"nativeSrc":"12283:47:34","nodeType":"YulExpressionStatement","src":"12283:47:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12350:9:34","nodeType":"YulIdentifier","src":"12350:9:34"},{"kind":"number","nativeSrc":"12361:2:34","nodeType":"YulLiteral","src":"12361:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12346:3:34","nodeType":"YulIdentifier","src":"12346:3:34"},"nativeSrc":"12346:18:34","nodeType":"YulFunctionCall","src":"12346:18:34"},{"kind":"number","nativeSrc":"12366:3:34","nodeType":"YulLiteral","src":"12366:3:34","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"12339:6:34","nodeType":"YulIdentifier","src":"12339:6:34"},"nativeSrc":"12339:31:34","nodeType":"YulFunctionCall","src":"12339:31:34"},"nativeSrc":"12339:31:34","nodeType":"YulExpressionStatement","src":"12339:31:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12390:9:34","nodeType":"YulIdentifier","src":"12390:9:34"},{"kind":"number","nativeSrc":"12401:3:34","nodeType":"YulLiteral","src":"12401:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12386:3:34","nodeType":"YulIdentifier","src":"12386:3:34"},"nativeSrc":"12386:19:34","nodeType":"YulFunctionCall","src":"12386:19:34"},{"name":"value4","nativeSrc":"12407:6:34","nodeType":"YulIdentifier","src":"12407:6:34"}],"functionName":{"name":"mstore","nativeSrc":"12379:6:34","nodeType":"YulIdentifier","src":"12379:6:34"},"nativeSrc":"12379:35:34","nodeType":"YulFunctionCall","src":"12379:35:34"},"nativeSrc":"12379:35:34","nodeType":"YulExpressionStatement","src":"12379:35:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12440:9:34","nodeType":"YulIdentifier","src":"12440:9:34"},{"kind":"number","nativeSrc":"12451:3:34","nodeType":"YulLiteral","src":"12451:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"12436:3:34","nodeType":"YulIdentifier","src":"12436:3:34"},"nativeSrc":"12436:19:34","nodeType":"YulFunctionCall","src":"12436:19:34"},{"name":"value3","nativeSrc":"12457:6:34","nodeType":"YulIdentifier","src":"12457:6:34"},{"name":"value4","nativeSrc":"12465:6:34","nodeType":"YulIdentifier","src":"12465:6:34"}],"functionName":{"name":"calldatacopy","nativeSrc":"12423:12:34","nodeType":"YulIdentifier","src":"12423:12:34"},"nativeSrc":"12423:49:34","nodeType":"YulFunctionCall","src":"12423:49:34"},"nativeSrc":"12423:49:34","nodeType":"YulExpressionStatement","src":"12423:49:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12496:9:34","nodeType":"YulIdentifier","src":"12496:9:34"},{"name":"value4","nativeSrc":"12507:6:34","nodeType":"YulIdentifier","src":"12507:6:34"}],"functionName":{"name":"add","nativeSrc":"12492:3:34","nodeType":"YulIdentifier","src":"12492:3:34"},"nativeSrc":"12492:22:34","nodeType":"YulFunctionCall","src":"12492:22:34"},{"kind":"number","nativeSrc":"12516:3:34","nodeType":"YulLiteral","src":"12516:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"12488:3:34","nodeType":"YulIdentifier","src":"12488:3:34"},"nativeSrc":"12488:32:34","nodeType":"YulFunctionCall","src":"12488:32:34"},{"kind":"number","nativeSrc":"12522:1:34","nodeType":"YulLiteral","src":"12522:1:34","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"12481:6:34","nodeType":"YulIdentifier","src":"12481:6:34"},"nativeSrc":"12481:43:34","nodeType":"YulFunctionCall","src":"12481:43:34"},"nativeSrc":"12481:43:34","nodeType":"YulExpressionStatement","src":"12481:43:34"},{"nativeSrc":"12533:63:34","nodeType":"YulAssignment","src":"12533:63:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12549:9:34","nodeType":"YulIdentifier","src":"12549:9:34"},{"arguments":[{"arguments":[{"name":"value4","nativeSrc":"12568:6:34","nodeType":"YulIdentifier","src":"12568:6:34"},{"kind":"number","nativeSrc":"12576:2:34","nodeType":"YulLiteral","src":"12576:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"12564:3:34","nodeType":"YulIdentifier","src":"12564:3:34"},"nativeSrc":"12564:15:34","nodeType":"YulFunctionCall","src":"12564:15:34"},{"arguments":[{"kind":"number","nativeSrc":"12585:2:34","nodeType":"YulLiteral","src":"12585:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"12581:3:34","nodeType":"YulIdentifier","src":"12581:3:34"},"nativeSrc":"12581:7:34","nodeType":"YulFunctionCall","src":"12581:7:34"}],"functionName":{"name":"and","nativeSrc":"12560:3:34","nodeType":"YulIdentifier","src":"12560:3:34"},"nativeSrc":"12560:29:34","nodeType":"YulFunctionCall","src":"12560:29:34"}],"functionName":{"name":"add","nativeSrc":"12545:3:34","nodeType":"YulIdentifier","src":"12545:3:34"},"nativeSrc":"12545:45:34","nodeType":"YulFunctionCall","src":"12545:45:34"},{"kind":"number","nativeSrc":"12592:3:34","nodeType":"YulLiteral","src":"12592:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"12541:3:34","nodeType":"YulIdentifier","src":"12541:3:34"},"nativeSrc":"12541:55:34","nodeType":"YulFunctionCall","src":"12541:55:34"},"variableNames":[{"name":"tail","nativeSrc":"12533:4:34","nodeType":"YulIdentifier","src":"12533:4:34"}]}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint16_t_string_calldata_ptr__to_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11982:620:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12133:9:34","nodeType":"YulTypedName","src":"12133:9:34","type":""},{"name":"value4","nativeSrc":"12144:6:34","nodeType":"YulTypedName","src":"12144:6:34","type":""},{"name":"value3","nativeSrc":"12152:6:34","nodeType":"YulTypedName","src":"12152:6:34","type":""},{"name":"value2","nativeSrc":"12160:6:34","nodeType":"YulTypedName","src":"12160:6:34","type":""},{"name":"value1","nativeSrc":"12168:6:34","nodeType":"YulTypedName","src":"12168:6:34","type":""},{"name":"value0","nativeSrc":"12176:6:34","nodeType":"YulTypedName","src":"12176:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12187:4:34","nodeType":"YulTypedName","src":"12187:4:34","type":""}],"src":"11982:620:34"},{"body":{"nativeSrc":"12781:235:34","nodeType":"YulBlock","src":"12781:235:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12798:9:34","nodeType":"YulIdentifier","src":"12798:9:34"},{"kind":"number","nativeSrc":"12809:2:34","nodeType":"YulLiteral","src":"12809:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12791:6:34","nodeType":"YulIdentifier","src":"12791:6:34"},"nativeSrc":"12791:21:34","nodeType":"YulFunctionCall","src":"12791:21:34"},"nativeSrc":"12791:21:34","nodeType":"YulExpressionStatement","src":"12791:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12832:9:34","nodeType":"YulIdentifier","src":"12832:9:34"},{"kind":"number","nativeSrc":"12843:2:34","nodeType":"YulLiteral","src":"12843:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12828:3:34","nodeType":"YulIdentifier","src":"12828:3:34"},"nativeSrc":"12828:18:34","nodeType":"YulFunctionCall","src":"12828:18:34"},{"kind":"number","nativeSrc":"12848:2:34","nodeType":"YulLiteral","src":"12848:2:34","type":"","value":"45"}],"functionName":{"name":"mstore","nativeSrc":"12821:6:34","nodeType":"YulIdentifier","src":"12821:6:34"},"nativeSrc":"12821:30:34","nodeType":"YulFunctionCall","src":"12821:30:34"},"nativeSrc":"12821:30:34","nodeType":"YulExpressionStatement","src":"12821:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12871:9:34","nodeType":"YulIdentifier","src":"12871:9:34"},{"kind":"number","nativeSrc":"12882:2:34","nodeType":"YulLiteral","src":"12882:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12867:3:34","nodeType":"YulIdentifier","src":"12867:3:34"},"nativeSrc":"12867:18:34","nodeType":"YulFunctionCall","src":"12867:18:34"},{"hexValue":"746865206e65772074782070726963652073686f756c64206265206c61726765","kind":"string","nativeSrc":"12887:34:34","nodeType":"YulLiteral","src":"12887:34:34","type":"","value":"the new tx price should be large"}],"functionName":{"name":"mstore","nativeSrc":"12860:6:34","nodeType":"YulIdentifier","src":"12860:6:34"},"nativeSrc":"12860:62:34","nodeType":"YulFunctionCall","src":"12860:62:34"},"nativeSrc":"12860:62:34","nodeType":"YulExpressionStatement","src":"12860:62:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12942:9:34","nodeType":"YulIdentifier","src":"12942:9:34"},{"kind":"number","nativeSrc":"12953:2:34","nodeType":"YulLiteral","src":"12953:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12938:3:34","nodeType":"YulIdentifier","src":"12938:3:34"},"nativeSrc":"12938:18:34","nodeType":"YulFunctionCall","src":"12938:18:34"},{"hexValue":"72207468616e206265666f7265","kind":"string","nativeSrc":"12958:15:34","nodeType":"YulLiteral","src":"12958:15:34","type":"","value":"r than before"}],"functionName":{"name":"mstore","nativeSrc":"12931:6:34","nodeType":"YulIdentifier","src":"12931:6:34"},"nativeSrc":"12931:43:34","nodeType":"YulFunctionCall","src":"12931:43:34"},"nativeSrc":"12931:43:34","nodeType":"YulExpressionStatement","src":"12931:43:34"},{"nativeSrc":"12983:27:34","nodeType":"YulAssignment","src":"12983:27:34","value":{"arguments":[{"name":"headStart","nativeSrc":"12995:9:34","nodeType":"YulIdentifier","src":"12995:9:34"},{"kind":"number","nativeSrc":"13006:3:34","nodeType":"YulLiteral","src":"13006:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12991:3:34","nodeType":"YulIdentifier","src":"12991:3:34"},"nativeSrc":"12991:19:34","nodeType":"YulFunctionCall","src":"12991:19:34"},"variableNames":[{"name":"tail","nativeSrc":"12983:4:34","nodeType":"YulIdentifier","src":"12983:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8bb60aaf805d6037c85befbef77dc6120c79480f8db99b4aa0598783010d7aa__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12607:409:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12758:9:34","nodeType":"YulTypedName","src":"12758:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12772:4:34","nodeType":"YulTypedName","src":"12772:4:34","type":""}],"src":"12607:409:34"},{"body":{"nativeSrc":"13121:89:34","nodeType":"YulBlock","src":"13121:89:34","statements":[{"nativeSrc":"13131:26:34","nodeType":"YulAssignment","src":"13131:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"13143:9:34","nodeType":"YulIdentifier","src":"13143:9:34"},{"kind":"number","nativeSrc":"13154:2:34","nodeType":"YulLiteral","src":"13154:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13139:3:34","nodeType":"YulIdentifier","src":"13139:3:34"},"nativeSrc":"13139:18:34","nodeType":"YulFunctionCall","src":"13139:18:34"},"variableNames":[{"name":"tail","nativeSrc":"13131:4:34","nodeType":"YulIdentifier","src":"13131:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13173:9:34","nodeType":"YulIdentifier","src":"13173:9:34"},{"arguments":[{"name":"value0","nativeSrc":"13188:6:34","nodeType":"YulIdentifier","src":"13188:6:34"},{"kind":"number","nativeSrc":"13196:6:34","nodeType":"YulLiteral","src":"13196:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"13184:3:34","nodeType":"YulIdentifier","src":"13184:3:34"},"nativeSrc":"13184:19:34","nodeType":"YulFunctionCall","src":"13184:19:34"}],"functionName":{"name":"mstore","nativeSrc":"13166:6:34","nodeType":"YulIdentifier","src":"13166:6:34"},"nativeSrc":"13166:38:34","nodeType":"YulFunctionCall","src":"13166:38:34"},"nativeSrc":"13166:38:34","nodeType":"YulExpressionStatement","src":"13166:38:34"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint256__fromStack_reversed","nativeSrc":"13021:189:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13090:9:34","nodeType":"YulTypedName","src":"13090:9:34","type":""},{"name":"value0","nativeSrc":"13101:6:34","nodeType":"YulTypedName","src":"13101:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13112:4:34","nodeType":"YulTypedName","src":"13112:4:34","type":""}],"src":"13021:189:34"},{"body":{"nativeSrc":"13389:160:34","nodeType":"YulBlock","src":"13389:160:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13406:9:34","nodeType":"YulIdentifier","src":"13406:9:34"},{"kind":"number","nativeSrc":"13417:2:34","nodeType":"YulLiteral","src":"13417:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13399:6:34","nodeType":"YulIdentifier","src":"13399:6:34"},"nativeSrc":"13399:21:34","nodeType":"YulFunctionCall","src":"13399:21:34"},"nativeSrc":"13399:21:34","nodeType":"YulExpressionStatement","src":"13399:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13440:9:34","nodeType":"YulIdentifier","src":"13440:9:34"},{"kind":"number","nativeSrc":"13451:2:34","nodeType":"YulLiteral","src":"13451:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13436:3:34","nodeType":"YulIdentifier","src":"13436:3:34"},"nativeSrc":"13436:18:34","nodeType":"YulFunctionCall","src":"13436:18:34"},{"kind":"number","nativeSrc":"13456:2:34","nodeType":"YulLiteral","src":"13456:2:34","type":"","value":"10"}],"functionName":{"name":"mstore","nativeSrc":"13429:6:34","nodeType":"YulIdentifier","src":"13429:6:34"},"nativeSrc":"13429:30:34","nodeType":"YulFunctionCall","src":"13429:30:34"},"nativeSrc":"13429:30:34","nodeType":"YulExpressionStatement","src":"13429:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13479:9:34","nodeType":"YulIdentifier","src":"13479:9:34"},{"kind":"number","nativeSrc":"13490:2:34","nodeType":"YulLiteral","src":"13490:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13475:3:34","nodeType":"YulIdentifier","src":"13475:3:34"},"nativeSrc":"13475:18:34","nodeType":"YulFunctionCall","src":"13475:18:34"},{"hexValue":"6475706c696361746564","kind":"string","nativeSrc":"13495:12:34","nodeType":"YulLiteral","src":"13495:12:34","type":"","value":"duplicated"}],"functionName":{"name":"mstore","nativeSrc":"13468:6:34","nodeType":"YulIdentifier","src":"13468:6:34"},"nativeSrc":"13468:40:34","nodeType":"YulFunctionCall","src":"13468:40:34"},"nativeSrc":"13468:40:34","nodeType":"YulExpressionStatement","src":"13468:40:34"},{"nativeSrc":"13517:26:34","nodeType":"YulAssignment","src":"13517:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"13529:9:34","nodeType":"YulIdentifier","src":"13529:9:34"},{"kind":"number","nativeSrc":"13540:2:34","nodeType":"YulLiteral","src":"13540:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13525:3:34","nodeType":"YulIdentifier","src":"13525:3:34"},"nativeSrc":"13525:18:34","nodeType":"YulFunctionCall","src":"13525:18:34"},"variableNames":[{"name":"tail","nativeSrc":"13517:4:34","nodeType":"YulIdentifier","src":"13517:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_c408cec1329bb31a3148be2369fbd5b36a4fbd332b42dd56ad2cf165479d4b50__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13215:334:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13366:9:34","nodeType":"YulTypedName","src":"13366:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13380:4:34","nodeType":"YulTypedName","src":"13380:4:34","type":""}],"src":"13215:334:34"},{"body":{"nativeSrc":"13728:164:34","nodeType":"YulBlock","src":"13728:164:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13745:9:34","nodeType":"YulIdentifier","src":"13745:9:34"},{"kind":"number","nativeSrc":"13756:2:34","nodeType":"YulLiteral","src":"13756:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13738:6:34","nodeType":"YulIdentifier","src":"13738:6:34"},"nativeSrc":"13738:21:34","nodeType":"YulFunctionCall","src":"13738:21:34"},"nativeSrc":"13738:21:34","nodeType":"YulExpressionStatement","src":"13738:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13779:9:34","nodeType":"YulIdentifier","src":"13779:9:34"},{"kind":"number","nativeSrc":"13790:2:34","nodeType":"YulLiteral","src":"13790:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13775:3:34","nodeType":"YulIdentifier","src":"13775:3:34"},"nativeSrc":"13775:18:34","nodeType":"YulFunctionCall","src":"13775:18:34"},{"kind":"number","nativeSrc":"13795:2:34","nodeType":"YulLiteral","src":"13795:2:34","type":"","value":"14"}],"functionName":{"name":"mstore","nativeSrc":"13768:6:34","nodeType":"YulIdentifier","src":"13768:6:34"},"nativeSrc":"13768:30:34","nodeType":"YulFunctionCall","src":"13768:30:34"},"nativeSrc":"13768:30:34","nodeType":"YulExpressionStatement","src":"13768:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13818:9:34","nodeType":"YulIdentifier","src":"13818:9:34"},{"kind":"number","nativeSrc":"13829:2:34","nodeType":"YulLiteral","src":"13829:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13814:3:34","nodeType":"YulIdentifier","src":"13814:3:34"},"nativeSrc":"13814:18:34","nodeType":"YulFunctionCall","src":"13814:18:34"},{"hexValue":"696e76616c696420616d6f756e74","kind":"string","nativeSrc":"13834:16:34","nodeType":"YulLiteral","src":"13834:16:34","type":"","value":"invalid amount"}],"functionName":{"name":"mstore","nativeSrc":"13807:6:34","nodeType":"YulIdentifier","src":"13807:6:34"},"nativeSrc":"13807:44:34","nodeType":"YulFunctionCall","src":"13807:44:34"},"nativeSrc":"13807:44:34","nodeType":"YulExpressionStatement","src":"13807:44:34"},{"nativeSrc":"13860:26:34","nodeType":"YulAssignment","src":"13860:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"13872:9:34","nodeType":"YulIdentifier","src":"13872:9:34"},{"kind":"number","nativeSrc":"13883:2:34","nodeType":"YulLiteral","src":"13883:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13868:3:34","nodeType":"YulIdentifier","src":"13868:3:34"},"nativeSrc":"13868:18:34","nodeType":"YulFunctionCall","src":"13868:18:34"},"variableNames":[{"name":"tail","nativeSrc":"13860:4:34","nodeType":"YulIdentifier","src":"13860:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13554:338:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13705:9:34","nodeType":"YulTypedName","src":"13705:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13719:4:34","nodeType":"YulTypedName","src":"13719:4:34","type":""}],"src":"13554:338:34"},{"body":{"nativeSrc":"14071:174:34","nodeType":"YulBlock","src":"14071:174:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14088:9:34","nodeType":"YulIdentifier","src":"14088:9:34"},{"kind":"number","nativeSrc":"14099:2:34","nodeType":"YulLiteral","src":"14099:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14081:6:34","nodeType":"YulIdentifier","src":"14081:6:34"},"nativeSrc":"14081:21:34","nodeType":"YulFunctionCall","src":"14081:21:34"},"nativeSrc":"14081:21:34","nodeType":"YulExpressionStatement","src":"14081:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14122:9:34","nodeType":"YulIdentifier","src":"14122:9:34"},{"kind":"number","nativeSrc":"14133:2:34","nodeType":"YulLiteral","src":"14133:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14118:3:34","nodeType":"YulIdentifier","src":"14118:3:34"},"nativeSrc":"14118:18:34","nodeType":"YulFunctionCall","src":"14118:18:34"},{"kind":"number","nativeSrc":"14138:2:34","nodeType":"YulLiteral","src":"14138:2:34","type":"","value":"24"}],"functionName":{"name":"mstore","nativeSrc":"14111:6:34","nodeType":"YulIdentifier","src":"14111:6:34"},"nativeSrc":"14111:30:34","nodeType":"YulFunctionCall","src":"14111:30:34"},"nativeSrc":"14111:30:34","nodeType":"YulExpressionStatement","src":"14111:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14161:9:34","nodeType":"YulIdentifier","src":"14161:9:34"},{"kind":"number","nativeSrc":"14172:2:34","nodeType":"YulLiteral","src":"14172:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14157:3:34","nodeType":"YulIdentifier","src":"14157:3:34"},"nativeSrc":"14157:18:34","nodeType":"YulFunctionCall","src":"14157:18:34"},{"hexValue":"696e76616c6964207468726f74746c652073657474696e67","kind":"string","nativeSrc":"14177:26:34","nodeType":"YulLiteral","src":"14177:26:34","type":"","value":"invalid throttle setting"}],"functionName":{"name":"mstore","nativeSrc":"14150:6:34","nodeType":"YulIdentifier","src":"14150:6:34"},"nativeSrc":"14150:54:34","nodeType":"YulFunctionCall","src":"14150:54:34"},"nativeSrc":"14150:54:34","nodeType":"YulExpressionStatement","src":"14150:54:34"},{"nativeSrc":"14213:26:34","nodeType":"YulAssignment","src":"14213:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"14225:9:34","nodeType":"YulIdentifier","src":"14225:9:34"},{"kind":"number","nativeSrc":"14236:2:34","nodeType":"YulLiteral","src":"14236:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14221:3:34","nodeType":"YulIdentifier","src":"14221:3:34"},"nativeSrc":"14221:18:34","nodeType":"YulFunctionCall","src":"14221:18:34"},"variableNames":[{"name":"tail","nativeSrc":"14213:4:34","nodeType":"YulIdentifier","src":"14213:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_421dca8797e77bf1356bffec8a2c09bf948fbfd8bade7477d3a22d409eb7116a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13897:348:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14048:9:34","nodeType":"YulTypedName","src":"14048:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14062:4:34","nodeType":"YulTypedName","src":"14062:4:34","type":""}],"src":"13897:348:34"},{"body":{"nativeSrc":"14349:89:34","nodeType":"YulBlock","src":"14349:89:34","statements":[{"nativeSrc":"14359:26:34","nodeType":"YulAssignment","src":"14359:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"14371:9:34","nodeType":"YulIdentifier","src":"14371:9:34"},{"kind":"number","nativeSrc":"14382:2:34","nodeType":"YulLiteral","src":"14382:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14367:3:34","nodeType":"YulIdentifier","src":"14367:3:34"},"nativeSrc":"14367:18:34","nodeType":"YulFunctionCall","src":"14367:18:34"},"variableNames":[{"name":"tail","nativeSrc":"14359:4:34","nodeType":"YulIdentifier","src":"14359:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14401:9:34","nodeType":"YulIdentifier","src":"14401:9:34"},{"arguments":[{"name":"value0","nativeSrc":"14416:6:34","nodeType":"YulIdentifier","src":"14416:6:34"},{"kind":"number","nativeSrc":"14424:6:34","nodeType":"YulLiteral","src":"14424:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"14412:3:34","nodeType":"YulIdentifier","src":"14412:3:34"},"nativeSrc":"14412:19:34","nodeType":"YulFunctionCall","src":"14412:19:34"}],"functionName":{"name":"mstore","nativeSrc":"14394:6:34","nodeType":"YulIdentifier","src":"14394:6:34"},"nativeSrc":"14394:38:34","nodeType":"YulFunctionCall","src":"14394:38:34"},"nativeSrc":"14394:38:34","nodeType":"YulExpressionStatement","src":"14394:38:34"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nativeSrc":"14250:188:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14318:9:34","nodeType":"YulTypedName","src":"14318:9:34","type":""},{"name":"value0","nativeSrc":"14329:6:34","nodeType":"YulTypedName","src":"14329:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14340:4:34","nodeType":"YulTypedName","src":"14340:4:34","type":""}],"src":"14250:188:34"},{"body":{"nativeSrc":"14634:14:34","nodeType":"YulBlock","src":"14634:14:34","statements":[{"nativeSrc":"14636:10:34","nodeType":"YulAssignment","src":"14636:10:34","value":{"name":"pos","nativeSrc":"14643:3:34","nodeType":"YulIdentifier","src":"14643:3:34"},"variableNames":[{"name":"end","nativeSrc":"14636:3:34","nodeType":"YulIdentifier","src":"14636:3:34"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"14443:205:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14618:3:34","nodeType":"YulTypedName","src":"14618:3:34","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14626:3:34","nodeType":"YulTypedName","src":"14626:3:34","type":""}],"src":"14443:205:34"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_uint32_t_uint256__to_t_bytes32_t_uint32_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_uint32(add(headStart, 32))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_enum$_WithdrawalStatus_$5074__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint8__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), 224)\n        let length := mload(value5)\n        mstore(add(headStart, 224), length)\n        mcopy(add(headStart, 256), add(value5, 32), length)\n        mstore(add(add(headStart, length), 256), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 256)\n        if iszero(lt(value6, 6))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint16_t_uint64_t_uint16_t_uint64__to_t_uint16_t_uint16_t_uint64_t_uint16_t_uint64_t_uint16_t_uint64__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, 0xffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffff))\n        mstore(add(headStart, 96), and(value3, 0xffff))\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffff))\n        mstore(add(headStart, 160), and(value5, 0xffff))\n        mstore(add(headStart, 192), and(value6, 0xffffffffffffffff))\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint16t_uint64(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_uint16(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, length), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_1, 0x20)\n        value1 := length\n        value2 := abi_decode_uint16(add(headStart, 0x20))\n    }\n    function abi_decode_tuple_t_uint256t_uint16(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_uint16(add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_uint32t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_uint32(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 96))\n        value3 := value_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_bytes32t_uint32t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n        value2 := abi_decode_uint32(add(headStart, 64))\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 96))\n        value3 := value_2\n    }\n    function abi_decode_tuple_t_uint16(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_uint32__to_t_bytes32_t_uint32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(224, value1), shl(224, 0xffffffff)))\n        end := add(pos, 36)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint16_t_uint64__to_t_uint16_t_uint64__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_35e2a7c0e5320f1f9d561dcf29daa653278f4a6b116055ae99c0f73982ee0a11__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"invalid tx price\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_660324624872cd0b922aa91b3e00247627a75111d0e93436b452b9f5c54a277e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"unaffordable\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint16_t_string_calldata_ptr__to_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffff))\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), value4)\n        calldatacopy(add(headStart, 160), value3, value4)\n        mstore(add(add(headStart, value4), 160), 0)\n        tail := add(add(headStart, and(add(value4, 31), not(31))), 160)\n    }\n    function abi_encode_tuple_t_stringliteral_c8bb60aaf805d6037c85befbef77dc6120c79480f8db99b4aa0598783010d7aa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"the new tx price should be large\")\n        mstore(add(headStart, 96), \"r than before\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_stringliteral_c408cec1329bb31a3148be2369fbd5b36a4fbd332b42dd56ad2cf165479d4b50__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"duplicated\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"invalid amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_421dca8797e77bf1356bffec8a2c09bf948fbfd8bade7477d3a22d409eb7116a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"invalid throttle setting\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405260043610610123575f3560e01c80638da5cb5b116100a1578063b55ada3911610071578063c19dd32011610057578063c19dd320146103f0578063d653d8201461040f578063f2fde38b1461042e575f80fd5b8063b55ada39146103a4578063b670ab5e146103d1575f80fd5b80638da5cb5b1461032d578063a81de86914610353578063b3dd64dd14610366578063b3f33eda14610385575f80fd5b80635cc07076116100f657806384a64c12116100dc57806384a64c1214610241578063883d87b1146102605780638aa4af891461030e575f80fd5b80635cc07076146101fb578063715018a61461022d575f80fd5b806301ffc9a7146101275780630f7ee1ec1461015b5780631ccc92c7146101bb578063278ecde1146101da575b5f80fd5b348015610132575f80fd5b5061014661014136600461171d565b61044d565b60405190151581526020015b60405180910390f35b348015610166575f80fd5b5061019b61017536600461174b565b60046020525f9081526040902080546001820154600290920154909163ffffffff169083565b6040805193845263ffffffff909216602084015290820152606001610152565b3480156101c6575f80fd5b506101466101d536600461177a565b61049e565b3480156101e5575f80fd5b506101f96101f436600461174b565b6104f8565b005b348015610206575f80fd5b5061021a61021536600461174b565b6105ec565b60405161015297969594939291906117b8565b348015610238575f80fd5b506101f96106cf565b34801561024c575f80fd5b506101f961025b36600461174b565b6106e2565b34801561026b575f80fd5b506001546102c19061ffff8082169162010000810482169167ffffffffffffffff6401000000008304811692600160601b8104831692600160701b8204831692600160b01b830490911691600160c01b90041687565b6040805161ffff9889168152968816602088015267ffffffffffffffff95861690870152928616606086015290831660808501529390931660a083015290911660c082015260e001610152565b348015610319575f80fd5b506101f9610328366004611850565b6107e5565b348015610338575f80fd5b505f546040516001600160a01b039091168152602001610152565b6101f9610361366004611891565b610932565b348015610371575f80fd5b506101f961038036600461190d565b610cdd565b348015610390575f80fd5b506101f961039f366004611850565b610ec7565b3480156103af575f80fd5b506103c36103be366004611944565b610fe6565b604051908152602001610152565b3480156103dc575f80fd5b506101f96103eb366004611985565b61127c565b3480156103fb575f80fd5b506101f961040a36600461174b565b611430565b34801561041a575f80fd5b506101f96104293660046119af565b61150f565b348015610439575f80fd5b506101f96104483660046119c8565b6115b4565b5f6001600160e01b031982166301ffc9a760e01b148061047d57506001600160e01b031982166366933dc760e01b145b8061049857506001600160e01b0319821663ef04497360e01b145b92915050565b5f8083836040516020016104c992919091825260e01b6001600160e01b031916602082015260240190565b60408051808303601f1901815291815281516020928301205f908152600290925290205460ff16949350505050565b5f6003828154811061050c5761050c6119e1565b5f918252602090912060079091020190506003600682015460ff166005811115610538576105386117a4565b1461055657604051631dd2188d60e31b815260040160405180910390fd5b60068101805460ff1916600417905580546001600160a01b031633811461059057604051634ca8886760e01b815260040160405180910390fd5b426004830155600282015460018301546105bd916105ad91611a09565b6001600160a01b038316906115f1565b60405183907f2e1897b0591d764356194f7a795238a87c1987c7a877568e50d829d547c92b97905f90a2505050565b600381815481106105fb575f80fd5b5f9182526020909120600790910201805460018201546002830154600384015460048501546005860180546001600160a01b03909616975093959294919390929161064590611a1c565b80601f016020809104026020016040519081016040528092919081815260200182805461067190611a1c565b80156106bc5780601f10610693576101008083540402835291602001916106bc565b820191905f5260205f20905b81548152906001019060200180831161069f57829003601f168201915b5050506006909301549192505060ff1687565b6106d7611689565b6106e05f6116b5565b565b5f600382815481106106f6576106f66119e1565b5f918252602090912060079091020190506001600682015460ff166005811115610722576107226117a4565b1461074057604051631dd2188d60e31b815260040160405180910390fd5b80546001600160a01b0316331461076a57604051634ca8886760e01b815260040160405180910390fd5b600154600482015461ffff909116906107839042611a54565b10156107a25760405163a74c1c5f60e01b815260040160405180910390fd5b42600482015560068101805460ff1916600217905560405182907f0106f4416537efff55311ef5e2f9c2a48204fcf84731f2b9d5091d23fc52160c905f90a25050565b6107ed611689565b6127108261ffff16111561081457604051632bc7b84d60e21b815260040160405180910390fd5b670de0b6b3a76400008167ffffffffffffffff16111561084757604051632bc7b84d60e21b815260040160405180910390fd5b5f8261ffff16118015610862575067ffffffffffffffff8116155b1561088057604051630fe9ec7160e41b815260040160405180910390fd5b600180547fffffffffffffffffffff00000000000000000000ffffffffffffffffffffffff16600160601b61ffff85169081027fffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffff1691909117600160701b67ffffffffffffffff8516908102919091179092556040805191825260208201929092527f59b73ca79bcb3dcb02c4d2b81e1a2da4c9fd9857ed81cfb16c5431b502f8c71b91015b60405180910390a15050565b5f83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050825192935050602290911090508061097f5750605a8151115b1561099d5760405163e6c4247b60e01b815260040160405180910390fd5b6040805160e08101825260015461ffff80821683526201000082048116602084015267ffffffffffffffff6401000000008304811694840194909452600160601b8204811660608401819052600160701b830485166080850152600160b01b830490911660a0840152600160c01b90910490921660c082015234915f919015610a7857612710816060015161ffff1684610a379190611a67565b610a419190611a92565b9150806080015167ffffffffffffffff16821115610a6b57806080015167ffffffffffffffff1691505b610a758284611a54565b92505b5f610a886402540be40085611aa5565b90508015610aa957610a9a8184611a09565b9250610aa68185611a54565b93505b5f8661ffff1611610b015760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642074782070726963650000000000000000000000000000000060448201526064015b60405180910390fd5b6402540be400610b1761012c61ffff8916611a67565b610b219190611a67565b8411610b5e5760405162461bcd60e51b815260206004820152600c60248201526b756e6166666f726461626c6560a01b6044820152606401610af8565b5f600380549050905060036040518060e00160405280336001600160a01b031681526020018781526020018681526020018961ffff1681526020014281526020018b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093855250506001602093840181905285548082018755958352918390208451600790960201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390961695909517855550908201519083015560408101516002830155606081015160038301556080810151600483015560a08101519091906005820190610c5d9082611b17565b5060c082015160068201805460ff19166001836005811115610c8157610c816117a4565b02179055505050336001600160a01b0316817fa7aa0bf5f2a5106eb711bca96c8ea6ea0d99ec2c496d4d2c5dc0af8217d43c7c87878b8e8e604051610cca959493929190611bd2565b60405180910390a3505050505050505050565b5f60038381548110610cf157610cf16119e1565b5f918252602090912060079091020190506001600682015460ff166005811115610d1d57610d1d6117a4565b14610d3b57604051631dd2188d60e31b815260040160405180910390fd5b80546001600160a01b03163314610d6557604051634ca8886760e01b815260040160405180910390fd5b600154600482015461ffff90911690610d7e9042611a54565b1015610d9d5760405163a74c1c5f60e01b815260040160405180910390fd5b80600301548261ffff1611610e1a5760405162461bcd60e51b815260206004820152602d60248201527f746865206e65772074782070726963652073686f756c64206265206c6172676560448201527f72207468616e206265666f7265000000000000000000000000000000000000006064820152608401610af8565b6402540be400610e3061012c61ffff8516611a67565b610e3a9190611a67565b816001015411610e7b5760405162461bcd60e51b815260206004820152600c60248201526b756e6166666f726461626c6560a01b6044820152606401610af8565b61ffff82166003820181905542600483015560405190815283907fe6190c43c634720bcd5b72bb0b920b88f8d0a15ae7e5dcbb0582c1bb2f98df4b9060200160405180910390a2505050565b610ecf611689565b6127108261ffff161115610ef657604051632bc7b84d60e21b815260040160405180910390fd5b670de0b6b3a76400008167ffffffffffffffff161115610f2957604051632bc7b84d60e21b815260040160405180910390fd5b5f8261ffff16118015610f44575067ffffffffffffffff8116155b15610f6257604051630fe9ec7160e41b815260040160405180910390fd5b600180546bffffffffffffffffffff000019166201000061ffff85169081026bffffffffffffffff0000000019169190911764010000000067ffffffffffffffff8516908102919091179092556040805191825260208201929092527f1007ff7aec53e9626ce51f25d4e093f290f60da8019c8cf489f0ae2f21ebf76a9101610926565b5f3373bc100000000000000000000000000000000010001461101b57604051634ca8886760e01b815260040160405180910390fd5b5f858560405160200161104592919091825260e01b6001600160e01b031916602082015260240190565b60408051601f1981840301815291815281516020928301205f818152600290935291205490915060ff16156110bc5760405162461bcd60e51b815260206004820152600a60248201527f6475706c696361746564000000000000000000000000000000000000000000006044820152606401610af8565b5f831180156110d757506110d56402540be40084611aa5565b155b6111235760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610af8565b6040805160e08101825260015461ffff808216835262010000820481166020840181905267ffffffffffffffff6401000000008404811695850195909552600160601b830482166060850152600160701b830485166080850152600160b01b830490911660a0840152600160c01b90910490921660c082015290156111fa57612710816020015161ffff16856111b99190611a67565b6111c39190611a92565b9250806040015167ffffffffffffffff168311156111ed57806040015167ffffffffffffffff1692505b6111f78385611a54565b93505b5f8281526002602052604090819020805460ff191660011790555184906001600160a01b038716907fbc0e2d4f64f63e9c6b07a1665a26f689b20e42e836968119499db41c2d315efa9061126a908b908b90899092835263ffffffff919091166020830152604082015260600190565b60405180910390a35050949350505050565b3373bc10000000000000000000000000000000001000146112b057604051634ca8886760e01b815260040160405180910390fd5b5f600385815481106112c4576112c46119e1565b5f9182526020909120600790910201600681015490915060ff1660018160058111156112f2576112f26117a4565b148061130f5750600281600581111561130d5761130d6117a4565b145b611317575f80fd5b6040805160608101825286815263ffffffff86811660208084019182528385018881525f8c8152600492839052959095209351845590516001840180549190931663ffffffff1990911617909155915160029182015560068401805460ff19166005179055429184019190915582015480156113ab576113ab73bc10000000000000000000000000000000000002826115f1565b60018301546040515f91906113bf90611711565b82906040518091039083f5915050801580156113dd573d5f803e3d5ffd5b50506040805187815263ffffffff8716602082015290810185905287907fb74f5dbf34aabe02f20ff775b898acf1a9f70e4fbd48ad50548acae86e1ccd789060600160405180910390a250505050505050565b3373bc100000000000000000000000000000000010001461146457604051634ca8886760e01b815260040160405180910390fd5b5f60038281548110611478576114786119e1565b5f9182526020909120600790910201600681015490915060ff1660018160058111156114a6576114a66117a4565b14806114c3575060028160058111156114c1576114c16117a4565b145b6114cb575f80fd5b60068201805460ff1916600317905542600483015560405183907f829a8683c544ad289ce92d3ce06e9ebad69b18a6916e60ec766c2c217461d8e9905f90a2505050565b611517611689565b5f8161ffff161161156a5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207468726f74746c652073657474696e6700000000000000006044820152606401610af8565b6001805461ffff191661ffff83169081179091556040519081527fe536f709e7276119ff965216f1bbd671ef9ea99059743501129a0c9bec5d37ed9060200160405180910390a150565b6115bc611689565b6001600160a01b0381166115e557604051631e4fbdf760e01b81525f6004820152602401610af8565b6115ee816116b5565b50565b804710156116145760405163cd78605960e01b8152306004820152602401610af8565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461165d576040519150601f19603f3d011682016040523d82523d5f602084013e611662565b606091505b505090508061168457604051630a12f52160e11b815260040160405180910390fd5b505050565b5f546001600160a01b031633146106e05760405163118cdaa760e01b8152336004820152602401610af8565b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600880611c1a83390190565b5f6020828403121561172d575f80fd5b81356001600160e01b031981168114611744575f80fd5b9392505050565b5f6020828403121561175b575f80fd5b5035919050565b803563ffffffff81168114611775575f80fd5b919050565b5f806040838503121561178b575f80fd5b8235915061179b60208401611762565b90509250929050565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b038816815286602082015285604082015284606082015283608082015260e060a08201525f83518060e0840152806020860161010085015e5f6101008285010152610100601f19601f8301168401019150506006831061182d57634e487b7160e01b5f52602160045260245ffd5b8260c083015298975050505050505050565b803561ffff81168114611775575f80fd5b5f8060408385031215611861575f80fd5b61186a8361183f565b9150602083013567ffffffffffffffff81168114611886575f80fd5b809150509250929050565b5f805f604084860312156118a3575f80fd5b833567ffffffffffffffff8111156118b9575f80fd5b8401601f810186136118c9575f80fd5b803567ffffffffffffffff8111156118df575f80fd5b8660208284010111156118f0575f80fd5b60209182019450925061190490850161183f565b90509250925092565b5f806040838503121561191e575f80fd5b8235915061179b6020840161183f565b80356001600160a01b0381168114611775575f80fd5b5f805f8060808587031215611957575f80fd5b8435935061196760208601611762565b92506119756040860161192e565b9396929550929360600135925050565b5f805f8060808587031215611998575f80fd5b843593506020850135925061197560408601611762565b5f602082840312156119bf575f80fd5b6117448261183f565b5f602082840312156119d8575f80fd5b6117448261192e565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610498576104986119f5565b600181811c90821680611a3057607f821691505b602082108103611a4e57634e487b7160e01b5f52602260045260245ffd5b50919050565b81810381811115610498576104986119f5565b8082028115828204841417610498576104986119f5565b634e487b7160e01b5f52601260045260245ffd5b5f82611aa057611aa0611a7e565b500490565b5f82611ab357611ab3611a7e565b500690565b634e487b7160e01b5f52604160045260245ffd5b601f82111561168457805f5260205f20601f840160051c81016020851015611af15750805b601f840160051c820191505b81811015611b10575f8155600101611afd565b5050505050565b815167ffffffffffffffff811115611b3157611b31611ab8565b611b4581611b3f8454611a1c565b84611acc565b6020601f821160018114611b77575f8315611b605750848201515b5f19600385901b1c1916600184901b178455611b10565b5f84815260208120601f198516915b82811015611ba65787850151825560209485019460019092019101611b86565b5084821015611bc357868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b85815284602082015261ffff8416604082015260806060820152816080820152818360a08301375f81830160a090810191909152601f909201601f1916010194935050505056fe608060405230fffea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x123 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA1 JUMPI DUP1 PUSH4 0xB55ADA39 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC19DD320 GT PUSH2 0x57 JUMPI DUP1 PUSH4 0xC19DD320 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0xD653D820 EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB55ADA39 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0xB670AB5E EQ PUSH2 0x3D1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xA81DE869 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0xB3DD64DD EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0xB3F33EDA EQ PUSH2 0x385 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CC07076 GT PUSH2 0xF6 JUMPI DUP1 PUSH4 0x84A64C12 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x84A64C12 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x883D87B1 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x8AA4AF89 EQ PUSH2 0x30E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CC07076 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x22D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0xF7EE1EC EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x1CCC92C7 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x278ECDE1 EQ PUSH2 0x1DA JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x132 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x146 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x171D JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x19B PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 PUSH4 0xFFFFFFFF AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x152 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x146 PUSH2 0x1D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x49E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x4F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x6CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x6E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x2C1 SWAP1 PUSH2 0xFFFF DUP1 DUP3 AND SWAP2 PUSH3 0x10000 DUP2 DIV DUP3 AND SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0x60 SHL DUP2 DIV DUP4 AND SWAP3 PUSH1 0x1 PUSH1 0x70 SHL DUP3 DIV DUP4 AND SWAP3 PUSH1 0x1 PUSH1 0xB0 SHL DUP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV AND DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP9 DUP10 AND DUP2 MSTORE SWAP7 DUP9 AND PUSH1 0x20 DUP9 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP7 AND SWAP1 DUP8 ADD MSTORE SWAP3 DUP7 AND PUSH1 0x60 DUP7 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP4 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x152 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x319 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x1850 JUMP JUMPDEST PUSH2 0x7E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x338 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x152 JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x1891 JUMP JUMPDEST PUSH2 0x932 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x371 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x380 CALLDATASIZE PUSH1 0x4 PUSH2 0x190D JUMP JUMPDEST PUSH2 0xCDD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x390 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x1850 JUMP JUMPDEST PUSH2 0xEC7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C3 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1944 JUMP JUMPDEST PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x152 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DC JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0x127C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x1430 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x429 CALLDATASIZE PUSH1 0x4 PUSH2 0x19AF JUMP JUMPDEST PUSH2 0x150F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x439 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C8 JUMP JUMPDEST PUSH2 0x15B4 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x47D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x66933DC7 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x498 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xEF044973 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C9 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x50C JUMPI PUSH2 0x50C PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD SWAP1 POP PUSH1 0x3 PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x538 JUMPI PUSH2 0x538 PUSH2 0x17A4 JUMP JUMPDEST EQ PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD2188D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x4 OR SWAP1 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0x590 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0x5BD SWAP2 PUSH2 0x5AD SWAP2 PUSH2 0x1A09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x2E1897B0591D764356194F7A795238A87C1987C7A877568E50D829D547C92B97 SWAP1 PUSH0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x5FB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND SWAP8 POP SWAP4 SWAP6 SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 PUSH2 0x645 SWAP1 PUSH2 0x1A1C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x671 SWAP1 PUSH2 0x1A1C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6BC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x693 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6BC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x69F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x6 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 POP POP PUSH1 0xFF AND DUP8 JUMP JUMPDEST PUSH2 0x6D7 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x6E0 PUSH0 PUSH2 0x16B5 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x6F6 JUMPI PUSH2 0x6F6 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD SWAP1 POP PUSH1 0x1 PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x722 JUMPI PUSH2 0x722 PUSH2 0x17A4 JUMP JUMPDEST EQ PUSH2 0x740 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD2188D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x76A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 PUSH2 0x783 SWAP1 TIMESTAMP PUSH2 0x1A54 JUMP JUMPDEST LT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA74C1C5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x6 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH32 0x106F4416537EFFF55311EF5E2F9C2A48204FCF84731F2B9D5091D23FC52160C SWAP1 PUSH0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x7ED PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x2710 DUP3 PUSH2 0xFFFF AND GT ISZERO PUSH2 0x814 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0x862 JUMPI POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFE9EC71 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0xFFFF DUP6 AND SWAP1 DUP2 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x70 SHL PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x59B73CA79BCB3DCB02C4D2B81E1A2DA4C9FD9857ED81CFB16C5431B502F8C71B SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP3 MLOAD SWAP3 SWAP4 POP POP PUSH1 0x22 SWAP1 SWAP2 LT SWAP1 POP DUP1 PUSH2 0x97F JUMPI POP PUSH1 0x5A DUP2 MLOAD GT JUMPDEST ISZERO PUSH2 0x99D JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV DUP2 AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x70 SHL DUP4 DIV DUP6 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xB0 SHL DUP4 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV SWAP1 SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE CALLVALUE SWAP2 PUSH0 SWAP2 SWAP1 ISZERO PUSH2 0xA78 JUMPI PUSH2 0x2710 DUP2 PUSH1 0x60 ADD MLOAD PUSH2 0xFFFF AND DUP5 PUSH2 0xA37 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0xA41 SWAP2 SWAP1 PUSH2 0x1A92 JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x80 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 GT ISZERO PUSH2 0xA6B JUMPI DUP1 PUSH1 0x80 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP2 POP JUMPDEST PUSH2 0xA75 DUP3 DUP5 PUSH2 0x1A54 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH0 PUSH2 0xA88 PUSH5 0x2540BE400 DUP6 PUSH2 0x1AA5 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xAA9 JUMPI PUSH2 0xA9A DUP2 DUP5 PUSH2 0x1A09 JUMP JUMPDEST SWAP3 POP PUSH2 0xAA6 DUP2 DUP6 PUSH2 0x1A54 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH0 DUP7 PUSH2 0xFFFF AND GT PUSH2 0xB01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420747820707269636500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH5 0x2540BE400 PUSH2 0xB17 PUSH2 0x12C PUSH2 0xFFFF DUP10 AND PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0xB21 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST DUP5 GT PUSH2 0xB5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x756E6166666F726461626C65 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP PUSH1 0x1 PUSH1 0x20 SWAP4 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 SLOAD DUP1 DUP3 ADD DUP8 SSTORE SWAP6 DUP4 MSTORE SWAP2 DUP4 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0x7 SWAP1 SWAP7 MUL ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR DUP6 SSTORE POP SWAP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP2 ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x5 DUP3 ADD SWAP1 PUSH2 0xC5D SWAP1 DUP3 PUSH2 0x1B17 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xC81 JUMPI PUSH2 0xC81 PUSH2 0x17A4 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP POP POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0xA7AA0BF5F2A5106EB711BCA96C8EA6EA0D99EC2C496D4D2C5DC0AF8217D43C7C DUP8 DUP8 DUP12 DUP15 DUP15 PUSH1 0x40 MLOAD PUSH2 0xCCA SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xCF1 JUMPI PUSH2 0xCF1 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD SWAP1 POP PUSH1 0x1 PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1D PUSH2 0x17A4 JUMP JUMPDEST EQ PUSH2 0xD3B JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD2188D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 PUSH2 0xD7E SWAP1 TIMESTAMP PUSH2 0x1A54 JUMP JUMPDEST LT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x40 MLOAD PUSH4 0xA74C1C5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD SLOAD DUP3 PUSH2 0xFFFF AND GT PUSH2 0xE1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746865206E65772074782070726963652073686F756C64206265206C61726765 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207468616E206265666F726500000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH5 0x2540BE400 PUSH2 0xE30 PUSH2 0x12C PUSH2 0xFFFF DUP6 AND PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0xE3A SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD GT PUSH2 0xE7B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x756E6166666F726461626C65 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x3 DUP3 ADD DUP2 SWAP1 SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP4 SWAP1 PUSH32 0xE6190C43C634720BCD5B72BB0B920B88F8D0A15AE7E5DCBB0582C1BB2F98DF4B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0xECF PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x2710 DUP3 PUSH2 0xFFFF AND GT ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BC7B84D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0xF44 JUMPI POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFE9EC71 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFF0000 NOT AND PUSH3 0x10000 PUSH2 0xFFFF DUP6 AND SWAP1 DUP2 MUL PUSH12 0xFFFFFFFFFFFFFFFF00000000 NOT AND SWAP2 SWAP1 SWAP2 OR PUSH5 0x100000000 PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x1007FF7AEC53E9626CE51F25D4E093F290F60DA8019C8CF489F0AE2F21EBF76A SWAP2 ADD PUSH2 0x926 JUMP JUMPDEST PUSH0 CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x101B JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1045 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x10BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6475706C69636174656400000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 DUP4 GT DUP1 ISZERO PUSH2 0x10D7 JUMPI POP PUSH2 0x10D5 PUSH5 0x2540BE400 DUP5 PUSH2 0x1AA5 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x1123 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C696420616D6F756E74000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH2 0xFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH3 0x10000 DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP5 DIV DUP2 AND SWAP6 DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x60 SHL DUP4 DIV DUP3 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x70 SHL DUP4 DIV DUP6 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xB0 SHL DUP4 DIV SWAP1 SWAP2 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV SWAP1 SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x11FA JUMPI PUSH2 0x2710 DUP2 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND DUP6 PUSH2 0x11B9 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH2 0x11C3 SWAP2 SWAP1 PUSH2 0x1A92 JUMP JUMPDEST SWAP3 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 GT ISZERO PUSH2 0x11ED JUMPI DUP1 PUSH1 0x40 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 POP JUMPDEST PUSH2 0x11F7 DUP4 DUP6 PUSH2 0x1A54 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0xBC0E2D4F64F63E9C6B07A1665A26F689B20E42E836968119499DB41C2D315EFA SWAP1 PUSH2 0x126A SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP10 SWAP1 SWAP3 DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x12B0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x3 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x12C4 JUMPI PUSH2 0x12C4 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x6 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH1 0x1 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x12F2 JUMPI PUSH2 0x12F2 PUSH2 0x17A4 JUMP JUMPDEST EQ DUP1 PUSH2 0x130F JUMPI POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x130D JUMPI PUSH2 0x130D PUSH2 0x17A4 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x1317 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP7 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE DUP4 DUP6 ADD DUP9 DUP2 MSTORE PUSH0 DUP13 DUP2 MSTORE PUSH1 0x4 SWAP3 DUP4 SWAP1 MSTORE SWAP6 SWAP1 SWAP6 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD PUSH1 0x1 DUP5 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND PUSH4 0xFFFFFFFF NOT SWAP1 SWAP2 AND OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD PUSH1 0x2 SWAP2 DUP3 ADD SSTORE PUSH1 0x6 DUP5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x5 OR SWAP1 SSTORE TIMESTAMP SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x13AB JUMPI PUSH2 0x13AB PUSH20 0xBC10000000000000000000000000000000000002 DUP3 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH0 SWAP2 SWAP1 PUSH2 0x13BF SWAP1 PUSH2 0x1711 JUMP JUMPDEST DUP3 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 DUP4 CREATE2 SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x13DD JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE DUP8 SWAP1 PUSH32 0xB74F5DBF34AABE02F20FF775B898ACF1A9F70E4FBD48AD50548ACAE86E1CCD78 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xBC10000000000000000000000000000000001000 EQ PUSH2 0x1464 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4CA88867 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1478 JUMPI PUSH2 0x1478 PUSH2 0x19E1 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x6 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH1 0x1 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x14A6 JUMPI PUSH2 0x14A6 PUSH2 0x17A4 JUMP JUMPDEST EQ DUP1 PUSH2 0x14C3 JUMPI POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x14C1 JUMPI PUSH2 0x14C1 PUSH2 0x17A4 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x14CB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x6 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x3 OR SWAP1 SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x829A8683C544AD289CE92D3CE06E9EBAD69B18A6916E60EC766C2C217461D8E9 SWAP1 PUSH0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1517 PUSH2 0x1689 JUMP JUMPDEST PUSH0 DUP2 PUSH2 0xFFFF AND GT PUSH2 0x156A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964207468726F74746C652073657474696E670000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xE536F709E7276119FF965216F1BBD671EF9EA99059743501129A0C9BEC5D37ED SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x15BC PUSH2 0x1689 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15E5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH2 0x15EE DUP2 PUSH2 0x16B5 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1614 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x165D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1662 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1684 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAF8 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 PUSH2 0x1C1A DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1744 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x175B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1775 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x178B JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x179B PUSH1 0x20 DUP5 ADD PUSH2 0x1762 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP2 MSTORE DUP7 PUSH1 0x20 DUP3 ADD MSTORE DUP6 PUSH1 0x40 DUP3 ADD MSTORE DUP5 PUSH1 0x60 DUP3 ADD MSTORE DUP4 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 DUP4 MLOAD DUP1 PUSH1 0xE0 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP7 ADD PUSH2 0x100 DUP6 ADD MCOPY PUSH0 PUSH2 0x100 DUP3 DUP6 ADD ADD MSTORE PUSH2 0x100 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP PUSH1 0x6 DUP4 LT PUSH2 0x182D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 PUSH1 0xC0 DUP4 ADD MSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1775 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1861 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x186A DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1886 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18A3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18B9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x18C9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x18F0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP5 POP SWAP3 POP PUSH2 0x1904 SWAP1 DUP6 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x191E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x179B PUSH1 0x20 DUP5 ADD PUSH2 0x183F JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1775 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1957 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x1967 PUSH1 0x20 DUP7 ADD PUSH2 0x1762 JUMP JUMPDEST SWAP3 POP PUSH2 0x1975 PUSH1 0x40 DUP7 ADD PUSH2 0x192E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1998 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x1975 PUSH1 0x40 DUP7 ADD PUSH2 0x1762 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19BF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1744 DUP3 PUSH2 0x183F JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D8 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1744 DUP3 PUSH2 0x192E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x498 JUMPI PUSH2 0x498 PUSH2 0x19F5 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A30 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A4E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x498 JUMPI PUSH2 0x498 PUSH2 0x19F5 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x498 JUMPI PUSH2 0x498 PUSH2 0x19F5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0x1AA0 JUMPI PUSH2 0x1AA0 PUSH2 0x1A7E JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1AB3 JUMPI PUSH2 0x1AB3 PUSH2 0x1A7E JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1684 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1AF1 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1B10 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1AFD JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B31 JUMPI PUSH2 0x1B31 PUSH2 0x1AB8 JUMP JUMPDEST PUSH2 0x1B45 DUP2 PUSH2 0x1B3F DUP5 SLOAD PUSH2 0x1A1C JUMP JUMPDEST DUP5 PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1B77 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x1B60 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x1B10 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1BA6 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1B86 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x1BC3 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFFFF DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE DUP2 PUSH1 0x80 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0xA0 DUP4 ADD CALLDATACOPY PUSH0 DUP2 DUP4 ADD PUSH1 0xA0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE ADDRESS SELFDESTRUCT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"611:9708:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10053:264;;;;;;;;;;-1:-1:-1;10053:264:23;;;;;:::i;:::-;;:::i;:::-;;;470:14:34;;463:22;445:41;;433:2;418:18;10053:264:23;;;;;;;;879:54;;;;;;;;;;-1:-1:-1;879:54:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;928:25:34;;;1001:10;989:23;;;984:2;969:18;;962:51;1029:18;;;1022:34;916:2;901:18;879:54:23;728:334:34;2810:230:23;;;;;;;;;;-1:-1:-1;2810:230:23;;;;;:::i;:::-;;:::i;7101:574::-;;;;;;;;;;-1:-1:-1;7101:574:23;;;;;:::i;:::-;;:::i;:::-;;810:31;;;;;;;;;;-1:-1:-1;810:31:23;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;2293:101:0:-;;;;;;;;;;;;;:::i;5720:561:23:-;;;;;;;;;;-1:-1:-1;5720:561:23;;;;;:::i;:::-;;:::i;728:18::-;;;;;;;;;;-1:-1:-1;728:18:23;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;728:18:23;;;;;-1:-1:-1;;;728:18:23;;;;;-1:-1:-1;;;728:18:23;;;;;;-1:-1:-1;;;728:18:23;;;;;;;;;3079:6:34;3067:19;;;3049:38;;3123:19;;;3118:2;3103:18;;3096:47;3191:18;3179:31;;;3159:18;;;3152:59;3247:19;;;3242:2;3227:18;;3220:47;3304:31;;;3298:3;3283:19;;3276:60;3373:19;;;;3367:3;3352:19;;3345:48;3430:31;;;3424:3;3409:19;;3402:60;3036:3;3021:19;728:18:23;2748:720:34;9382:465:23;;;;;;;;;;-1:-1:-1;9382:465:23;;;;;:::i;:::-;;:::i;1638:85:0:-;;;;;;;;;;-1:-1:-1;1684:7:0;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:0;;;4144:74:34;;4132:2;4117:18;1638:85:0;3998:226:34;3237:1359:23;;;;;;:::i;:::-;;:::i;4754:854::-;;;;;;;;;;-1:-1:-1;4754:854:23;;;;;:::i;:::-;;:::i;8923:453::-;;;;;;;;;;-1:-1:-1;8923:453:23;;;;;:::i;:::-;;:::i;1828:838::-;;;;;;;;;;-1:-1:-1;1828:838:23;;;;;:::i;:::-;;:::i;:::-;;;6047:25:34;;;6035:2;6020:18;1828:838:23;5901:177:34;8032:885:23;;;;;;;;;;-1:-1:-1;8032:885:23;;;;;:::i;:::-;;:::i;6530:434::-;;;;;;;;;;-1:-1:-1;6530:434:23;;;;;:::i;:::-;;:::i;9853:194::-;;;;;;;;;;-1:-1:-1;9853:194:23;;;;;:::i;:::-;;:::i;2543:215:0:-;;;;;;;;;;-1:-1:-1;2543:215:0;;;;;:::i;:::-;;:::i;10053:264:23:-;10145:4;-1:-1:-1;;;;;;10180:31:23;;-1:-1:-1;;;10180:31:23;;:78;;-1:-1:-1;;;;;;;10227:31:23;;-1:-1:-1;;;10227:31:23;10180:78;:130;;;-1:-1:-1;;;;;;;10274:36:23;;-1:-1:-1;;;10274:36:23;10180:130;10161:149;10053:264;-1:-1:-1;;10053:264:23:o;2810:230::-;2915:4;2931:19;2980:5;2987:6;2963:31;;;;;;;;7162:19:34;;;7237:3;7215:16;-1:-1:-1;;;;;;7211:43:34;7206:2;7197:12;;7190:65;7280:2;7271:12;;7007:282;2963:31:23;;;;;;;-1:-1:-1;;2963:31:23;;;;;;2953:42;;2963:31;2953:42;;;;3012:21;;;;:8;:21;;;;;;;;;2810:230;-1:-1:-1;;;;2810:230:23:o;7101:574::-;7150:29;7182:11;7194:4;7182:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;7235:25:23;7214:17;;;;;;:46;;;;;;;;:::i;:::-;;7210:95;;7283:11;;-1:-1:-1;;;7283:11:23;;;;;;;;;;;7210:95;7314:17;;;:45;;-1:-1:-1;;7314:45:23;7334:25;7314:45;;;7402:17;;-1:-1:-1;;;;;7402:17:23;7443:10;7434:19;;7430:71;;7476:14;;-1:-1:-1;;;7476:14:23;;;;;;;;;;;7430:71;7533:15;7510:20;;;:38;7626:14;;;;7606:17;;;;7590:51;;7606:34;;;:::i;:::-;-1:-1:-1;;;;;7590:15:23;;;;:51::i;:::-;7656:12;;7663:4;;7656:12;;;;;7140:535;;7101:574;:::o;810:31::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;810:31:23;;;;-1:-1:-1;810:31:23;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:31:23;;;;;;;-1:-1:-1;;810:31:23;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;5720:561:23:-;5770:29;5802:11;5814:4;5802:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;5855:24:23;5834:17;;;;;;:45;;;;;;;;:::i;:::-;;5830:94;;5902:11;;-1:-1:-1;;;5902:11:23;;;;;;;;;;;5830:94;5938:17;;-1:-1:-1;;;;;5938:17:23;5959:10;5938:31;5934:83;;5992:14;;-1:-1:-1;;;5992:14:23;;;;;;;;;;;5934:83;6072:5;:15;6049:20;;;;6072:15;;;;;6031:38;;:15;:38;:::i;:::-;:56;6027:113;;;6110:19;;-1:-1:-1;;;6110:19:23;;;;;;;;;;;6027:113;6173:15;6150:20;;;:38;6198:17;;;:46;;-1:-1:-1;;6198:46:23;6218:26;6198:46;;;6259:15;;6269:4;;6259:15;;-1:-1:-1;;6259:15:23;5760:521;5720:561;:::o;9382:465::-;1531:13:0;:11;:13::i;:::-;1200:3:23::1;9497;:19;;;9493:69;;;9539:12;;-1:-1:-1::0;;;9539:12:23::1;;;;;;;;;;;9493:69;9583:7;9576:4;:14;;;9572:64;;;9613:12;;-1:-1:-1::0;;;9613:12:23::1;;;;;;;;;;;9572:64;9656:1;9650:3;:7;;;:20;;;;-1:-1:-1::0;9661:9:23::1;::::0;::::1;::::0;9650:20:::1;9646:72;;;9693:14;;-1:-1:-1::0;;;9693:14:23::1;;;;;;;;;;;9646:72;9728:5;:27:::0;;9765:29;;-1:-1:-1;;;9728:27:23::1;::::0;::::1;::::0;;::::1;9765:29:::0;;;;;;-1:-1:-1;;;9765:29:23::1;::::0;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;9809:31:::1;::::0;;8376:38:34;;;8445:2;8430:18;;8423:59;;;;9809:31:23::1;::::0;8349:18:34;9809:31:23::1;;;;;;;;9382:465:::0;;:::o;3237:1359::-;3360:22;3391:9;;3360:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3415:16:23;;3360:41;;-1:-1:-1;;3434:2:23;3415:21;;;;-1:-1:-1;3415:21:23;:46;;;3459:2;3440:9;:16;:21;3415:46;3411:100;;;3484:16;;-1:-1:-1;;;3484:16:23;;;;;;;;;;;3411:100;3583:22;;;;;;;;3600:5;3583:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3583:22:23;;;;;;;;;;-1:-1:-1;;;3583:22:23;;;;;;;;-1:-1:-1;;;3583:22:23;;;;;;;;;-1:-1:-1;;;3583:22:23;;;;;;;;;;3538:9;;3521:14;;3583:22;3619:21;3615:229;;1200:3;3672:1;:17;;;3663:26;;:6;:26;;;;:::i;:::-;3662:44;;;;:::i;:::-;3656:50;;3730:1;:18;;;3724:24;;:3;:24;3720:87;;;3774:1;:18;;;3768:24;;;;3720:87;3820:13;3830:3;3820:13;;:::i;:::-;;;3615:229;3877:12;3892:16;1003:7;3892:6;:16;:::i;:::-;3877:31;-1:-1:-1;3922:8:23;;3918:78;;3946:11;3953:4;3946:11;;:::i;:::-;;-1:-1:-1;3971:14:23;3981:4;3971:14;;:::i;:::-;;;3918:78;4028:1;4014:11;:15;;;4006:44;;;;-1:-1:-1;;;4006:44:23;;9242:2:34;4006:44:23;;;9224:21:34;9281:2;9261:18;;;9254:30;9320:18;9300;;;9293:46;9356:18;;4006:44:23;;;;;;;;;1003:7;4077:24;1117:3;4077:24;;;;:::i;:::-;:34;;;;:::i;:::-;4068:6;:43;4060:68;;;;-1:-1:-1;;;4060:68:23;;9587:2:34;4060:68:23;;;9569:21:34;9626:2;9606:18;;;9599:30;-1:-1:-1;;;9645:18:34;;;9638:42;9697:18;;4060:68:23;9385:336:34;4060:68:23;4139:10;4152:11;:18;;;;4139:31;;4180:11;4210:292;;;;;;;;4247:10;-1:-1:-1;;;;;4210:292:23;;;;;4283:6;4210:292;;;;4312:3;4210:292;;;;4345:11;4210:292;;;;;;4385:15;4210:292;;;;4428:9;;4210:292;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4210:292:23;;;-1:-1:-1;;4463:24:23;4210:292;;;;;;;4180:332;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4180:332:23;-1:-1:-1;;;;;4180:332:23;;;;;;;;;-1:-1:-1;4180:332:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4180:332:23;;;;;;;;;-1:-1:-1;;4180:332:23;;;;;;;;;;;:::i;:::-;;;;;;;;4541:10;-1:-1:-1;;;;;4528:61:23;4537:2;4528:61;4553:6;4561:3;4566:11;4579:9;;4528:61;;;;;;;;;;:::i;:::-;;;;;;;;3350:1246;;;;;;3237:1359;;;:::o;4754:854::-;4838:29;4870:11;4882:4;4870:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;4923:24:23;4902:17;;;;;;:45;;;;;;;;:::i;:::-;;4898:94;;4970:11;;-1:-1:-1;;;4970:11:23;;;;;;;;;;;4898:94;5006:17;;-1:-1:-1;;;;;5006:17:23;5027:10;5006:31;5002:83;;5060:14;;-1:-1:-1;;;5060:14:23;;;;;;;;;;;5002:83;5140:5;:15;5117:20;;;;5140:15;;;;;5099:38;;:15;:38;:::i;:::-;:56;5095:113;;;5178:19;;-1:-1:-1;;;5178:19:23;;;;;;;;;;;5095:113;5253:10;:21;;;5239:11;:35;;;5218:127;;;;-1:-1:-1;;;5218:127:23;;12809:2:34;5218:127:23;;;12791:21:34;12848:2;12828:18;;;12821:30;12887:34;12867:18;;;12860:62;12958:15;12938:18;;;12931:43;12991:19;;5218:127:23;12607:409:34;5218:127:23;1003:7;5397:24;1117:3;5397:24;;;;:::i;:::-;:34;;;;:::i;:::-;5377:10;:17;;;:54;5356:113;;;;-1:-1:-1;;;5356:113:23;;9587:2:34;5356:113:23;;;9569:21:34;9626:2;9606:18;;;9599:30;-1:-1:-1;;;9645:18:34;;;9638:42;9697:18;;5356:113:23;9385:336:34;5356:113:23;5480:35;;;:21;;;:35;;;5548:15;5525:20;;;:38;5579:22;;13166:38:34;;;5583:4:23;;5579:22;;13154:2:34;13139:18;5579:22:23;;;;;;;4828:780;4754:854;;:::o;8923:453::-;1531:13:0;:11;:13::i;:::-;1200:3:23::1;9035;:19;;;9031:69;;;9077:12;;-1:-1:-1::0;;;9077:12:23::1;;;;;;;;;;;9031:69;9121:7;9114:4;:14;;;9110:64;;;9151:12;;-1:-1:-1::0;;;9151:12:23::1;;;;;;;;;;;9110:64;9194:1;9188:3;:7;;;:20;;;;-1:-1:-1::0;9199:9:23::1;::::0;::::1;::::0;9188:20:::1;9184:72;;;9231:14;;-1:-1:-1::0;;;9231:14:23::1;;;;;;;;;;;9184:72;9266:5;:24:::0;;-1:-1:-1;;9300:26:23;9266:24;::::1;::::0;::::1;::::0;;::::1;-1:-1:-1::0;;9300:26:23;;;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;9341:28:::1;::::0;;8376:38:34;;;8445:2;8430:18;;8423:59;;;;9341:28:23::1;::::0;8349:18:34;9341:28:23::1;8206:282:34::0;1828:838:23;1986:11;224:10:31;125:42:29;224:30:31;220:82;;277:14;;-1:-1:-1;;;277:14:31;;;;;;;;;;;220:82;2009:19:23::1;2058:5;2065:6;2041:31;;;;;;;;7162:19:34::0;;;7237:3;7215:16;-1:-1:-1;;;;;;7211:43:34;7206:2;7197:12;;7190:65;7280:2;7271:12;;7007:282;2041:31:23::1;;::::0;;-1:-1:-1;;2041:31:23;;::::1;::::0;;;;;;2031:42;;2041:31:::1;2031:42:::0;;::::1;::::0;2092:21:::1;::::0;;;:8:::1;:21:::0;;;;;;2031:42;;-1:-1:-1;2092:21:23::1;;2091:22;2083:45;;;::::0;-1:-1:-1;;;2083:45:23;;13417:2:34;2083:45:23::1;::::0;::::1;13399:21:34::0;13456:2;13436:18;;;13429:30;13495:12;13475:18;;;13468:40;13525:18;;2083:45:23::1;13215:334:34::0;2083:45:23::1;2157:1;2147:7;:11;:37;;;;-1:-1:-1::0;2162:17:23::1;1003:7;2162::::0;:17:::1;:::i;:::-;:22:::0;2147:37:::1;2139:64;;;::::0;-1:-1:-1;;;2139:64:23;;13756:2:34;2139:64:23::1;::::0;::::1;13738:21:34::0;13795:2;13775:18;;;13768:30;13834:16;13814:18;;;13807:44;13868:18;;2139:64:23::1;13554:338:34::0;2139:64:23::1;2214:22;::::0;;::::1;::::0;::::1;::::0;;2231:5:::1;2214:22:::0;::::1;::::0;;::::1;::::0;;;;::::1;::::0;::::1;;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;-1:-1:-1;;;2214:22:23;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2214:22:23;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2214:22:23;::::1;::::0;;::::1;::::0;;;;-1:-1:-1;;;2214:22:23;;::::1;::::0;;::::1;::::0;;;;;2250:18;2246:219:::1;;1200:3;2301:1;:14;;;2291:24;;:7;:24;;;;:::i;:::-;2290:42;;;;:::i;:::-;2284:48;;2356:1;:15;;;2350:21;;:3;:21;2346:81;;;2397:1;:15;;;2391:21;;;;2346:81;2440:14;2451:3:::0;2440:14;::::1;:::i;:::-;;;2246:219;2475:21;::::0;;;:8:::1;:21;::::0;;;;;;:28;;-1:-1:-1;;2475:28:23::1;2499:4;2475:28;::::0;;2518:45;2535:7;;-1:-1:-1;;;;;2518:45:23;::::1;::::0;::::1;::::0;::::1;::::0;2544:5;;2551:6;;2559:3;;928:25:34;;;1001:10;989:23;;;;984:2;969:18;;962:51;1044:2;1029:18;;1022:34;916:2;901:18;;728:334;2518:45:23::1;;;;;;;;2649:10;;1828:838:::0;;;;;;:::o;8032:885::-;224:10:31;125:42:29;224:30:31;220:82;;277:14;;-1:-1:-1;;;277:14:31;;;;;;;;;;;220:82;8178:29:23::1;8210:11;8222:4;8210:17;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;;8264;::::0;::::1;::::0;8210;;-1:-1:-1;8264:17:23::1;;::::0;8312:6:::1;:34;;;;;;;;:::i;:::-;;:90;;;-1:-1:-1::0;8376:26:23::1;8366:6;:36;;;;;;;;:::i;:::-;;8312:90;8291:121;;;::::0;::::1;;8440:33;::::0;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;;::::0;;::::1;::::0;;;;;;;;;-1:-1:-1;8423:14:23;;;:8:::1;:14:::0;;;;;;;;:50;;;;;;::::1;::::0;::::1;::::0;;;;;::::1;-1:-1:-1::0;;8423:50:23;;::::1;;::::0;;;;;::::1;::::0;;::::1;::::0;8483:17:::1;::::0;::::1;:41:::0;;-1:-1:-1;;8483:41:23::1;8503:21;8483:41;::::0;;8557:15:::1;8534:20:::0;;::::1;:38:::0;;;;8627:14;::::1;::::0;8655:7;;8651:88:::1;;8678:50;452:42:30;8724:3:23::0;8678:45:::1;:50::i;:::-;8818:17;::::0;::::1;::::0;8800:58:::1;::::0;8851:3:::1;::::0;8818:17;8800:58:::1;::::0;::::1;:::i;:::-;;;;;;;;;;;::::0;-1:-1:-1;;8800:58:23;::::1;::::0;::::1;;;;;::::0;::::1;;;;;-1:-1:-1::0;;8874:36:23::1;::::0;;928:25:34;;;1001:10;989:23;;984:2;969:18;;962:51;1029:18;;;1022:34;;;8879:4:23;;8874:36:::1;::::0;916:2:34;901:18;8874:36:23::1;;;;;;;8168:749;;;8032:885:::0;;;;:::o;6530:434::-;224:10:31;125:42:29;224:30:31;220:82;;277:14;;-1:-1:-1;;;277:14:31;;;;;;;;;;;220:82;6592:29:23::1;6624:11;6636:4;6624:17;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;;6677;::::0;::::1;::::0;6624;;-1:-1:-1;6677:17:23::1;;::::0;6725:6:::1;:34;;;;;;;;:::i;:::-;;:90;;;-1:-1:-1::0;6789:26:23::1;6779:6;:36;;;;;;;;:::i;:::-;;6725:90;6704:121;;;::::0;::::1;;6835:17;::::0;::::1;:45:::0;;-1:-1:-1;;6835:45:23::1;6855:25;6835:45;::::0;;6913:15:::1;6890:20;::::0;::::1;:38:::0;6943:14:::1;::::0;6952:4;;6943:14:::1;::::0;-1:-1:-1;;6943:14:23::1;6582:382;;6530:434:::0;:::o;9853:194::-;1531:13:0;:11;:13::i;:::-;9941:1:23::1;9934:4;:8;;;9926:45;;;::::0;-1:-1:-1;;;9926:45:23;;14099:2:34;9926:45:23::1;::::0;::::1;14081:21:34::0;14138:2;14118:18;;;14111:30;14177:26;14157:18;;;14150:54;14221:18;;9926:45:23::1;13897:348:34::0;9926:45:23::1;9981:5;:22:::0;;-1:-1:-1;;9981:22:23::1;;::::0;::::1;::::0;;::::1;::::0;;;10018::::1;::::0;13166:38:34;;;10018:22:23::1;::::0;13154:2:34;13139:18;10018:22:23::1;;;;;;;9853:194:::0;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;4144:74:34::0;4117:18;;2672:31:0::1;3998:226:34::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1531:331:9:-;1640:6;1616:21;:30;1612:109;;;1669:41;;-1:-1:-1;;;1669:41:9;;1704:4;1669:41;;;4144:74:34;4117:18;;1669:41:9;3998:226:34;1612:109:9;1732:12;1750:9;-1:-1:-1;;;;;1750:14:9;1772:6;1750:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1731:52;;;1798:7;1793:63;;1828:17;;-1:-1:-1;;;1828:17:9;;;;;;;;;;;1793:63;1602:260;1531:331;;:::o;1796:162:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:10;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:10;1901:40:0;;;4144:74:34;4117:18;;1901:40:0;3998:226:34;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;-1:-1:-1:-;;;;;;;;:::o;14:286:34:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:34;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:34:o;497:226::-;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;670:23:34;;497:226;-1:-1:-1;497:226:34:o;1067:163::-;1134:20;;1194:10;1183:22;;1173:33;;1163:61;;1220:1;1217;1210:12;1163:61;1067:163;;;:::o;1235:298::-;1302:6;1310;1363:2;1351:9;1342:7;1338:23;1334:32;1331:52;;;1379:1;1376;1369:12;1331:52;1424:23;;;-1:-1:-1;1490:37:34;1523:2;1508:18;;1490:37;:::i;:::-;1480:47;;1235:298;;;;;:::o;1538:127::-;1599:10;1594:3;1590:20;1587:1;1580:31;1630:4;1627:1;1620:15;1654:4;1651:1;1644:15;1670:1073;-1:-1:-1;;;;;2010:6:34;2006:55;1995:9;1988:74;2098:6;2093:2;2082:9;2078:18;2071:34;2141:6;2136:2;2125:9;2121:18;2114:34;2184:6;2179:2;2168:9;2164:18;2157:34;2228:6;2222:3;2211:9;2207:19;2200:35;2272:3;2266;2255:9;2251:19;2244:32;1969:4;2305:6;2299:13;2349:6;2343:3;2332:9;2328:19;2321:35;2409:6;2404:2;2396:6;2392:15;2386:3;2375:9;2371:19;2365:51;2466:1;2460:3;2451:6;2440:9;2436:22;2432:32;2425:43;2536:3;2529:2;2525:7;2520:2;2512:6;2508:15;2504:29;2493:9;2489:45;2485:55;2477:63;;;2570:1;2562:6;2559:13;2549:144;;2615:10;2610:3;2606:20;2603:1;2596:31;2650:4;2647:1;2640:15;2678:4;2675:1;2668:15;2549:144;2730:6;2724:3;2713:9;2709:19;2702:35;1670:1073;;;;;;;;;;:::o;3473:159::-;3540:20;;3600:6;3589:18;;3579:29;;3569:57;;3622:1;3619;3612:12;3637:356;3703:6;3711;3764:2;3752:9;3743:7;3739:23;3735:32;3732:52;;;3780:1;3777;3770:12;3732:52;3803:28;3821:9;3803:28;:::i;:::-;3793:38;;3881:2;3870:9;3866:18;3853:32;3925:18;3918:5;3914:30;3907:5;3904:41;3894:69;;3959:1;3956;3949:12;3894:69;3982:5;3972:15;;;3637:356;;;;;:::o;4229:665::-;4308:6;4316;4324;4377:2;4365:9;4356:7;4352:23;4348:32;4345:52;;;4393:1;4390;4383:12;4345:52;4433:9;4420:23;4466:18;4458:6;4455:30;4452:50;;;4498:1;4495;4488:12;4452:50;4521:22;;4574:4;4566:13;;4562:27;-1:-1:-1;4552:55:34;;4603:1;4600;4593:12;4552:55;4643:2;4630:16;4669:18;4661:6;4658:30;4655:50;;;4701:1;4698;4691:12;4655:50;4748:7;4741:4;4732:6;4728:2;4724:15;4720:26;4717:39;4714:59;;;4769:1;4766;4759:12;4714:59;4800:4;4792:13;;;;-1:-1:-1;4824:6:34;-1:-1:-1;4849:39:34;;4867:20;;4849:39;:::i;:::-;4839:49;;4229:665;;;;;:::o;4899:298::-;4966:6;4974;5027:2;5015:9;5006:7;5002:23;4998:32;4995:52;;;5043:1;5040;5033:12;4995:52;5088:23;;;-1:-1:-1;5154:37:34;5187:2;5172:18;;5154:37;:::i;5202:196::-;5270:20;;-1:-1:-1;;;;;5319:54:34;;5309:65;;5299:93;;5388:1;5385;5378:12;5403:493;5488:6;5496;5504;5512;5565:3;5553:9;5544:7;5540:23;5536:33;5533:53;;;5582:1;5579;5572:12;5533:53;5627:23;;;-1:-1:-1;5693:37:34;5726:2;5711:18;;5693:37;:::i;:::-;5683:47;;5749:38;5783:2;5772:9;5768:18;5749:38;:::i;:::-;5403:493;;;;-1:-1:-1;5739:48:34;;5860:2;5845:18;5832:32;;-1:-1:-1;;5403:493:34:o;6083:539::-;6168:6;6176;6184;6192;6245:3;6233:9;6224:7;6220:23;6216:33;6213:53;;;6262:1;6259;6252:12;6213:53;6307:23;;;-1:-1:-1;6427:2:34;6412:18;;6399:32;;-1:-1:-1;6476:37:34;6509:2;6494:18;;6476:37;:::i;6627:184::-;6685:6;6738:2;6726:9;6717:7;6713:23;6709:32;6706:52;;;6754:1;6751;6744:12;6706:52;6777:28;6795:9;6777:28;:::i;6816:186::-;6875:6;6928:2;6916:9;6907:7;6903:23;6899:32;6896:52;;;6944:1;6941;6934:12;6896:52;6967:29;6986:9;6967:29;:::i;7294:127::-;7355:10;7350:3;7346:20;7343:1;7336:31;7386:4;7383:1;7376:15;7410:4;7407:1;7400:15;7426:127;7487:10;7482:3;7478:20;7475:1;7468:31;7518:4;7515:1;7508:15;7542:4;7539:1;7532:15;7558:125;7623:9;;;7644:10;;;7641:36;;;7657:18;;:::i;7688:380::-;7767:1;7763:12;;;;7810;;;7831:61;;7885:4;7877:6;7873:17;7863:27;;7831:61;7938:2;7930:6;7927:14;7907:18;7904:38;7901:161;;7984:10;7979:3;7975:20;7972:1;7965:31;8019:4;8016:1;8009:15;8047:4;8044:1;8037:15;7901:161;;7688:380;;;:::o;8073:128::-;8140:9;;;8161:11;;;8158:37;;;8175:18;;:::i;8493:168::-;8566:9;;;8597;;8614:15;;;8608:22;;8594:37;8584:71;;8635:18;;:::i;8666:127::-;8727:10;8722:3;8718:20;8715:1;8708:31;8758:4;8755:1;8748:15;8782:4;8779:1;8772:15;8798:120;8838:1;8864;8854:35;;8869:18;;:::i;:::-;-1:-1:-1;8903:9:34;;8798:120::o;8923:112::-;8955:1;8981;8971:35;;8986:18;;:::i;:::-;-1:-1:-1;9020:9:34;;8923:112::o;9726:127::-;9787:10;9782:3;9778:20;9775:1;9768:31;9818:4;9815:1;9808:15;9842:4;9839:1;9832:15;9984:518;10086:2;10081:3;10078:11;10075:421;;;10122:5;10119:1;10112:16;10166:4;10163:1;10153:18;10236:2;10224:10;10220:19;10217:1;10213:27;10207:4;10203:38;10272:4;10260:10;10257:20;10254:47;;;-1:-1:-1;10295:4:34;10254:47;10350:2;10345:3;10341:12;10338:1;10334:20;10328:4;10324:31;10314:41;;10405:81;10423:2;10416:5;10413:13;10405:81;;;10482:1;10468:16;;10449:1;10438:13;10405:81;;;10409:3;;9984:518;;;:::o;10678:1299::-;10804:3;10798:10;10831:18;10823:6;10820:30;10817:56;;;10853:18;;:::i;:::-;10882:97;10972:6;10932:38;10964:4;10958:11;10932:38;:::i;:::-;10926:4;10882:97;:::i;:::-;11028:4;11059:2;11048:14;;11076:1;11071:649;;;;11764:1;11781:6;11778:89;;;-1:-1:-1;11833:19:34;;;11827:26;11778:89;-1:-1:-1;;10635:1:34;10631:11;;;10627:24;10623:29;10613:40;10659:1;10655:11;;;10610:57;11880:81;;11041:930;;11071:649;9931:1;9924:14;;;9968:4;9955:18;;-1:-1:-1;;11107:20:34;;;11225:222;11239:7;11236:1;11233:14;11225:222;;;11321:19;;;11315:26;11300:42;;11428:4;11413:20;;;;11381:1;11369:14;;;;11255:12;11225:222;;;11229:3;11475:6;11466:7;11463:19;11460:201;;;11536:19;;;11530:26;-1:-1:-1;;11619:1:34;11615:14;;;11631:3;11611:24;11607:37;11603:42;11588:58;11573:74;;11460:201;-1:-1:-1;;;;11707:1:34;11691:14;;;11687:22;11674:36;;-1:-1:-1;10678:1299:34:o;11982:620::-;12224:6;12213:9;12206:25;12267:6;12262:2;12251:9;12247:18;12240:34;12322:6;12314;12310:19;12305:2;12294:9;12290:18;12283:47;12366:3;12361:2;12350:9;12346:18;12339:31;12407:6;12401:3;12390:9;12386:19;12379:35;12465:6;12457;12451:3;12440:9;12436:19;12423:49;12522:1;12492:22;;;12516:3;12488:32;;;12481:43;;;;12585:2;12564:15;;;-1:-1:-1;;12560:29:34;12545:45;12541:55;;11982:620;-1:-1:-1;;;;11982:620:34:o"},"methodIdentifiers":{"cancel1(uint256)":"84a64c12","cancel2(uint256)":"c19dd320","deposit(bytes32,uint32,address,uint256)":"b55ada39","isDeposited(bytes32,uint32)":"1ccc92c7","owner()":"8da5cb5b","paid(uint256,bytes32,uint32,uint256)":"b670ab5e","param()":"883d87b1","receipts(uint256)":"0f7ee1ec","refund(uint256)":"278ecde1","renounceOwnership()":"715018a6","replaceByFee(uint256,uint16)":"b3dd64dd","setDepositTax(uint16,uint64)":"b3f33eda","setRateLimit(uint16)":"d653d820","setWithdrawalTax(uint16,uint64)":"8aa4af89","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","withdraw(string,uint16)":"a81de869","withdrawals(uint256)":"5cc07076"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedTax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Canceling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"DepositTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxPrice\",\"type\":\"uint256\"}],\"name\":\"RBF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"RateLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"WithdrawalTaxUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wid\",\"type\":\"uint256\"}],\"name\":\"cancel1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wid\",\"type\":\"uint256\"}],\"name\":\"cancel2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_txout\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_txout\",\"type\":\"uint32\"}],\"name\":\"isDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wid\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_txout\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"}],\"name\":\"paid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"param\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rateLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"depositTaxBP\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"maxDepositTax\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"withdrawalTaxBP\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"maxWithdrawalTax\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_res1\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_res2\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wid\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wid\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_maxTxPrice\",\"type\":\"uint16\"}],\"name\":\"replaceByFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_bp\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_max\",\"type\":\"uint64\"}],\"name\":\"setDepositTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sec\",\"type\":\"uint16\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_bp\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_max\",\"type\":\"uint64\"}],\"name\":\"setWithdrawalTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_receiver\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_maxTxPrice\",\"type\":\"uint16\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"enum IBridge.WithdrawalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"cancel1(uint256)\":{\"params\":{\"_wid\":\"the withdrawal id\"}},\"cancel2(uint256)\":{\"params\":{\"_wid\":\"the withdrwal id\"}},\"deposit(bytes32,uint32,address,uint256)\":{\"params\":{\"_amount\":\"the deposit amount\",\"_target\":\"the depoist address\",\"_txid\":\"the txid(LE)\",\"_txout\":\"the txout\"}},\"isDeposited(bytes32,uint32)\":{\"params\":{\"_txid\":\"the txid(LE)\",\"_txout\":\"the txout index\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paid(uint256,bytes32,uint32,uint256)\":{\"params\":{\"_received\":\"the actual paid amount\",\"_txid\":\"the withdrawal txid(little endian)\",\"_txout\":\"the tx output index\",\"_wid\":\"withdrawal id\"}},\"refund(uint256)\":{\"params\":{\"_wid\":\"the withdrwal id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"replaceByFee(uint256,uint16)\":{\"params\":{\"_maxTxPrice\":\"the new max tx price\",\"_wid\":\"the withdrawal id\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(string,uint16)\":{\"params\":{\"_maxTxPrice\":\"the max allowed tx price in sat/vbyte\",\"_receiver\":\"the address to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancel1(uint256)\":{\"notice\":\"cancel1 cancels the withdrawal by origin user\"},\"cancel2(uint256)\":{\"notice\":\"cancel2 apporves the cancellation request by relayer relayer can pay the withdrawal to disregard the cancellation request relayer can reject a pending withdrawal as well\"},\"deposit(bytes32,uint32,address,uint256)\":{\"notice\":\"deposit adds balance to the target address goat performs the adding outside EVM to prevent any errors\"},\"isDeposited(bytes32,uint32)\":{\"notice\":\"isDeposited checks if the deposit is succeed\"},\"paid(uint256,bytes32,uint32,uint256)\":{\"notice\":\"paid finalizes the withdrawal request and burns the withdrawal amount from network It aslo transfers the tax to GF address if the tax is enabled\"},\"refund(uint256)\":{\"notice\":\"refund refunds the amount of the canceled withdrawal to the origin user\"},\"replaceByFee(uint256,uint16)\":{\"notice\":\"replaceByFee updates the withdrawal tx price\"},\"withdraw(string,uint16)\":{\"notice\":\"withdraw initializes a new withdrawal request by a user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: Business Source License 1.1\\npragma solidity ^0.8.24;\\n\\nimport {Burner} from \\\"../library/utils/Burner.sol\\\";\\nimport {BaseAccess} from \\\"../library/utils/BaseAccess.sol\\\";\\nimport {PreDeployedAddresses} from \\\"../library/constants/Predeployed.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IBridge} from \\\"../interfaces/bridge/Bridge.sol\\\";\\nimport {IBridgeParam} from \\\"../interfaces/bridge/BridgeParam.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ncontract Bridge is Ownable, BaseAccess, IBridge, IBridgeParam, IERC165 {\\n    using Address for address payable;\\n\\n    Param public param;\\n\\n    mapping(bytes32 txh => bool yes) internal deposits;\\n\\n    Withdrawal[] public withdrawals;\\n\\n    // the withdrawal receipts\\n    mapping(uint256 id => Receipt receipt) public receipts;\\n\\n    // 1 satoshi = 10 gwei\\n    uint256 internal constant satoshi = 10 gwei;\\n\\n    // 2 p2wsh input + 1 p2tr/p2wsh output + 1 change output\\n    uint256 internal constant baseTxSize = 300;\\n\\n    // the max tax base points\\n    uint256 internal constant maxBasePoints = 1e4;\\n\\n    // It is only for testing\\n    constructor(address owner) Ownable(owner) {\\n        param = Param({\\n            rateLimit: 300,\\n            depositTaxBP: 0,\\n            maxDepositTax: 0,\\n            withdrawalTaxBP: 20,\\n            maxWithdrawalTax: 2_000_000 gwei, // 0.002\\n            _res1: 0,\\n            _res2: 0\\n        });\\n    }\\n\\n    /**\\n     * deposit adds balance to the target address\\n     * goat performs the adding outside EVM to prevent any errors\\n     * @param _txid the txid(LE)\\n     * @param _txout the txout\\n     * @param _target the depoist address\\n     * @param _amount the deposit amount\\n     */\\n    function deposit(\\n        bytes32 _txid,\\n        uint32 _txout,\\n        address _target,\\n        uint256 _amount\\n    ) external override OnlyRelayer returns (uint256 tax) {\\n        bytes32 depositHash = keccak256(abi.encodePacked(_txid, _txout));\\n        require(!deposits[depositHash], \\\"duplicated\\\");\\n\\n        require(_amount > 0 && _amount % satoshi == 0, \\\"invalid amount\\\");\\n\\n        Param memory p = param;\\n        if (p.depositTaxBP > 0) {\\n            tax = (_amount * p.depositTaxBP) / maxBasePoints;\\n            if (tax > p.maxDepositTax) {\\n                tax = p.maxDepositTax;\\n            }\\n            _amount -= tax;\\n        }\\n\\n        deposits[depositHash] = true;\\n        emit Deposit(_target, _amount, _txid, _txout, tax);\\n\\n        // Add balance to the _target and pay the tax to GF in the runtime\\n        return tax;\\n    }\\n\\n    /**\\n     * isDeposited checks if the deposit is succeed\\n     * @param _txid the txid(LE)\\n     * @param _txout the txout index\\n     */\\n    function isDeposited(\\n        bytes32 _txid,\\n        uint32 _txout\\n    ) external view override returns (bool) {\\n        bytes32 depositHash = keccak256(abi.encodePacked(_txid, _txout));\\n        return deposits[depositHash];\\n    }\\n\\n    /**\\n     * withdraw initializes a new withdrawal request by a user\\n     * @param _receiver the address to withdraw\\n     * @param _maxTxPrice the max allowed tx price in sat/vbyte\\n     */\\n    function withdraw(\\n        string calldata _receiver,\\n        uint16 _maxTxPrice\\n    ) external payable override {\\n        bytes memory addrBytes = bytes(_receiver);\\n        if (addrBytes.length < 34 || addrBytes.length > 90) {\\n            revert InvalidAddress();\\n        }\\n\\n        uint256 amount = msg.value;\\n        uint256 tax = 0;\\n\\n        Param memory p = param;\\n        if (p.withdrawalTaxBP > 0) {\\n            tax = (amount * p.withdrawalTaxBP) / maxBasePoints;\\n            if (tax > p.maxWithdrawalTax) {\\n                tax = p.maxWithdrawalTax;\\n            }\\n            amount -= tax;\\n        }\\n\\n        // dust as tax\\n        uint256 dust = amount % satoshi;\\n        if (dust > 0) {\\n            tax += dust;\\n            amount -= dust;\\n        }\\n\\n        require(_maxTxPrice > 0, \\\"invalid tx price\\\");\\n        require(amount > _maxTxPrice * baseTxSize * satoshi, \\\"unaffordable\\\");\\n\\n        uint256 id = withdrawals.length;\\n        withdrawals.push(\\n            Withdrawal({\\n                sender: msg.sender,\\n                amount: amount,\\n                tax: tax,\\n                maxTxPrice: _maxTxPrice,\\n                updatedAt: block.timestamp,\\n                receiver: _receiver,\\n                status: WithdrawalStatus.Pending\\n            })\\n        );\\n\\n        emit Withdraw(id, msg.sender, amount, tax, _maxTxPrice, _receiver);\\n    }\\n\\n    /**\\n     * replaceByFee updates the withdrawal tx price\\n     * @param _wid the withdrawal id\\n     * @param _maxTxPrice the new max tx price\\n     */\\n    function replaceByFee(uint256 _wid, uint16 _maxTxPrice) external override {\\n        Withdrawal storage withdrawal = withdrawals[_wid];\\n\\n        if (withdrawal.status != WithdrawalStatus.Pending) {\\n            revert Forbidden();\\n        }\\n\\n        if (withdrawal.sender != msg.sender) {\\n            revert AccessDenied();\\n        }\\n\\n        if (block.timestamp - withdrawal.updatedAt < param.rateLimit) {\\n            revert RateLimitExceeded();\\n        }\\n\\n        require(\\n            _maxTxPrice > withdrawal.maxTxPrice,\\n            \\\"the new tx price should be larger than before\\\"\\n        );\\n\\n        require(\\n            withdrawal.amount > _maxTxPrice * baseTxSize * satoshi,\\n            \\\"unaffordable\\\"\\n        );\\n\\n        withdrawal.maxTxPrice = _maxTxPrice;\\n        withdrawal.updatedAt = block.timestamp;\\n\\n        emit RBF(_wid, _maxTxPrice);\\n    }\\n\\n    /**\\n     * cancel1 cancels the withdrawal by origin user\\n     * @param _wid the withdrawal id\\n     */\\n    function cancel1(uint256 _wid) external {\\n        Withdrawal storage withdrawal = withdrawals[_wid];\\n\\n        if (withdrawal.status != WithdrawalStatus.Pending) {\\n            revert Forbidden();\\n        }\\n\\n        if (withdrawal.sender != msg.sender) {\\n            revert AccessDenied();\\n        }\\n\\n        if (block.timestamp - withdrawal.updatedAt < param.rateLimit) {\\n            revert RateLimitExceeded();\\n        }\\n\\n        withdrawal.updatedAt = block.timestamp;\\n        withdrawal.status = WithdrawalStatus.Canceling;\\n        emit Canceling(_wid);\\n    }\\n\\n    /**\\n     * cancel2 apporves the cancellation request by relayer\\n     * relayer can pay the withdrawal to disregard the cancellation request\\n     * relayer can reject a pending withdrawal as well\\n     * @param _wid the withdrwal id\\n     */\\n    function cancel2(uint256 _wid) external OnlyRelayer {\\n        Withdrawal storage withdrawal = withdrawals[_wid];\\n        WithdrawalStatus status = withdrawal.status;\\n        require(\\n            status == WithdrawalStatus.Pending ||\\n                status == WithdrawalStatus.Canceling\\n        );\\n        withdrawal.status = WithdrawalStatus.Canceled;\\n        withdrawal.updatedAt = block.timestamp;\\n        emit Canceled(_wid);\\n    }\\n\\n    /**\\n     * refund refunds the amount of the canceled withdrawal to the origin user\\n     * @param _wid the withdrwal id\\n     */\\n    function refund(uint256 _wid) external {\\n        Withdrawal storage withdrawal = withdrawals[_wid];\\n\\n        if (withdrawal.status != WithdrawalStatus.Canceled) {\\n            revert Forbidden();\\n        }\\n        withdrawal.status = WithdrawalStatus.Refunded;\\n\\n        address payable owner = payable(withdrawal.sender);\\n        if (owner != msg.sender) {\\n            revert AccessDenied();\\n        }\\n        withdrawal.updatedAt = block.timestamp;\\n\\n        // refund to the owner\\n        owner.sendValue(withdrawal.amount + withdrawal.tax);\\n        emit Refund(_wid);\\n    }\\n\\n    /**\\n     * paid finalizes the withdrawal request and burns the withdrawal amount from network\\n     * It aslo transfers the tax to GF address if the tax is enabled\\n     * @param _wid withdrawal id\\n     * @param _txid the withdrawal txid(little endian)\\n     * @param _txout the tx output index\\n     * @param _received the actual paid amount\\n     */\\n    function paid(\\n        uint256 _wid,\\n        bytes32 _txid,\\n        uint32 _txout,\\n        uint256 _received\\n    ) external OnlyRelayer {\\n        Withdrawal storage withdrawal = withdrawals[_wid];\\n\\n        WithdrawalStatus status = withdrawal.status;\\n        require(\\n            status == WithdrawalStatus.Pending ||\\n                status == WithdrawalStatus.Canceling\\n        );\\n\\n        receipts[_wid] = Receipt(_txid, _txout, _received);\\n        withdrawal.status = WithdrawalStatus.Paid;\\n        withdrawal.updatedAt = block.timestamp;\\n\\n        // send the tax to GF\\n        uint256 tax = withdrawal.tax;\\n        if (tax > 0) {\\n            PreDeployedAddresses.GoatFoundation.sendValue(tax);\\n        }\\n\\n        // Burn the withdrawal amount from network\\n        new Burner{value: withdrawal.amount, salt: bytes32(0x0)}();\\n\\n        emit Paid(_wid, _txid, _txout, _received);\\n    }\\n\\n    function setDepositTax(\\n        uint16 _bp,\\n        uint64 _max\\n    ) external override onlyOwner {\\n        if (_bp > maxBasePoints) {\\n            revert TaxTooHigh();\\n        }\\n\\n        if (_max > 1 ether) {\\n            revert TaxTooHigh();\\n        }\\n\\n        if (_bp > 0 && _max == 0) {\\n            revert MalformedTax();\\n        }\\n\\n        param.depositTaxBP = _bp;\\n        param.maxDepositTax = _max;\\n        emit DepositTaxUpdated(_bp, _max);\\n    }\\n\\n    function setWithdrawalTax(\\n        uint16 _bp,\\n        uint64 _max\\n    ) external override onlyOwner {\\n        if (_bp > maxBasePoints) {\\n            revert TaxTooHigh();\\n        }\\n\\n        if (_max > 1 ether) {\\n            revert TaxTooHigh();\\n        }\\n\\n        if (_bp > 0 && _max == 0) {\\n            revert MalformedTax();\\n        }\\n\\n        param.withdrawalTaxBP = _bp;\\n        param.maxWithdrawalTax = _max;\\n        emit WithdrawalTaxUpdated(_bp, _max);\\n    }\\n\\n    function setRateLimit(uint16 _sec) external override onlyOwner {\\n        require(_sec > 0, \\\"invalid throttle setting\\\");\\n        param.rateLimit = _sec;\\n        emit RateLimitUpdated(_sec);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 id\\n    ) external view virtual override returns (bool) {\\n        return\\n            id == type(IERC165).interfaceId ||\\n            id == type(IBridge).interfaceId ||\\n            id == type(IBridgeParam).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xe6a70b4c6d8bcc35f02492758b86084be59952a55d09282e86e01c91bce96a9e\",\"license\":\"Business Source License 1.1\"},\"contracts/interfaces/bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IBridge {\\n    event Deposit(\\n        address indexed target,\\n        uint256 indexed amount,\\n        bytes32 txid,\\n        uint32 txout,\\n        uint256 tax\\n    );\\n\\n    event Withdraw(\\n        uint256 indexed id,\\n        address indexed from,\\n        uint256 amount,\\n        uint256 tax,\\n        uint256 maxTxPrice,\\n        string receiver\\n    );\\n\\n    event Canceling(uint256 indexed id);\\n\\n    event Canceled(uint256 indexed id);\\n\\n    event Refund(uint256 indexed id);\\n\\n    event RBF(uint256 indexed id, uint256 maxTxPrice);\\n\\n    event Paid(uint256 indexed id, bytes32 txid, uint32 txout, uint256 value);\\n\\n    enum WithdrawalStatus {\\n        Invalid,\\n        Pending,\\n        Canceling,\\n        Canceled,\\n        Refunded,\\n        Paid\\n    }\\n\\n    error RateLimitExceeded();\\n    error InvalidAddress();\\n\\n    struct Withdrawal {\\n        address sender;\\n        uint256 amount; // msg.value - tax\\n        uint256 tax; // tax for goat foundation\\n        uint256 maxTxPrice;\\n        uint256 updatedAt;\\n        string receiver;\\n        WithdrawalStatus status;\\n    }\\n\\n    // the payment receipt\\n    struct Receipt {\\n        bytes32 txid;\\n        uint32 txout;\\n        uint256 received;\\n    }\\n\\n    function isDeposited(\\n        bytes32 txid,\\n        uint32 txout\\n    ) external view returns (bool);\\n\\n    function deposit(\\n        bytes32 txid,\\n        uint32 txout,\\n        address target,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        string calldata receiver,\\n        uint16 maxTxPrice\\n    ) external payable;\\n\\n    function replaceByFee(uint256 id, uint16 maxTxPrice) external;\\n\\n    function cancel1(uint256 id) external;\\n\\n    function refund(uint256 id) external;\\n\\n    function cancel2(uint256 id) external;\\n\\n    function paid(\\n        uint256 id,\\n        bytes32 txid,\\n        uint32 txout,\\n        uint256 paid\\n    ) external;\\n}\\n\",\"keccak256\":\"0x44a12635312f8fa98159216ddb142cfe4959e280a73a4c56c11ebe28ae1df0d1\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/BridgeParam.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IBridgeParam {\\n    event DepositTaxUpdated(uint16 rate, uint64 max);\\n    event WithdrawalTaxUpdated(uint16 rate, uint64 max);\\n    event RateLimitUpdated(uint16);\\n\\n    struct Param {\\n        uint16 rateLimit;\\n        uint16 depositTaxBP;\\n        uint64 maxDepositTax;\\n        uint16 withdrawalTaxBP;\\n        uint64 maxWithdrawalTax;\\n        uint16 _res1;\\n        uint64 _res2;\\n    }\\n\\n    error TaxTooHigh();\\n\\n    error MalformedTax();\\n\\n    function setDepositTax(uint16 bp, uint64 max) external;\\n\\n    function setWithdrawalTax(uint16 bp, uint64 max) external;\\n\\n    function setRateLimit(uint16 sec) external;\\n}\\n\",\"keccak256\":\"0x3fbfd9b7efcad01d4b5048700454f05372ef98e371512110156037a061b826fa\",\"license\":\"MIT\"},\"contracts/library/constants/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Executor {\\n    address internal constant Relayer =\\n        0xBc10000000000000000000000000000000001000;\\n\\n    address internal constant Locking =\\n        0xBC10000000000000000000000000000000001001;\\n}\\n\",\"keccak256\":\"0xa31f071b26279ca8fc6f27cbb14f47f545bf6b170b73d38ca5d797d146f6c285\",\"license\":\"MIT\"},\"contracts/library/constants/Predeployed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary PreDeployedAddresses {\\n    address internal constant WrappedGoatBitcoin =\\n        0xbC10000000000000000000000000000000000000;\\n\\n    address internal constant GoatDAO =\\n        0xBC10000000000000000000000000000000000Da0;\\n\\n    address internal constant GoatToken =\\n        0xbC10000000000000000000000000000000000001;\\n\\n    address payable internal constant GoatFoundation =\\n        payable(0xBc10000000000000000000000000000000000002);\\n\\n    address internal constant Bridge =\\n        0xBC10000000000000000000000000000000000003;\\n\\n    address internal constant Locking =\\n        0xbC10000000000000000000000000000000000004;\\n\\n    address internal constant BitcoinBlocks =\\n        0xbc10000000000000000000000000000000000005;\\n\\n    address internal constant Relayer =\\n        0xBC10000000000000000000000000000000000006;\\n}\\n\",\"keccak256\":\"0x57bda9ff9c425cd873a4499e7c5482a9b6be94e1c03e4c8ea392e0837ef99fe8\",\"license\":\"MIT\"},\"contracts/library/utils/BaseAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Executor} from \\\"../constants/Executor.sol\\\";\\n\\ncontract BaseAccess {\\n    error AccessDenied();\\n    error Forbidden();\\n\\n    modifier OnlyRelayer() {\\n        if (msg.sender != Executor.Relayer) {\\n            revert AccessDenied();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7bba2af8e432bc544a2742912750286668be9d970a1508bdf53a3557ebf3e024\",\"license\":\"MIT\"},\"contracts/library/utils/Burner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Burner {\\n    constructor() payable {\\n        selfdestruct(payable(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x22549cfb43806076ea46bbe3d0d51467e3b7d90381f743e0a632f7f6350c30fe\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/goat/GoatToken.sol":{"GoatToken":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"ERC2612ExpiredSignature","type":"error"},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC2612InvalidSigner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_2542":{"entryPoint":null,"id":2542,"parameterSlots":2,"returnSlots":0},"@_361":{"entryPoint":null,"id":361,"parameterSlots":2,"returnSlots":0},"@_4951":{"entryPoint":null,"id":4951,"parameterSlots":0,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_997":{"entryPoint":null,"id":997,"parameterSlots":1,"returnSlots":0},"@_buildDomainSeparator_2589":{"entryPoint":null,"id":2589,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":452,"id":146,"parameterSlots":1,"returnSlots":0},"@getStringSlot_1819":{"entryPoint":null,"id":1819,"parameterSlots":1,"returnSlots":1},"@toShortStringWithFallback_1673":{"entryPoint":402,"id":1673,"parameterSlots":2,"returnSlots":1},"@toShortString_1575":{"entryPoint":533,"id":1575,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":932,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":670,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32":{"entryPoint":985,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":746,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":614,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":594,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:4079:34","nodeType":"YulBlock","src":"0:4079:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"46:95:34","nodeType":"YulBlock","src":"46:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:34","nodeType":"YulLiteral","src":"63:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:34","nodeType":"YulLiteral","src":"70:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:34","nodeType":"YulLiteral","src":"75:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:34","nodeType":"YulIdentifier","src":"66:3:34"},"nativeSrc":"66:20:34","nodeType":"YulFunctionCall","src":"66:20:34"}],"functionName":{"name":"mstore","nativeSrc":"56:6:34","nodeType":"YulIdentifier","src":"56:6:34"},"nativeSrc":"56:31:34","nodeType":"YulFunctionCall","src":"56:31:34"},"nativeSrc":"56:31:34","nodeType":"YulExpressionStatement","src":"56:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:34","nodeType":"YulLiteral","src":"103:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:34","nodeType":"YulLiteral","src":"106:4:34","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:34","nodeType":"YulIdentifier","src":"96:6:34"},"nativeSrc":"96:15:34","nodeType":"YulFunctionCall","src":"96:15:34"},"nativeSrc":"96:15:34","nodeType":"YulExpressionStatement","src":"96:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:34","nodeType":"YulLiteral","src":"127:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:34","nodeType":"YulLiteral","src":"130:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:34","nodeType":"YulIdentifier","src":"120:6:34"},"nativeSrc":"120:15:34","nodeType":"YulFunctionCall","src":"120:15:34"},"nativeSrc":"120:15:34","nodeType":"YulExpressionStatement","src":"120:15:34"}]},"name":"panic_error_0x41","nativeSrc":"14:127:34","nodeType":"YulFunctionDefinition","src":"14:127:34"},{"body":{"nativeSrc":"201:325:34","nodeType":"YulBlock","src":"201:325:34","statements":[{"nativeSrc":"211:22:34","nodeType":"YulAssignment","src":"211:22:34","value":{"arguments":[{"kind":"number","nativeSrc":"225:1:34","nodeType":"YulLiteral","src":"225:1:34","type":"","value":"1"},{"name":"data","nativeSrc":"228:4:34","nodeType":"YulIdentifier","src":"228:4:34"}],"functionName":{"name":"shr","nativeSrc":"221:3:34","nodeType":"YulIdentifier","src":"221:3:34"},"nativeSrc":"221:12:34","nodeType":"YulFunctionCall","src":"221:12:34"},"variableNames":[{"name":"length","nativeSrc":"211:6:34","nodeType":"YulIdentifier","src":"211:6:34"}]},{"nativeSrc":"242:38:34","nodeType":"YulVariableDeclaration","src":"242:38:34","value":{"arguments":[{"name":"data","nativeSrc":"272:4:34","nodeType":"YulIdentifier","src":"272:4:34"},{"kind":"number","nativeSrc":"278:1:34","nodeType":"YulLiteral","src":"278:1:34","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"268:3:34","nodeType":"YulIdentifier","src":"268:3:34"},"nativeSrc":"268:12:34","nodeType":"YulFunctionCall","src":"268:12:34"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"246:18:34","nodeType":"YulTypedName","src":"246:18:34","type":""}]},{"body":{"nativeSrc":"319:31:34","nodeType":"YulBlock","src":"319:31:34","statements":[{"nativeSrc":"321:27:34","nodeType":"YulAssignment","src":"321:27:34","value":{"arguments":[{"name":"length","nativeSrc":"335:6:34","nodeType":"YulIdentifier","src":"335:6:34"},{"kind":"number","nativeSrc":"343:4:34","nodeType":"YulLiteral","src":"343:4:34","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"331:3:34","nodeType":"YulIdentifier","src":"331:3:34"},"nativeSrc":"331:17:34","nodeType":"YulFunctionCall","src":"331:17:34"},"variableNames":[{"name":"length","nativeSrc":"321:6:34","nodeType":"YulIdentifier","src":"321:6:34"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"299:18:34","nodeType":"YulIdentifier","src":"299:18:34"}],"functionName":{"name":"iszero","nativeSrc":"292:6:34","nodeType":"YulIdentifier","src":"292:6:34"},"nativeSrc":"292:26:34","nodeType":"YulFunctionCall","src":"292:26:34"},"nativeSrc":"289:61:34","nodeType":"YulIf","src":"289:61:34"},{"body":{"nativeSrc":"409:111:34","nodeType":"YulBlock","src":"409:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"430:1:34","nodeType":"YulLiteral","src":"430:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"437:3:34","nodeType":"YulLiteral","src":"437:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"442:10:34","nodeType":"YulLiteral","src":"442:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"433:3:34","nodeType":"YulIdentifier","src":"433:3:34"},"nativeSrc":"433:20:34","nodeType":"YulFunctionCall","src":"433:20:34"}],"functionName":{"name":"mstore","nativeSrc":"423:6:34","nodeType":"YulIdentifier","src":"423:6:34"},"nativeSrc":"423:31:34","nodeType":"YulFunctionCall","src":"423:31:34"},"nativeSrc":"423:31:34","nodeType":"YulExpressionStatement","src":"423:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"474:1:34","nodeType":"YulLiteral","src":"474:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"477:4:34","nodeType":"YulLiteral","src":"477:4:34","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"467:6:34","nodeType":"YulIdentifier","src":"467:6:34"},"nativeSrc":"467:15:34","nodeType":"YulFunctionCall","src":"467:15:34"},"nativeSrc":"467:15:34","nodeType":"YulExpressionStatement","src":"467:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"502:1:34","nodeType":"YulLiteral","src":"502:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"505:4:34","nodeType":"YulLiteral","src":"505:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"495:6:34","nodeType":"YulIdentifier","src":"495:6:34"},"nativeSrc":"495:15:34","nodeType":"YulFunctionCall","src":"495:15:34"},"nativeSrc":"495:15:34","nodeType":"YulExpressionStatement","src":"495:15:34"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"365:18:34","nodeType":"YulIdentifier","src":"365:18:34"},{"arguments":[{"name":"length","nativeSrc":"388:6:34","nodeType":"YulIdentifier","src":"388:6:34"},{"kind":"number","nativeSrc":"396:2:34","nodeType":"YulLiteral","src":"396:2:34","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"385:2:34","nodeType":"YulIdentifier","src":"385:2:34"},"nativeSrc":"385:14:34","nodeType":"YulFunctionCall","src":"385:14:34"}],"functionName":{"name":"eq","nativeSrc":"362:2:34","nodeType":"YulIdentifier","src":"362:2:34"},"nativeSrc":"362:38:34","nodeType":"YulFunctionCall","src":"362:38:34"},"nativeSrc":"359:161:34","nodeType":"YulIf","src":"359:161:34"}]},"name":"extract_byte_array_length","nativeSrc":"146:380:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"181:4:34","nodeType":"YulTypedName","src":"181:4:34","type":""}],"returnVariables":[{"name":"length","nativeSrc":"190:6:34","nodeType":"YulTypedName","src":"190:6:34","type":""}],"src":"146:380:34"},{"body":{"nativeSrc":"587:65:34","nodeType":"YulBlock","src":"587:65:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"604:1:34","nodeType":"YulLiteral","src":"604:1:34","type":"","value":"0"},{"name":"ptr","nativeSrc":"607:3:34","nodeType":"YulIdentifier","src":"607:3:34"}],"functionName":{"name":"mstore","nativeSrc":"597:6:34","nodeType":"YulIdentifier","src":"597:6:34"},"nativeSrc":"597:14:34","nodeType":"YulFunctionCall","src":"597:14:34"},"nativeSrc":"597:14:34","nodeType":"YulExpressionStatement","src":"597:14:34"},{"nativeSrc":"620:26:34","nodeType":"YulAssignment","src":"620:26:34","value":{"arguments":[{"kind":"number","nativeSrc":"638:1:34","nodeType":"YulLiteral","src":"638:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"641:4:34","nodeType":"YulLiteral","src":"641:4:34","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"628:9:34","nodeType":"YulIdentifier","src":"628:9:34"},"nativeSrc":"628:18:34","nodeType":"YulFunctionCall","src":"628:18:34"},"variableNames":[{"name":"data","nativeSrc":"620:4:34","nodeType":"YulIdentifier","src":"620:4:34"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"531:121:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"570:3:34","nodeType":"YulTypedName","src":"570:3:34","type":""}],"returnVariables":[{"name":"data","nativeSrc":"578:4:34","nodeType":"YulTypedName","src":"578:4:34","type":""}],"src":"531:121:34"},{"body":{"nativeSrc":"738:437:34","nodeType":"YulBlock","src":"738:437:34","statements":[{"body":{"nativeSrc":"771:398:34","nodeType":"YulBlock","src":"771:398:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"792:1:34","nodeType":"YulLiteral","src":"792:1:34","type":"","value":"0"},{"name":"array","nativeSrc":"795:5:34","nodeType":"YulIdentifier","src":"795:5:34"}],"functionName":{"name":"mstore","nativeSrc":"785:6:34","nodeType":"YulIdentifier","src":"785:6:34"},"nativeSrc":"785:16:34","nodeType":"YulFunctionCall","src":"785:16:34"},"nativeSrc":"785:16:34","nodeType":"YulExpressionStatement","src":"785:16:34"},{"nativeSrc":"814:30:34","nodeType":"YulVariableDeclaration","src":"814:30:34","value":{"arguments":[{"kind":"number","nativeSrc":"836:1:34","nodeType":"YulLiteral","src":"836:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"839:4:34","nodeType":"YulLiteral","src":"839:4:34","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"826:9:34","nodeType":"YulIdentifier","src":"826:9:34"},"nativeSrc":"826:18:34","nodeType":"YulFunctionCall","src":"826:18:34"},"variables":[{"name":"data","nativeSrc":"818:4:34","nodeType":"YulTypedName","src":"818:4:34","type":""}]},{"nativeSrc":"857:57:34","nodeType":"YulVariableDeclaration","src":"857:57:34","value":{"arguments":[{"name":"data","nativeSrc":"880:4:34","nodeType":"YulIdentifier","src":"880:4:34"},{"arguments":[{"kind":"number","nativeSrc":"890:1:34","nodeType":"YulLiteral","src":"890:1:34","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"897:10:34","nodeType":"YulIdentifier","src":"897:10:34"},{"kind":"number","nativeSrc":"909:2:34","nodeType":"YulLiteral","src":"909:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"893:3:34","nodeType":"YulIdentifier","src":"893:3:34"},"nativeSrc":"893:19:34","nodeType":"YulFunctionCall","src":"893:19:34"}],"functionName":{"name":"shr","nativeSrc":"886:3:34","nodeType":"YulIdentifier","src":"886:3:34"},"nativeSrc":"886:27:34","nodeType":"YulFunctionCall","src":"886:27:34"}],"functionName":{"name":"add","nativeSrc":"876:3:34","nodeType":"YulIdentifier","src":"876:3:34"},"nativeSrc":"876:38:34","nodeType":"YulFunctionCall","src":"876:38:34"},"variables":[{"name":"deleteStart","nativeSrc":"861:11:34","nodeType":"YulTypedName","src":"861:11:34","type":""}]},{"body":{"nativeSrc":"951:23:34","nodeType":"YulBlock","src":"951:23:34","statements":[{"nativeSrc":"953:19:34","nodeType":"YulAssignment","src":"953:19:34","value":{"name":"data","nativeSrc":"968:4:34","nodeType":"YulIdentifier","src":"968:4:34"},"variableNames":[{"name":"deleteStart","nativeSrc":"953:11:34","nodeType":"YulIdentifier","src":"953:11:34"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"933:10:34","nodeType":"YulIdentifier","src":"933:10:34"},{"kind":"number","nativeSrc":"945:4:34","nodeType":"YulLiteral","src":"945:4:34","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"930:2:34","nodeType":"YulIdentifier","src":"930:2:34"},"nativeSrc":"930:20:34","nodeType":"YulFunctionCall","src":"930:20:34"},"nativeSrc":"927:47:34","nodeType":"YulIf","src":"927:47:34"},{"nativeSrc":"987:41:34","nodeType":"YulVariableDeclaration","src":"987:41:34","value":{"arguments":[{"name":"data","nativeSrc":"1001:4:34","nodeType":"YulIdentifier","src":"1001:4:34"},{"arguments":[{"kind":"number","nativeSrc":"1011:1:34","nodeType":"YulLiteral","src":"1011:1:34","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"1018:3:34","nodeType":"YulIdentifier","src":"1018:3:34"},{"kind":"number","nativeSrc":"1023:2:34","nodeType":"YulLiteral","src":"1023:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1014:3:34","nodeType":"YulIdentifier","src":"1014:3:34"},"nativeSrc":"1014:12:34","nodeType":"YulFunctionCall","src":"1014:12:34"}],"functionName":{"name":"shr","nativeSrc":"1007:3:34","nodeType":"YulIdentifier","src":"1007:3:34"},"nativeSrc":"1007:20:34","nodeType":"YulFunctionCall","src":"1007:20:34"}],"functionName":{"name":"add","nativeSrc":"997:3:34","nodeType":"YulIdentifier","src":"997:3:34"},"nativeSrc":"997:31:34","nodeType":"YulFunctionCall","src":"997:31:34"},"variables":[{"name":"_1","nativeSrc":"991:2:34","nodeType":"YulTypedName","src":"991:2:34","type":""}]},{"nativeSrc":"1041:24:34","nodeType":"YulVariableDeclaration","src":"1041:24:34","value":{"name":"deleteStart","nativeSrc":"1054:11:34","nodeType":"YulIdentifier","src":"1054:11:34"},"variables":[{"name":"start","nativeSrc":"1045:5:34","nodeType":"YulTypedName","src":"1045:5:34","type":""}]},{"body":{"nativeSrc":"1139:20:34","nodeType":"YulBlock","src":"1139:20:34","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"1148:5:34","nodeType":"YulIdentifier","src":"1148:5:34"},{"kind":"number","nativeSrc":"1155:1:34","nodeType":"YulLiteral","src":"1155:1:34","type":"","value":"0"}],"functionName":{"name":"sstore","nativeSrc":"1141:6:34","nodeType":"YulIdentifier","src":"1141:6:34"},"nativeSrc":"1141:16:34","nodeType":"YulFunctionCall","src":"1141:16:34"},"nativeSrc":"1141:16:34","nodeType":"YulExpressionStatement","src":"1141:16:34"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"1089:5:34","nodeType":"YulIdentifier","src":"1089:5:34"},{"name":"_1","nativeSrc":"1096:2:34","nodeType":"YulIdentifier","src":"1096:2:34"}],"functionName":{"name":"lt","nativeSrc":"1086:2:34","nodeType":"YulIdentifier","src":"1086:2:34"},"nativeSrc":"1086:13:34","nodeType":"YulFunctionCall","src":"1086:13:34"},"nativeSrc":"1078:81:34","nodeType":"YulForLoop","post":{"nativeSrc":"1100:26:34","nodeType":"YulBlock","src":"1100:26:34","statements":[{"nativeSrc":"1102:22:34","nodeType":"YulAssignment","src":"1102:22:34","value":{"arguments":[{"name":"start","nativeSrc":"1115:5:34","nodeType":"YulIdentifier","src":"1115:5:34"},{"kind":"number","nativeSrc":"1122:1:34","nodeType":"YulLiteral","src":"1122:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"1111:3:34","nodeType":"YulIdentifier","src":"1111:3:34"},"nativeSrc":"1111:13:34","nodeType":"YulFunctionCall","src":"1111:13:34"},"variableNames":[{"name":"start","nativeSrc":"1102:5:34","nodeType":"YulIdentifier","src":"1102:5:34"}]}]},"pre":{"nativeSrc":"1082:3:34","nodeType":"YulBlock","src":"1082:3:34","statements":[]},"src":"1078:81:34"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"754:3:34","nodeType":"YulIdentifier","src":"754:3:34"},{"kind":"number","nativeSrc":"759:2:34","nodeType":"YulLiteral","src":"759:2:34","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"751:2:34","nodeType":"YulIdentifier","src":"751:2:34"},"nativeSrc":"751:11:34","nodeType":"YulFunctionCall","src":"751:11:34"},"nativeSrc":"748:421:34","nodeType":"YulIf","src":"748:421:34"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"657:518:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"710:5:34","nodeType":"YulTypedName","src":"710:5:34","type":""},{"name":"len","nativeSrc":"717:3:34","nodeType":"YulTypedName","src":"717:3:34","type":""},{"name":"startIndex","nativeSrc":"722:10:34","nodeType":"YulTypedName","src":"722:10:34","type":""}],"src":"657:518:34"},{"body":{"nativeSrc":"1265:81:34","nodeType":"YulBlock","src":"1265:81:34","statements":[{"nativeSrc":"1275:65:34","nodeType":"YulAssignment","src":"1275:65:34","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"1290:4:34","nodeType":"YulIdentifier","src":"1290:4:34"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1308:1:34","nodeType":"YulLiteral","src":"1308:1:34","type":"","value":"3"},{"name":"len","nativeSrc":"1311:3:34","nodeType":"YulIdentifier","src":"1311:3:34"}],"functionName":{"name":"shl","nativeSrc":"1304:3:34","nodeType":"YulIdentifier","src":"1304:3:34"},"nativeSrc":"1304:11:34","nodeType":"YulFunctionCall","src":"1304:11:34"},{"arguments":[{"kind":"number","nativeSrc":"1321:1:34","nodeType":"YulLiteral","src":"1321:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"1317:3:34","nodeType":"YulIdentifier","src":"1317:3:34"},"nativeSrc":"1317:6:34","nodeType":"YulFunctionCall","src":"1317:6:34"}],"functionName":{"name":"shr","nativeSrc":"1300:3:34","nodeType":"YulIdentifier","src":"1300:3:34"},"nativeSrc":"1300:24:34","nodeType":"YulFunctionCall","src":"1300:24:34"}],"functionName":{"name":"not","nativeSrc":"1296:3:34","nodeType":"YulIdentifier","src":"1296:3:34"},"nativeSrc":"1296:29:34","nodeType":"YulFunctionCall","src":"1296:29:34"}],"functionName":{"name":"and","nativeSrc":"1286:3:34","nodeType":"YulIdentifier","src":"1286:3:34"},"nativeSrc":"1286:40:34","nodeType":"YulFunctionCall","src":"1286:40:34"},{"arguments":[{"kind":"number","nativeSrc":"1332:1:34","nodeType":"YulLiteral","src":"1332:1:34","type":"","value":"1"},{"name":"len","nativeSrc":"1335:3:34","nodeType":"YulIdentifier","src":"1335:3:34"}],"functionName":{"name":"shl","nativeSrc":"1328:3:34","nodeType":"YulIdentifier","src":"1328:3:34"},"nativeSrc":"1328:11:34","nodeType":"YulFunctionCall","src":"1328:11:34"}],"functionName":{"name":"or","nativeSrc":"1283:2:34","nodeType":"YulIdentifier","src":"1283:2:34"},"nativeSrc":"1283:57:34","nodeType":"YulFunctionCall","src":"1283:57:34"},"variableNames":[{"name":"used","nativeSrc":"1275:4:34","nodeType":"YulIdentifier","src":"1275:4:34"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"1180:166:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1242:4:34","nodeType":"YulTypedName","src":"1242:4:34","type":""},{"name":"len","nativeSrc":"1248:3:34","nodeType":"YulTypedName","src":"1248:3:34","type":""}],"returnVariables":[{"name":"used","nativeSrc":"1256:4:34","nodeType":"YulTypedName","src":"1256:4:34","type":""}],"src":"1180:166:34"},{"body":{"nativeSrc":"1447:1203:34","nodeType":"YulBlock","src":"1447:1203:34","statements":[{"nativeSrc":"1457:24:34","nodeType":"YulVariableDeclaration","src":"1457:24:34","value":{"arguments":[{"name":"src","nativeSrc":"1477:3:34","nodeType":"YulIdentifier","src":"1477:3:34"}],"functionName":{"name":"mload","nativeSrc":"1471:5:34","nodeType":"YulIdentifier","src":"1471:5:34"},"nativeSrc":"1471:10:34","nodeType":"YulFunctionCall","src":"1471:10:34"},"variables":[{"name":"newLen","nativeSrc":"1461:6:34","nodeType":"YulTypedName","src":"1461:6:34","type":""}]},{"body":{"nativeSrc":"1524:22:34","nodeType":"YulBlock","src":"1524:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1526:16:34","nodeType":"YulIdentifier","src":"1526:16:34"},"nativeSrc":"1526:18:34","nodeType":"YulFunctionCall","src":"1526:18:34"},"nativeSrc":"1526:18:34","nodeType":"YulExpressionStatement","src":"1526:18:34"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"1496:6:34","nodeType":"YulIdentifier","src":"1496:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1512:2:34","nodeType":"YulLiteral","src":"1512:2:34","type":"","value":"64"},{"kind":"number","nativeSrc":"1516:1:34","nodeType":"YulLiteral","src":"1516:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1508:3:34","nodeType":"YulIdentifier","src":"1508:3:34"},"nativeSrc":"1508:10:34","nodeType":"YulFunctionCall","src":"1508:10:34"},{"kind":"number","nativeSrc":"1520:1:34","nodeType":"YulLiteral","src":"1520:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1504:3:34","nodeType":"YulIdentifier","src":"1504:3:34"},"nativeSrc":"1504:18:34","nodeType":"YulFunctionCall","src":"1504:18:34"}],"functionName":{"name":"gt","nativeSrc":"1493:2:34","nodeType":"YulIdentifier","src":"1493:2:34"},"nativeSrc":"1493:30:34","nodeType":"YulFunctionCall","src":"1493:30:34"},"nativeSrc":"1490:56:34","nodeType":"YulIf","src":"1490:56:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"1599:4:34","nodeType":"YulIdentifier","src":"1599:4:34"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"1637:4:34","nodeType":"YulIdentifier","src":"1637:4:34"}],"functionName":{"name":"sload","nativeSrc":"1631:5:34","nodeType":"YulIdentifier","src":"1631:5:34"},"nativeSrc":"1631:11:34","nodeType":"YulFunctionCall","src":"1631:11:34"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"1605:25:34","nodeType":"YulIdentifier","src":"1605:25:34"},"nativeSrc":"1605:38:34","nodeType":"YulFunctionCall","src":"1605:38:34"},{"name":"newLen","nativeSrc":"1645:6:34","nodeType":"YulIdentifier","src":"1645:6:34"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"1555:43:34","nodeType":"YulIdentifier","src":"1555:43:34"},"nativeSrc":"1555:97:34","nodeType":"YulFunctionCall","src":"1555:97:34"},"nativeSrc":"1555:97:34","nodeType":"YulExpressionStatement","src":"1555:97:34"},{"nativeSrc":"1661:18:34","nodeType":"YulVariableDeclaration","src":"1661:18:34","value":{"kind":"number","nativeSrc":"1678:1:34","nodeType":"YulLiteral","src":"1678:1:34","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"1665:9:34","nodeType":"YulTypedName","src":"1665:9:34","type":""}]},{"nativeSrc":"1688:17:34","nodeType":"YulAssignment","src":"1688:17:34","value":{"kind":"number","nativeSrc":"1701:4:34","nodeType":"YulLiteral","src":"1701:4:34","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"1688:9:34","nodeType":"YulIdentifier","src":"1688:9:34"}]},{"cases":[{"body":{"nativeSrc":"1751:642:34","nodeType":"YulBlock","src":"1751:642:34","statements":[{"nativeSrc":"1765:35:34","nodeType":"YulVariableDeclaration","src":"1765:35:34","value":{"arguments":[{"name":"newLen","nativeSrc":"1784:6:34","nodeType":"YulIdentifier","src":"1784:6:34"},{"arguments":[{"kind":"number","nativeSrc":"1796:2:34","nodeType":"YulLiteral","src":"1796:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1792:3:34","nodeType":"YulIdentifier","src":"1792:3:34"},"nativeSrc":"1792:7:34","nodeType":"YulFunctionCall","src":"1792:7:34"}],"functionName":{"name":"and","nativeSrc":"1780:3:34","nodeType":"YulIdentifier","src":"1780:3:34"},"nativeSrc":"1780:20:34","nodeType":"YulFunctionCall","src":"1780:20:34"},"variables":[{"name":"loopEnd","nativeSrc":"1769:7:34","nodeType":"YulTypedName","src":"1769:7:34","type":""}]},{"nativeSrc":"1813:49:34","nodeType":"YulVariableDeclaration","src":"1813:49:34","value":{"arguments":[{"name":"slot","nativeSrc":"1857:4:34","nodeType":"YulIdentifier","src":"1857:4:34"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"1827:29:34","nodeType":"YulIdentifier","src":"1827:29:34"},"nativeSrc":"1827:35:34","nodeType":"YulFunctionCall","src":"1827:35:34"},"variables":[{"name":"dstPtr","nativeSrc":"1817:6:34","nodeType":"YulTypedName","src":"1817:6:34","type":""}]},{"nativeSrc":"1875:10:34","nodeType":"YulVariableDeclaration","src":"1875:10:34","value":{"kind":"number","nativeSrc":"1884:1:34","nodeType":"YulLiteral","src":"1884:1:34","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1879:1:34","nodeType":"YulTypedName","src":"1879:1:34","type":""}]},{"body":{"nativeSrc":"1955:165:34","nodeType":"YulBlock","src":"1955:165:34","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"1980:6:34","nodeType":"YulIdentifier","src":"1980:6:34"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1998:3:34","nodeType":"YulIdentifier","src":"1998:3:34"},{"name":"srcOffset","nativeSrc":"2003:9:34","nodeType":"YulIdentifier","src":"2003:9:34"}],"functionName":{"name":"add","nativeSrc":"1994:3:34","nodeType":"YulIdentifier","src":"1994:3:34"},"nativeSrc":"1994:19:34","nodeType":"YulFunctionCall","src":"1994:19:34"}],"functionName":{"name":"mload","nativeSrc":"1988:5:34","nodeType":"YulIdentifier","src":"1988:5:34"},"nativeSrc":"1988:26:34","nodeType":"YulFunctionCall","src":"1988:26:34"}],"functionName":{"name":"sstore","nativeSrc":"1973:6:34","nodeType":"YulIdentifier","src":"1973:6:34"},"nativeSrc":"1973:42:34","nodeType":"YulFunctionCall","src":"1973:42:34"},"nativeSrc":"1973:42:34","nodeType":"YulExpressionStatement","src":"1973:42:34"},{"nativeSrc":"2032:24:34","nodeType":"YulAssignment","src":"2032:24:34","value":{"arguments":[{"name":"dstPtr","nativeSrc":"2046:6:34","nodeType":"YulIdentifier","src":"2046:6:34"},{"kind":"number","nativeSrc":"2054:1:34","nodeType":"YulLiteral","src":"2054:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2042:3:34","nodeType":"YulIdentifier","src":"2042:3:34"},"nativeSrc":"2042:14:34","nodeType":"YulFunctionCall","src":"2042:14:34"},"variableNames":[{"name":"dstPtr","nativeSrc":"2032:6:34","nodeType":"YulIdentifier","src":"2032:6:34"}]},{"nativeSrc":"2073:33:34","nodeType":"YulAssignment","src":"2073:33:34","value":{"arguments":[{"name":"srcOffset","nativeSrc":"2090:9:34","nodeType":"YulIdentifier","src":"2090:9:34"},{"kind":"number","nativeSrc":"2101:4:34","nodeType":"YulLiteral","src":"2101:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2086:3:34","nodeType":"YulIdentifier","src":"2086:3:34"},"nativeSrc":"2086:20:34","nodeType":"YulFunctionCall","src":"2086:20:34"},"variableNames":[{"name":"srcOffset","nativeSrc":"2073:9:34","nodeType":"YulIdentifier","src":"2073:9:34"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1909:1:34","nodeType":"YulIdentifier","src":"1909:1:34"},{"name":"loopEnd","nativeSrc":"1912:7:34","nodeType":"YulIdentifier","src":"1912:7:34"}],"functionName":{"name":"lt","nativeSrc":"1906:2:34","nodeType":"YulIdentifier","src":"1906:2:34"},"nativeSrc":"1906:14:34","nodeType":"YulFunctionCall","src":"1906:14:34"},"nativeSrc":"1898:222:34","nodeType":"YulForLoop","post":{"nativeSrc":"1921:21:34","nodeType":"YulBlock","src":"1921:21:34","statements":[{"nativeSrc":"1923:17:34","nodeType":"YulAssignment","src":"1923:17:34","value":{"arguments":[{"name":"i","nativeSrc":"1932:1:34","nodeType":"YulIdentifier","src":"1932:1:34"},{"kind":"number","nativeSrc":"1935:4:34","nodeType":"YulLiteral","src":"1935:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1928:3:34","nodeType":"YulIdentifier","src":"1928:3:34"},"nativeSrc":"1928:12:34","nodeType":"YulFunctionCall","src":"1928:12:34"},"variableNames":[{"name":"i","nativeSrc":"1923:1:34","nodeType":"YulIdentifier","src":"1923:1:34"}]}]},"pre":{"nativeSrc":"1902:3:34","nodeType":"YulBlock","src":"1902:3:34","statements":[]},"src":"1898:222:34"},{"body":{"nativeSrc":"2168:166:34","nodeType":"YulBlock","src":"2168:166:34","statements":[{"nativeSrc":"2186:43:34","nodeType":"YulVariableDeclaration","src":"2186:43:34","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2213:3:34","nodeType":"YulIdentifier","src":"2213:3:34"},{"name":"srcOffset","nativeSrc":"2218:9:34","nodeType":"YulIdentifier","src":"2218:9:34"}],"functionName":{"name":"add","nativeSrc":"2209:3:34","nodeType":"YulIdentifier","src":"2209:3:34"},"nativeSrc":"2209:19:34","nodeType":"YulFunctionCall","src":"2209:19:34"}],"functionName":{"name":"mload","nativeSrc":"2203:5:34","nodeType":"YulIdentifier","src":"2203:5:34"},"nativeSrc":"2203:26:34","nodeType":"YulFunctionCall","src":"2203:26:34"},"variables":[{"name":"lastValue","nativeSrc":"2190:9:34","nodeType":"YulTypedName","src":"2190:9:34","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"2253:6:34","nodeType":"YulIdentifier","src":"2253:6:34"},{"arguments":[{"name":"lastValue","nativeSrc":"2265:9:34","nodeType":"YulIdentifier","src":"2265:9:34"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2292:1:34","nodeType":"YulLiteral","src":"2292:1:34","type":"","value":"3"},{"name":"newLen","nativeSrc":"2295:6:34","nodeType":"YulIdentifier","src":"2295:6:34"}],"functionName":{"name":"shl","nativeSrc":"2288:3:34","nodeType":"YulIdentifier","src":"2288:3:34"},"nativeSrc":"2288:14:34","nodeType":"YulFunctionCall","src":"2288:14:34"},{"kind":"number","nativeSrc":"2304:3:34","nodeType":"YulLiteral","src":"2304:3:34","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"2284:3:34","nodeType":"YulIdentifier","src":"2284:3:34"},"nativeSrc":"2284:24:34","nodeType":"YulFunctionCall","src":"2284:24:34"},{"arguments":[{"kind":"number","nativeSrc":"2314:1:34","nodeType":"YulLiteral","src":"2314:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2310:3:34","nodeType":"YulIdentifier","src":"2310:3:34"},"nativeSrc":"2310:6:34","nodeType":"YulFunctionCall","src":"2310:6:34"}],"functionName":{"name":"shr","nativeSrc":"2280:3:34","nodeType":"YulIdentifier","src":"2280:3:34"},"nativeSrc":"2280:37:34","nodeType":"YulFunctionCall","src":"2280:37:34"}],"functionName":{"name":"not","nativeSrc":"2276:3:34","nodeType":"YulIdentifier","src":"2276:3:34"},"nativeSrc":"2276:42:34","nodeType":"YulFunctionCall","src":"2276:42:34"}],"functionName":{"name":"and","nativeSrc":"2261:3:34","nodeType":"YulIdentifier","src":"2261:3:34"},"nativeSrc":"2261:58:34","nodeType":"YulFunctionCall","src":"2261:58:34"}],"functionName":{"name":"sstore","nativeSrc":"2246:6:34","nodeType":"YulIdentifier","src":"2246:6:34"},"nativeSrc":"2246:74:34","nodeType":"YulFunctionCall","src":"2246:74:34"},"nativeSrc":"2246:74:34","nodeType":"YulExpressionStatement","src":"2246:74:34"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"2139:7:34","nodeType":"YulIdentifier","src":"2139:7:34"},{"name":"newLen","nativeSrc":"2148:6:34","nodeType":"YulIdentifier","src":"2148:6:34"}],"functionName":{"name":"lt","nativeSrc":"2136:2:34","nodeType":"YulIdentifier","src":"2136:2:34"},"nativeSrc":"2136:19:34","nodeType":"YulFunctionCall","src":"2136:19:34"},"nativeSrc":"2133:201:34","nodeType":"YulIf","src":"2133:201:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2354:4:34","nodeType":"YulIdentifier","src":"2354:4:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2368:1:34","nodeType":"YulLiteral","src":"2368:1:34","type":"","value":"1"},{"name":"newLen","nativeSrc":"2371:6:34","nodeType":"YulIdentifier","src":"2371:6:34"}],"functionName":{"name":"shl","nativeSrc":"2364:3:34","nodeType":"YulIdentifier","src":"2364:3:34"},"nativeSrc":"2364:14:34","nodeType":"YulFunctionCall","src":"2364:14:34"},{"kind":"number","nativeSrc":"2380:1:34","nodeType":"YulLiteral","src":"2380:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2360:3:34","nodeType":"YulIdentifier","src":"2360:3:34"},"nativeSrc":"2360:22:34","nodeType":"YulFunctionCall","src":"2360:22:34"}],"functionName":{"name":"sstore","nativeSrc":"2347:6:34","nodeType":"YulIdentifier","src":"2347:6:34"},"nativeSrc":"2347:36:34","nodeType":"YulFunctionCall","src":"2347:36:34"},"nativeSrc":"2347:36:34","nodeType":"YulExpressionStatement","src":"2347:36:34"}]},"nativeSrc":"1744:649:34","nodeType":"YulCase","src":"1744:649:34","value":{"kind":"number","nativeSrc":"1749:1:34","nodeType":"YulLiteral","src":"1749:1:34","type":"","value":"1"}},{"body":{"nativeSrc":"2410:234:34","nodeType":"YulBlock","src":"2410:234:34","statements":[{"nativeSrc":"2424:14:34","nodeType":"YulVariableDeclaration","src":"2424:14:34","value":{"kind":"number","nativeSrc":"2437:1:34","nodeType":"YulLiteral","src":"2437:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2428:5:34","nodeType":"YulTypedName","src":"2428:5:34","type":""}]},{"body":{"nativeSrc":"2473:67:34","nodeType":"YulBlock","src":"2473:67:34","statements":[{"nativeSrc":"2491:35:34","nodeType":"YulAssignment","src":"2491:35:34","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2510:3:34","nodeType":"YulIdentifier","src":"2510:3:34"},{"name":"srcOffset","nativeSrc":"2515:9:34","nodeType":"YulIdentifier","src":"2515:9:34"}],"functionName":{"name":"add","nativeSrc":"2506:3:34","nodeType":"YulIdentifier","src":"2506:3:34"},"nativeSrc":"2506:19:34","nodeType":"YulFunctionCall","src":"2506:19:34"}],"functionName":{"name":"mload","nativeSrc":"2500:5:34","nodeType":"YulIdentifier","src":"2500:5:34"},"nativeSrc":"2500:26:34","nodeType":"YulFunctionCall","src":"2500:26:34"},"variableNames":[{"name":"value","nativeSrc":"2491:5:34","nodeType":"YulIdentifier","src":"2491:5:34"}]}]},"condition":{"name":"newLen","nativeSrc":"2454:6:34","nodeType":"YulIdentifier","src":"2454:6:34"},"nativeSrc":"2451:89:34","nodeType":"YulIf","src":"2451:89:34"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2560:4:34","nodeType":"YulIdentifier","src":"2560:4:34"},{"arguments":[{"name":"value","nativeSrc":"2619:5:34","nodeType":"YulIdentifier","src":"2619:5:34"},{"name":"newLen","nativeSrc":"2626:6:34","nodeType":"YulIdentifier","src":"2626:6:34"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"2566:52:34","nodeType":"YulIdentifier","src":"2566:52:34"},"nativeSrc":"2566:67:34","nodeType":"YulFunctionCall","src":"2566:67:34"}],"functionName":{"name":"sstore","nativeSrc":"2553:6:34","nodeType":"YulIdentifier","src":"2553:6:34"},"nativeSrc":"2553:81:34","nodeType":"YulFunctionCall","src":"2553:81:34"},"nativeSrc":"2553:81:34","nodeType":"YulExpressionStatement","src":"2553:81:34"}]},"nativeSrc":"2402:242:34","nodeType":"YulCase","src":"2402:242:34","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"1724:6:34","nodeType":"YulIdentifier","src":"1724:6:34"},{"kind":"number","nativeSrc":"1732:2:34","nodeType":"YulLiteral","src":"1732:2:34","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"1721:2:34","nodeType":"YulIdentifier","src":"1721:2:34"},"nativeSrc":"1721:14:34","nodeType":"YulFunctionCall","src":"1721:14:34"},"nativeSrc":"1714:930:34","nodeType":"YulSwitch","src":"1714:930:34"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"1351:1299:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"1432:4:34","nodeType":"YulTypedName","src":"1432:4:34","type":""},{"name":"src","nativeSrc":"1438:3:34","nodeType":"YulTypedName","src":"1438:3:34","type":""}],"src":"1351:1299:34"},{"body":{"nativeSrc":"2756:102:34","nodeType":"YulBlock","src":"2756:102:34","statements":[{"nativeSrc":"2766:26:34","nodeType":"YulAssignment","src":"2766:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"2778:9:34","nodeType":"YulIdentifier","src":"2778:9:34"},{"kind":"number","nativeSrc":"2789:2:34","nodeType":"YulLiteral","src":"2789:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2774:3:34","nodeType":"YulIdentifier","src":"2774:3:34"},"nativeSrc":"2774:18:34","nodeType":"YulFunctionCall","src":"2774:18:34"},"variableNames":[{"name":"tail","nativeSrc":"2766:4:34","nodeType":"YulIdentifier","src":"2766:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2808:9:34","nodeType":"YulIdentifier","src":"2808:9:34"},{"arguments":[{"name":"value0","nativeSrc":"2823:6:34","nodeType":"YulIdentifier","src":"2823:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2839:3:34","nodeType":"YulLiteral","src":"2839:3:34","type":"","value":"160"},{"kind":"number","nativeSrc":"2844:1:34","nodeType":"YulLiteral","src":"2844:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"2835:3:34","nodeType":"YulIdentifier","src":"2835:3:34"},"nativeSrc":"2835:11:34","nodeType":"YulFunctionCall","src":"2835:11:34"},{"kind":"number","nativeSrc":"2848:1:34","nodeType":"YulLiteral","src":"2848:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2831:3:34","nodeType":"YulIdentifier","src":"2831:3:34"},"nativeSrc":"2831:19:34","nodeType":"YulFunctionCall","src":"2831:19:34"}],"functionName":{"name":"and","nativeSrc":"2819:3:34","nodeType":"YulIdentifier","src":"2819:3:34"},"nativeSrc":"2819:32:34","nodeType":"YulFunctionCall","src":"2819:32:34"}],"functionName":{"name":"mstore","nativeSrc":"2801:6:34","nodeType":"YulIdentifier","src":"2801:6:34"},"nativeSrc":"2801:51:34","nodeType":"YulFunctionCall","src":"2801:51:34"},"nativeSrc":"2801:51:34","nodeType":"YulExpressionStatement","src":"2801:51:34"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2655:203:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2725:9:34","nodeType":"YulTypedName","src":"2725:9:34","type":""},{"name":"value0","nativeSrc":"2736:6:34","nodeType":"YulTypedName","src":"2736:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2747:4:34","nodeType":"YulTypedName","src":"2747:4:34","type":""}],"src":"2655:203:34"},{"body":{"nativeSrc":"3076:276:34","nodeType":"YulBlock","src":"3076:276:34","statements":[{"nativeSrc":"3086:27:34","nodeType":"YulAssignment","src":"3086:27:34","value":{"arguments":[{"name":"headStart","nativeSrc":"3098:9:34","nodeType":"YulIdentifier","src":"3098:9:34"},{"kind":"number","nativeSrc":"3109:3:34","nodeType":"YulLiteral","src":"3109:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"3094:3:34","nodeType":"YulIdentifier","src":"3094:3:34"},"nativeSrc":"3094:19:34","nodeType":"YulFunctionCall","src":"3094:19:34"},"variableNames":[{"name":"tail","nativeSrc":"3086:4:34","nodeType":"YulIdentifier","src":"3086:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3129:9:34","nodeType":"YulIdentifier","src":"3129:9:34"},{"name":"value0","nativeSrc":"3140:6:34","nodeType":"YulIdentifier","src":"3140:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3122:6:34","nodeType":"YulIdentifier","src":"3122:6:34"},"nativeSrc":"3122:25:34","nodeType":"YulFunctionCall","src":"3122:25:34"},"nativeSrc":"3122:25:34","nodeType":"YulExpressionStatement","src":"3122:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3167:9:34","nodeType":"YulIdentifier","src":"3167:9:34"},{"kind":"number","nativeSrc":"3178:2:34","nodeType":"YulLiteral","src":"3178:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3163:3:34","nodeType":"YulIdentifier","src":"3163:3:34"},"nativeSrc":"3163:18:34","nodeType":"YulFunctionCall","src":"3163:18:34"},{"name":"value1","nativeSrc":"3183:6:34","nodeType":"YulIdentifier","src":"3183:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3156:6:34","nodeType":"YulIdentifier","src":"3156:6:34"},"nativeSrc":"3156:34:34","nodeType":"YulFunctionCall","src":"3156:34:34"},"nativeSrc":"3156:34:34","nodeType":"YulExpressionStatement","src":"3156:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3210:9:34","nodeType":"YulIdentifier","src":"3210:9:34"},{"kind":"number","nativeSrc":"3221:2:34","nodeType":"YulLiteral","src":"3221:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3206:3:34","nodeType":"YulIdentifier","src":"3206:3:34"},"nativeSrc":"3206:18:34","nodeType":"YulFunctionCall","src":"3206:18:34"},{"name":"value2","nativeSrc":"3226:6:34","nodeType":"YulIdentifier","src":"3226:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3199:6:34","nodeType":"YulIdentifier","src":"3199:6:34"},"nativeSrc":"3199:34:34","nodeType":"YulFunctionCall","src":"3199:34:34"},"nativeSrc":"3199:34:34","nodeType":"YulExpressionStatement","src":"3199:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3253:9:34","nodeType":"YulIdentifier","src":"3253:9:34"},{"kind":"number","nativeSrc":"3264:2:34","nodeType":"YulLiteral","src":"3264:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3249:3:34","nodeType":"YulIdentifier","src":"3249:3:34"},"nativeSrc":"3249:18:34","nodeType":"YulFunctionCall","src":"3249:18:34"},{"name":"value3","nativeSrc":"3269:6:34","nodeType":"YulIdentifier","src":"3269:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3242:6:34","nodeType":"YulIdentifier","src":"3242:6:34"},"nativeSrc":"3242:34:34","nodeType":"YulFunctionCall","src":"3242:34:34"},"nativeSrc":"3242:34:34","nodeType":"YulExpressionStatement","src":"3242:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3296:9:34","nodeType":"YulIdentifier","src":"3296:9:34"},{"kind":"number","nativeSrc":"3307:3:34","nodeType":"YulLiteral","src":"3307:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3292:3:34","nodeType":"YulIdentifier","src":"3292:3:34"},"nativeSrc":"3292:19:34","nodeType":"YulFunctionCall","src":"3292:19:34"},{"arguments":[{"name":"value4","nativeSrc":"3317:6:34","nodeType":"YulIdentifier","src":"3317:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3333:3:34","nodeType":"YulLiteral","src":"3333:3:34","type":"","value":"160"},{"kind":"number","nativeSrc":"3338:1:34","nodeType":"YulLiteral","src":"3338:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"3329:3:34","nodeType":"YulIdentifier","src":"3329:3:34"},"nativeSrc":"3329:11:34","nodeType":"YulFunctionCall","src":"3329:11:34"},{"kind":"number","nativeSrc":"3342:1:34","nodeType":"YulLiteral","src":"3342:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"3325:3:34","nodeType":"YulIdentifier","src":"3325:3:34"},"nativeSrc":"3325:19:34","nodeType":"YulFunctionCall","src":"3325:19:34"}],"functionName":{"name":"and","nativeSrc":"3313:3:34","nodeType":"YulIdentifier","src":"3313:3:34"},"nativeSrc":"3313:32:34","nodeType":"YulFunctionCall","src":"3313:32:34"}],"functionName":{"name":"mstore","nativeSrc":"3285:6:34","nodeType":"YulIdentifier","src":"3285:6:34"},"nativeSrc":"3285:61:34","nodeType":"YulFunctionCall","src":"3285:61:34"},"nativeSrc":"3285:61:34","nodeType":"YulExpressionStatement","src":"3285:61:34"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nativeSrc":"2863:489:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3013:9:34","nodeType":"YulTypedName","src":"3013:9:34","type":""},{"name":"value4","nativeSrc":"3024:6:34","nodeType":"YulTypedName","src":"3024:6:34","type":""},{"name":"value3","nativeSrc":"3032:6:34","nodeType":"YulTypedName","src":"3032:6:34","type":""},{"name":"value2","nativeSrc":"3040:6:34","nodeType":"YulTypedName","src":"3040:6:34","type":""},{"name":"value1","nativeSrc":"3048:6:34","nodeType":"YulTypedName","src":"3048:6:34","type":""},{"name":"value0","nativeSrc":"3056:6:34","nodeType":"YulTypedName","src":"3056:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3067:4:34","nodeType":"YulTypedName","src":"3067:4:34","type":""}],"src":"2863:489:34"},{"body":{"nativeSrc":"3478:297:34","nodeType":"YulBlock","src":"3478:297:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3495:9:34","nodeType":"YulIdentifier","src":"3495:9:34"},{"kind":"number","nativeSrc":"3506:2:34","nodeType":"YulLiteral","src":"3506:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3488:6:34","nodeType":"YulIdentifier","src":"3488:6:34"},"nativeSrc":"3488:21:34","nodeType":"YulFunctionCall","src":"3488:21:34"},"nativeSrc":"3488:21:34","nodeType":"YulExpressionStatement","src":"3488:21:34"},{"nativeSrc":"3518:27:34","nodeType":"YulVariableDeclaration","src":"3518:27:34","value":{"arguments":[{"name":"value0","nativeSrc":"3538:6:34","nodeType":"YulIdentifier","src":"3538:6:34"}],"functionName":{"name":"mload","nativeSrc":"3532:5:34","nodeType":"YulIdentifier","src":"3532:5:34"},"nativeSrc":"3532:13:34","nodeType":"YulFunctionCall","src":"3532:13:34"},"variables":[{"name":"length","nativeSrc":"3522:6:34","nodeType":"YulTypedName","src":"3522:6:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3565:9:34","nodeType":"YulIdentifier","src":"3565:9:34"},{"kind":"number","nativeSrc":"3576:2:34","nodeType":"YulLiteral","src":"3576:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3561:3:34","nodeType":"YulIdentifier","src":"3561:3:34"},"nativeSrc":"3561:18:34","nodeType":"YulFunctionCall","src":"3561:18:34"},{"name":"length","nativeSrc":"3581:6:34","nodeType":"YulIdentifier","src":"3581:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3554:6:34","nodeType":"YulIdentifier","src":"3554:6:34"},"nativeSrc":"3554:34:34","nodeType":"YulFunctionCall","src":"3554:34:34"},"nativeSrc":"3554:34:34","nodeType":"YulExpressionStatement","src":"3554:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3607:9:34","nodeType":"YulIdentifier","src":"3607:9:34"},{"kind":"number","nativeSrc":"3618:2:34","nodeType":"YulLiteral","src":"3618:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3603:3:34","nodeType":"YulIdentifier","src":"3603:3:34"},"nativeSrc":"3603:18:34","nodeType":"YulFunctionCall","src":"3603:18:34"},{"arguments":[{"name":"value0","nativeSrc":"3627:6:34","nodeType":"YulIdentifier","src":"3627:6:34"},{"kind":"number","nativeSrc":"3635:2:34","nodeType":"YulLiteral","src":"3635:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3623:3:34","nodeType":"YulIdentifier","src":"3623:3:34"},"nativeSrc":"3623:15:34","nodeType":"YulFunctionCall","src":"3623:15:34"},{"name":"length","nativeSrc":"3640:6:34","nodeType":"YulIdentifier","src":"3640:6:34"}],"functionName":{"name":"mcopy","nativeSrc":"3597:5:34","nodeType":"YulIdentifier","src":"3597:5:34"},"nativeSrc":"3597:50:34","nodeType":"YulFunctionCall","src":"3597:50:34"},"nativeSrc":"3597:50:34","nodeType":"YulExpressionStatement","src":"3597:50:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3671:9:34","nodeType":"YulIdentifier","src":"3671:9:34"},{"name":"length","nativeSrc":"3682:6:34","nodeType":"YulIdentifier","src":"3682:6:34"}],"functionName":{"name":"add","nativeSrc":"3667:3:34","nodeType":"YulIdentifier","src":"3667:3:34"},"nativeSrc":"3667:22:34","nodeType":"YulFunctionCall","src":"3667:22:34"},{"kind":"number","nativeSrc":"3691:2:34","nodeType":"YulLiteral","src":"3691:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3663:3:34","nodeType":"YulIdentifier","src":"3663:3:34"},"nativeSrc":"3663:31:34","nodeType":"YulFunctionCall","src":"3663:31:34"},{"kind":"number","nativeSrc":"3696:1:34","nodeType":"YulLiteral","src":"3696:1:34","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"3656:6:34","nodeType":"YulIdentifier","src":"3656:6:34"},"nativeSrc":"3656:42:34","nodeType":"YulFunctionCall","src":"3656:42:34"},"nativeSrc":"3656:42:34","nodeType":"YulExpressionStatement","src":"3656:42:34"},{"nativeSrc":"3707:62:34","nodeType":"YulAssignment","src":"3707:62:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3723:9:34","nodeType":"YulIdentifier","src":"3723:9:34"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"3742:6:34","nodeType":"YulIdentifier","src":"3742:6:34"},{"kind":"number","nativeSrc":"3750:2:34","nodeType":"YulLiteral","src":"3750:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3738:3:34","nodeType":"YulIdentifier","src":"3738:3:34"},"nativeSrc":"3738:15:34","nodeType":"YulFunctionCall","src":"3738:15:34"},{"arguments":[{"kind":"number","nativeSrc":"3759:2:34","nodeType":"YulLiteral","src":"3759:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"3755:3:34","nodeType":"YulIdentifier","src":"3755:3:34"},"nativeSrc":"3755:7:34","nodeType":"YulFunctionCall","src":"3755:7:34"}],"functionName":{"name":"and","nativeSrc":"3734:3:34","nodeType":"YulIdentifier","src":"3734:3:34"},"nativeSrc":"3734:29:34","nodeType":"YulFunctionCall","src":"3734:29:34"}],"functionName":{"name":"add","nativeSrc":"3719:3:34","nodeType":"YulIdentifier","src":"3719:3:34"},"nativeSrc":"3719:45:34","nodeType":"YulFunctionCall","src":"3719:45:34"},{"kind":"number","nativeSrc":"3766:2:34","nodeType":"YulLiteral","src":"3766:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3715:3:34","nodeType":"YulIdentifier","src":"3715:3:34"},"nativeSrc":"3715:54:34","nodeType":"YulFunctionCall","src":"3715:54:34"},"variableNames":[{"name":"tail","nativeSrc":"3707:4:34","nodeType":"YulIdentifier","src":"3707:4:34"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3357:418:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3447:9:34","nodeType":"YulTypedName","src":"3447:9:34","type":""},{"name":"value0","nativeSrc":"3458:6:34","nodeType":"YulTypedName","src":"3458:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3469:4:34","nodeType":"YulTypedName","src":"3469:4:34","type":""}],"src":"3357:418:34"},{"body":{"nativeSrc":"3874:203:34","nodeType":"YulBlock","src":"3874:203:34","statements":[{"nativeSrc":"3884:26:34","nodeType":"YulVariableDeclaration","src":"3884:26:34","value":{"arguments":[{"name":"array","nativeSrc":"3904:5:34","nodeType":"YulIdentifier","src":"3904:5:34"}],"functionName":{"name":"mload","nativeSrc":"3898:5:34","nodeType":"YulIdentifier","src":"3898:5:34"},"nativeSrc":"3898:12:34","nodeType":"YulFunctionCall","src":"3898:12:34"},"variables":[{"name":"length","nativeSrc":"3888:6:34","nodeType":"YulTypedName","src":"3888:6:34","type":""}]},{"nativeSrc":"3919:32:34","nodeType":"YulAssignment","src":"3919:32:34","value":{"arguments":[{"arguments":[{"name":"array","nativeSrc":"3938:5:34","nodeType":"YulIdentifier","src":"3938:5:34"},{"kind":"number","nativeSrc":"3945:4:34","nodeType":"YulLiteral","src":"3945:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3934:3:34","nodeType":"YulIdentifier","src":"3934:3:34"},"nativeSrc":"3934:16:34","nodeType":"YulFunctionCall","src":"3934:16:34"}],"functionName":{"name":"mload","nativeSrc":"3928:5:34","nodeType":"YulIdentifier","src":"3928:5:34"},"nativeSrc":"3928:23:34","nodeType":"YulFunctionCall","src":"3928:23:34"},"variableNames":[{"name":"value","nativeSrc":"3919:5:34","nodeType":"YulIdentifier","src":"3919:5:34"}]},{"body":{"nativeSrc":"3988:83:34","nodeType":"YulBlock","src":"3988:83:34","statements":[{"nativeSrc":"4002:59:34","nodeType":"YulAssignment","src":"4002:59:34","value":{"arguments":[{"name":"value","nativeSrc":"4015:5:34","nodeType":"YulIdentifier","src":"4015:5:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4030:1:34","nodeType":"YulLiteral","src":"4030:1:34","type":"","value":"3"},{"arguments":[{"kind":"number","nativeSrc":"4037:4:34","nodeType":"YulLiteral","src":"4037:4:34","type":"","value":"0x20"},{"name":"length","nativeSrc":"4043:6:34","nodeType":"YulIdentifier","src":"4043:6:34"}],"functionName":{"name":"sub","nativeSrc":"4033:3:34","nodeType":"YulIdentifier","src":"4033:3:34"},"nativeSrc":"4033:17:34","nodeType":"YulFunctionCall","src":"4033:17:34"}],"functionName":{"name":"shl","nativeSrc":"4026:3:34","nodeType":"YulIdentifier","src":"4026:3:34"},"nativeSrc":"4026:25:34","nodeType":"YulFunctionCall","src":"4026:25:34"},{"arguments":[{"kind":"number","nativeSrc":"4057:1:34","nodeType":"YulLiteral","src":"4057:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4053:3:34","nodeType":"YulIdentifier","src":"4053:3:34"},"nativeSrc":"4053:6:34","nodeType":"YulFunctionCall","src":"4053:6:34"}],"functionName":{"name":"shl","nativeSrc":"4022:3:34","nodeType":"YulIdentifier","src":"4022:3:34"},"nativeSrc":"4022:38:34","nodeType":"YulFunctionCall","src":"4022:38:34"}],"functionName":{"name":"and","nativeSrc":"4011:3:34","nodeType":"YulIdentifier","src":"4011:3:34"},"nativeSrc":"4011:50:34","nodeType":"YulFunctionCall","src":"4011:50:34"},"variableNames":[{"name":"value","nativeSrc":"4002:5:34","nodeType":"YulIdentifier","src":"4002:5:34"}]}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3966:6:34","nodeType":"YulIdentifier","src":"3966:6:34"},{"kind":"number","nativeSrc":"3974:4:34","nodeType":"YulLiteral","src":"3974:4:34","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"3963:2:34","nodeType":"YulIdentifier","src":"3963:2:34"},"nativeSrc":"3963:16:34","nodeType":"YulFunctionCall","src":"3963:16:34"},"nativeSrc":"3960:111:34","nodeType":"YulIf","src":"3960:111:34"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32","nativeSrc":"3780:297:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"3854:5:34","nodeType":"YulTypedName","src":"3854:5:34","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3864:5:34","nodeType":"YulTypedName","src":"3864:5:34","type":""}],"src":"3780:297:34"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"610160604052348015610010575f80fd5b50336040518060400160405280600481526020016311d3d05560e21b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600481526020016311d3d05560e21b8152506040518060400160405280600481526020016311d3d05560e21b815250816003908161009391906102ea565b5060046100a082826102ea565b506100b091508390506005610192565b610120526100bf816006610192565b61014052815160208084019190912060e052815190820120610100524660a05261014b60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661018357604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61018c816101c4565b506103fc565b5f6020835110156101ad576101a683610215565b90506101be565b816101b884826102ea565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80829050601f8151111561023f578260405163305a27a960e01b815260040161017a91906103a4565b805161024a826103d9565b179392505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061027a57607f821691505b60208210810361029857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102e557805f5260205f20601f840160051c810160208510156102c35750805b601f840160051c820191505b818110156102e2575f81556001016102cf565b50505b505050565b81516001600160401b0381111561030357610303610252565b610317816103118454610266565b8461029e565b6020601f821160018114610349575f83156103325750848201515b5f19600385901b1c1916600184901b1784556102e2565b5f84815260208120601f198516915b828110156103785787850151825560209485019460019092019101610358565b508482101561039557868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80516020808301519190811015610298575f1960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161108161044d5f395f6108de01525f6108b101525f61079001525f61076801525f6106c301525f6106ed01525f61071701526110815ff3fe608060405234801561000f575f80fd5b506004361061012f575f3560e01c806379cc6790116100ad57806395d89b411161007d578063d505accf11610063578063d505accf1461026c578063dd62ed3e1461027f578063f2fde38b146102b7575f80fd5b806395d89b4114610251578063a9059cbb14610259575f80fd5b806379cc6790146101f55780637ecebe001461020857806384b0196e1461021b5780638da5cb5b14610236575f80fd5b8063313ce5671161010257806342966c68116100e857806342966c68146101b057806370a08231146101c5578063715018a6146101ed575f80fd5b8063313ce567146101995780633644e515146101a8575f80fd5b806306fdde0314610133578063095ea7b31461015157806318160ddd1461017457806323b872dd14610186575b5f80fd5b61013b6102ca565b6040516101489190610e0f565b60405180910390f35b61016461015f366004610e43565b61035a565b6040519015158152602001610148565b6002545b604051908152602001610148565b610164610194366004610e6b565b610373565b60405160128152602001610148565b610178610396565b6101c36101be366004610ea5565b6103a4565b005b6101786101d3366004610ebc565b6001600160a01b03165f9081526020819052604090205490565b6101c36103b1565b6101c3610203366004610e43565b6103c4565b610178610216366004610ebc565b6103dd565b6102236103fa565b6040516101489796959493929190610ed5565b6008546040516001600160a01b039091168152602001610148565b61013b61043c565b610164610267366004610e43565b61044b565b6101c361027a366004610f6b565b610458565b61017861028d366004610fd8565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6101c36102c5366004610ebc565b610593565b6060600380546102d990611009565b80601f016020809104026020016040519081016040528092919081815260200182805461030590611009565b80156103505780601f1061032757610100808354040283529160200191610350565b820191905f5260205f20905b81548152906001019060200180831161033357829003601f168201915b5050505050905090565b5f336103678185856105cd565b60019150505b92915050565b5f336103808582856105df565b61038b85858561065a565b506001949350505050565b5f61039f6106b7565b905090565b6103ae33826107e0565b50565b6103b9610814565b6103c25f610841565b565b6103cf8233836105df565b6103d982826107e0565b5050565b6001600160a01b0381165f9081526007602052604081205461036d565b5f6060805f805f606061040b6108aa565b6104136108d7565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600480546102d990611009565b5f3361036781858561065a565b834211156104815760405163313c898160e11b8152600481018590526024015b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886104cc8c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61052682610904565b90505f61053582878787610930565b9050896001600160a01b0316816001600160a01b03161461057c576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610478565b6105878a8a8a6105cd565b50505050505050505050565b61059b610814565b6001600160a01b0381166105c457604051631e4fbdf760e01b81525f6004820152602401610478565b6103ae81610841565b6105da838383600161095c565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610654578181101561064657604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610478565b61065484848484035f61095c565b50505050565b6001600160a01b03831661068357604051634b637e8f60e11b81525f6004820152602401610478565b6001600160a01b0382166106ac5760405163ec442f0560e01b81525f6004820152602401610478565b6105da838383610a2e565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561070f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561073957507f000000000000000000000000000000000000000000000000000000000000000090565b61039f604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b6001600160a01b03821661080957604051634b637e8f60e11b81525f6004820152602401610478565b6103d9825f83610a2e565b6008546001600160a01b031633146103c25760405163118cdaa760e01b8152336004820152602401610478565b600880546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b606061039f7f00000000000000000000000000000000000000000000000000000000000000006005610b54565b606061039f7f00000000000000000000000000000000000000000000000000000000000000006006610b54565b5f61036d6109106106b7565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8061094088888888610bfd565b9250925092506109508282610cc5565b50909695505050505050565b6001600160a01b0384166109855760405163e602df0560e01b81525f6004820152602401610478565b6001600160a01b0383166109ae57604051634a1406b160e11b81525f6004820152602401610478565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561065457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a2091815260200190565b60405180910390a350505050565b6001600160a01b038316610a58578060025f828254610a4d9190611041565b90915550610ac89050565b6001600160a01b0383165f9081526020819052604090205481811015610aaa5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610478565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610ae457600280548290039055610b02565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b4791815260200190565b60405180910390a3505050565b606060ff8314610b6e57610b6783610d7d565b905061036d565b818054610b7a90611009565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba690611009565b8015610bf15780601f10610bc857610100808354040283529160200191610bf1565b820191905f5260205f20905b815481529060010190602001808311610bd457829003601f168201915b5050505050905061036d565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610c3657505f91506003905082610cbb565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610c87573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610cb257505f925060019150829050610cbb565b92505f91508190505b9450945094915050565b5f826003811115610cd857610cd8611060565b03610ce1575050565b6001826003811115610cf557610cf5611060565b03610d135760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610d2757610d27611060565b03610d485760405163fce698f760e01b815260048101829052602401610478565b6003826003811115610d5c57610d5c611060565b036103d9576040516335e2f38360e21b815260048101829052602401610478565b60605f610d8983610dba565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f81111561036d57604051632cd44ac360e21b815260040160405180910390fd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610e216020830184610de1565b9392505050565b80356001600160a01b0381168114610e3e575f80fd5b919050565b5f8060408385031215610e54575f80fd5b610e5d83610e28565b946020939093013593505050565b5f805f60608486031215610e7d575f80fd5b610e8684610e28565b9250610e9460208501610e28565b929592945050506040919091013590565b5f60208284031215610eb5575f80fd5b5035919050565b5f60208284031215610ecc575f80fd5b610e2182610e28565b60ff60f81b8816815260e060208201525f610ef360e0830189610de1565b8281036040840152610f058189610de1565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015610f5a578351835260209384019390920191600101610f3c565b50909b9a5050505050505050505050565b5f805f805f805f60e0888a031215610f81575f80fd5b610f8a88610e28565b9650610f9860208901610e28565b95506040880135945060608801359350608088013560ff81168114610fbb575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f8060408385031215610fe9575f80fd5b610ff283610e28565b915061100060208401610e28565b90509250929050565b600181811c9082168061101d57607f821691505b60208210810361103b57634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561036d57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea164736f6c634300081a000a","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x11D3D055 PUSH1 0xE2 SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x11D3D055 PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x11D3D055 PUSH1 0xE2 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x93 SWAP2 SWAP1 PUSH2 0x2EA JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0xA0 DUP3 DUP3 PUSH2 0x2EA JUMP JUMPDEST POP PUSH2 0xB0 SWAP2 POP DUP4 SWAP1 POP PUSH1 0x5 PUSH2 0x192 JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH2 0xBF DUP2 PUSH1 0x6 PUSH2 0x192 JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH2 0x14B PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18C DUP2 PUSH2 0x1C4 JUMP JUMPDEST POP PUSH2 0x3FC JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x1AD JUMPI PUSH2 0x1A6 DUP4 PUSH2 0x215 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BE JUMP JUMPDEST DUP2 PUSH2 0x1B8 DUP5 DUP3 PUSH2 0x2EA JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x23F JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x3A4 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x24A DUP3 PUSH2 0x3D9 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x27A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x298 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2E5 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2C3 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2E2 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2CF JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x303 JUMPI PUSH2 0x303 PUSH2 0x252 JUMP JUMPDEST PUSH2 0x317 DUP2 PUSH2 0x311 DUP5 SLOAD PUSH2 0x266 JUMP JUMPDEST DUP5 PUSH2 0x29E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x349 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x332 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x2E2 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x378 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x358 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x395 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x298 JUMPI PUSH0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x1081 PUSH2 0x44D PUSH0 CODECOPY PUSH0 PUSH2 0x8DE ADD MSTORE PUSH0 PUSH2 0x8B1 ADD MSTORE PUSH0 PUSH2 0x790 ADD MSTORE PUSH0 PUSH2 0x768 ADD MSTORE PUSH0 PUSH2 0x6C3 ADD MSTORE PUSH0 PUSH2 0x6ED ADD MSTORE PUSH0 PUSH2 0x717 ADD MSTORE PUSH2 0x1081 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7D JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x259 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x236 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0xE8 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1ED JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1A8 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x186 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x13B PUSH2 0x2CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x164 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH2 0x164 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6B JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x396 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x178 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x3B1 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x3C4 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x223 PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH2 0x13B PUSH2 0x43C JUMP JUMPDEST PUSH2 0x164 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x44B JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0xF6B JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x2C5 CALLDATASIZE PUSH1 0x4 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x593 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x305 SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x350 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x327 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x350 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x333 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x367 DUP2 DUP6 DUP6 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x380 DUP6 DUP3 DUP6 PUSH2 0x5DF JUMP JUMPDEST PUSH2 0x38B DUP6 DUP6 DUP6 PUSH2 0x65A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x39F PUSH2 0x6B7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3AE CALLER DUP3 PUSH2 0x7E0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3B9 PUSH2 0x814 JUMP JUMPDEST PUSH2 0x3C2 PUSH0 PUSH2 0x841 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3CF DUP3 CALLER DUP4 PUSH2 0x5DF JUMP JUMPDEST PUSH2 0x3D9 DUP3 DUP3 PUSH2 0x7E0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x36D JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x40B PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x413 PUSH2 0x8D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1009 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x367 DUP2 DUP6 DUP6 PUSH2 0x65A JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x481 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x4CC DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x526 DUP3 PUSH2 0x904 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x535 DUP3 DUP8 DUP8 DUP8 PUSH2 0x930 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x57C JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x587 DUP11 DUP11 DUP11 PUSH2 0x5CD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x59B PUSH2 0x814 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x3AE DUP2 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x5DA DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x95C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x654 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x646 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x654 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x95C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x683 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6AC JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x5DA DUP4 DUP4 DUP4 PUSH2 0xA2E JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x70F JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x739 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x39F PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x809 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x3D9 DUP3 PUSH0 DUP4 PUSH2 0xA2E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x39F PUSH32 0x0 PUSH1 0x5 PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x39F PUSH32 0x0 PUSH1 0x6 PUSH2 0xB54 JUMP JUMPDEST PUSH0 PUSH2 0x36D PUSH2 0x910 PUSH2 0x6B7 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x940 DUP9 DUP9 DUP9 DUP9 PUSH2 0xBFD JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x950 DUP3 DUP3 PUSH2 0xCC5 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x9AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x654 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xA20 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA58 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xA4D SWAP2 SWAP1 PUSH2 0x1041 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xAC8 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xAAA JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE4 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xB02 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xB47 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xB6E JUMPI PUSH2 0xB67 DUP4 PUSH2 0xD7D JUMP JUMPDEST SWAP1 POP PUSH2 0x36D JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xB7A SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBA6 SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBC8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x36D JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xC36 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC87 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCB2 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xCBB JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCD8 JUMPI PUSH2 0xCD8 PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0xCE1 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCF5 JUMPI PUSH2 0xCF5 PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD27 JUMPI PUSH2 0xD27 PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0xD48 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD5C JUMPI PUSH2 0xD5C PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xD89 DUP4 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xE21 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDE1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE3E JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE54 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE5D DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE7D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE86 DUP5 PUSH2 0xE28 JUMP JUMPDEST SWAP3 POP PUSH2 0xE94 PUSH1 0x20 DUP6 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xECC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE21 DUP3 PUSH2 0xE28 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xEF3 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xDE1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xF05 DUP2 DUP10 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF5A JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xF3C JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xF81 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF8A DUP9 PUSH2 0xE28 JUMP JUMPDEST SWAP7 POP PUSH2 0xF98 PUSH1 0x20 DUP10 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xFBB JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFE9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFF2 DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH2 0x1000 PUSH1 0x20 DUP5 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x101D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x103B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x36D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"385:172:24:-:0;;;449:106;;;;;;;;;;509:10;1574:52:6;;;;;;;;;;;;;-1:-1:-1;;;1574:52:6;;;1613:4;3328:431:16;;;;;;;;;;;;;-1:-1:-1;;;3328:431:16;;;1896:113:3;;;;;;;;;;;;;-1:-1:-1;;;1896:113:3;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:3;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:3;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;3401:45:16;;-1:-1:-1;3401:4:16;;-1:-1:-1;3432:13:16;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;3122:25:34;3163:18;;;3156:34;;;;3206:18;;;3199:34;4255:13:16;3249:18:34;;;3242:34;4278:4:16;3292:19:34;;;3285:61;4168:7:16;;3094:19:34;;4204:80:16;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:16;3725:27;;-1:-1:-1;;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;2801:51:34;2774:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;385:172:24;;2914:340:12;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;:20::i;:::-;3077:27;;;;3033:215;3161:5;3135:46;3176:5;3161;3135:46;:::i;:::-;-1:-1:-1;1390:66:12;;-1:-1:-1;3033:215:12;2914:340;;;;:::o;2912:187:0:-;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;1708:286:12:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:12;;;;;;;;:::i;1836:72::-;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:12:o;14:127:34:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:518::-;759:2;754:3;751:11;748:421;;;795:5;792:1;785:16;839:4;836:1;826:18;909:2;897:10;893:19;890:1;886:27;880:4;876:38;945:4;933:10;930:20;927:47;;;-1:-1:-1;968:4:34;927:47;1023:2;1018:3;1014:12;1011:1;1007:20;1001:4;997:31;987:41;;1078:81;1096:2;1089:5;1086:13;1078:81;;;1155:1;1141:16;;1122:1;1111:13;1078:81;;;1082:3;;748:421;657:518;;;:::o;1351:1299::-;1471:10;;-1:-1:-1;;;;;1493:30:34;;1490:56;;;1526:18;;:::i;:::-;1555:97;1645:6;1605:38;1637:4;1631:11;1605:38;:::i;:::-;1599:4;1555:97;:::i;:::-;1701:4;1732:2;1721:14;;1749:1;1744:649;;;;2437:1;2454:6;2451:89;;;-1:-1:-1;2506:19:34;;;2500:26;2451:89;-1:-1:-1;;1308:1:34;1304:11;;;1300:24;1296:29;1286:40;1332:1;1328:11;;;1283:57;2553:81;;1714:930;;1744:649;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1780:20:34;;;1898:222;1912:7;1909:1;1906:14;1898:222;;;1994:19;;;1988:26;1973:42;;2101:4;2086:20;;;;2054:1;2042:14;;;;1928:12;1898:222;;;1902:3;2148:6;2139:7;2136:19;2133:201;;;2209:19;;;2203:26;-1:-1:-1;;2292:1:34;2288:14;;;2304:3;2284:24;2280:37;2276:42;2261:58;2246:74;;2133:201;-1:-1:-1;;;;2380:1:34;2364:14;;;2360:22;2347:36;;-1:-1:-1;1351:1299:34:o;3357:418::-;3506:2;3495:9;3488:21;3469:4;3538:6;3532:13;3581:6;3576:2;3565:9;3561:18;3554:34;3640:6;3635:2;3627:6;3623:15;3618:2;3607:9;3603:18;3597:50;3696:1;3691:2;3682:6;3671:9;3667:22;3663:31;3656:42;3766:2;3759;3755:7;3750:2;3742:6;3738:15;3734:29;3723:9;3719:45;3715:54;3707:62;;;3357:418;;;;:::o;3780:297::-;3898:12;;3945:4;3934:16;;;3928:23;;3898:12;3963:16;;3960:111;;;-1:-1:-1;;4037:4:34;4033:17;;;;4030:1;4026:25;4022:38;4011:50;;3780:297;-1:-1:-1;3780:297:34:o;:::-;385:172:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DOMAIN_SEPARATOR_1101":{"entryPoint":918,"id":1101,"parameterSlots":0,"returnSlots":1},"@_EIP712Name_2659":{"entryPoint":2218,"id":2659,"parameterSlots":0,"returnSlots":1},"@_EIP712Version_2671":{"entryPoint":2263,"id":2671,"parameterSlots":0,"returnSlots":1},"@_approve_715":{"entryPoint":1485,"id":715,"parameterSlots":3,"returnSlots":0},"@_approve_775":{"entryPoint":2396,"id":775,"parameterSlots":4,"returnSlots":0},"@_buildDomainSeparator_2589":{"entryPoint":null,"id":2589,"parameterSlots":0,"returnSlots":1},"@_burn_697":{"entryPoint":2016,"id":697,"parameterSlots":2,"returnSlots":0},"@_checkOwner_84":{"entryPoint":2068,"id":84,"parameterSlots":0,"returnSlots":0},"@_domainSeparatorV4_2568":{"entryPoint":1719,"id":2568,"parameterSlots":0,"returnSlots":1},"@_hashTypedDataV4_2605":{"entryPoint":2308,"id":2605,"parameterSlots":1,"returnSlots":1},"@_msgSender_1429":{"entryPoint":null,"id":1429,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_823":{"entryPoint":1503,"id":823,"parameterSlots":3,"returnSlots":0},"@_throwError_2444":{"entryPoint":3269,"id":2444,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":2113,"id":146,"parameterSlots":1,"returnSlots":0},"@_transfer_554":{"entryPoint":1626,"id":554,"parameterSlots":3,"returnSlots":0},"@_update_631":{"entryPoint":2606,"id":631,"parameterSlots":3,"returnSlots":0},"@_useNonce_1489":{"entryPoint":null,"id":1489,"parameterSlots":1,"returnSlots":1},"@allowance_451":{"entryPoint":null,"id":451,"parameterSlots":2,"returnSlots":1},"@approve_475":{"entryPoint":858,"id":475,"parameterSlots":2,"returnSlots":1},"@balanceOf_410":{"entryPoint":null,"id":410,"parameterSlots":1,"returnSlots":1},"@burnFrom_947":{"entryPoint":964,"id":947,"parameterSlots":2,"returnSlots":0},"@burn_926":{"entryPoint":932,"id":926,"parameterSlots":1,"returnSlots":0},"@byteLength_1633":{"entryPoint":3514,"id":1633,"parameterSlots":1,"returnSlots":1},"@decimals_388":{"entryPoint":null,"id":388,"parameterSlots":0,"returnSlots":1},"@eip712Domain_2647":{"entryPoint":1018,"id":2647,"parameterSlots":0,"returnSlots":7},"@name_370":{"entryPoint":714,"id":370,"parameterSlots":0,"returnSlots":1},"@nonces_1091":{"entryPoint":989,"id":1091,"parameterSlots":1,"returnSlots":1},"@nonces_1474":{"entryPoint":null,"id":1474,"parameterSlots":1,"returnSlots":1},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@permit_1074":{"entryPoint":1112,"id":1074,"parameterSlots":7,"returnSlots":0},"@recover_2395":{"entryPoint":2352,"id":2395,"parameterSlots":4,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":945,"id":98,"parameterSlots":0,"returnSlots":0},"@symbol_379":{"entryPoint":1084,"id":379,"parameterSlots":0,"returnSlots":1},"@toStringWithFallback_1700":{"entryPoint":2900,"id":1700,"parameterSlots":2,"returnSlots":1},"@toString_1601":{"entryPoint":3453,"id":1601,"parameterSlots":1,"returnSlots":1},"@toTypedDataHash_2745":{"entryPoint":null,"id":2745,"parameterSlots":2,"returnSlots":1},"@totalSupply_397":{"entryPoint":null,"id":397,"parameterSlots":0,"returnSlots":1},"@transferFrom_507":{"entryPoint":883,"id":507,"parameterSlots":3,"returnSlots":1},"@transferOwnership_126":{"entryPoint":1427,"id":126,"parameterSlots":1,"returnSlots":0},"@transfer_434":{"entryPoint":1099,"id":434,"parameterSlots":2,"returnSlots":1},"@tryRecover_2359":{"entryPoint":3069,"id":2359,"parameterSlots":4,"returnSlots":3},"abi_decode_address":{"entryPoint":3624,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4056,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3691,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":3947,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3651,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":3749,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3553,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3797,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4161,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":4105,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":4192,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8410:34","nodeType":"YulBlock","src":"0:8410:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"64:239:34","nodeType":"YulBlock","src":"64:239:34","statements":[{"nativeSrc":"74:26:34","nodeType":"YulVariableDeclaration","src":"74:26:34","value":{"arguments":[{"name":"value","nativeSrc":"94:5:34","nodeType":"YulIdentifier","src":"94:5:34"}],"functionName":{"name":"mload","nativeSrc":"88:5:34","nodeType":"YulIdentifier","src":"88:5:34"},"nativeSrc":"88:12:34","nodeType":"YulFunctionCall","src":"88:12:34"},"variables":[{"name":"length","nativeSrc":"78:6:34","nodeType":"YulTypedName","src":"78:6:34","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"116:3:34","nodeType":"YulIdentifier","src":"116:3:34"},{"name":"length","nativeSrc":"121:6:34","nodeType":"YulIdentifier","src":"121:6:34"}],"functionName":{"name":"mstore","nativeSrc":"109:6:34","nodeType":"YulIdentifier","src":"109:6:34"},"nativeSrc":"109:19:34","nodeType":"YulFunctionCall","src":"109:19:34"},"nativeSrc":"109:19:34","nodeType":"YulExpressionStatement","src":"109:19:34"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"147:3:34","nodeType":"YulIdentifier","src":"147:3:34"},{"kind":"number","nativeSrc":"152:4:34","nodeType":"YulLiteral","src":"152:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"143:3:34","nodeType":"YulIdentifier","src":"143:3:34"},"nativeSrc":"143:14:34","nodeType":"YulFunctionCall","src":"143:14:34"},{"arguments":[{"name":"value","nativeSrc":"163:5:34","nodeType":"YulIdentifier","src":"163:5:34"},{"kind":"number","nativeSrc":"170:4:34","nodeType":"YulLiteral","src":"170:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"159:3:34","nodeType":"YulIdentifier","src":"159:3:34"},"nativeSrc":"159:16:34","nodeType":"YulFunctionCall","src":"159:16:34"},{"name":"length","nativeSrc":"177:6:34","nodeType":"YulIdentifier","src":"177:6:34"}],"functionName":{"name":"mcopy","nativeSrc":"137:5:34","nodeType":"YulIdentifier","src":"137:5:34"},"nativeSrc":"137:47:34","nodeType":"YulFunctionCall","src":"137:47:34"},"nativeSrc":"137:47:34","nodeType":"YulExpressionStatement","src":"137:47:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"208:3:34","nodeType":"YulIdentifier","src":"208:3:34"},{"name":"length","nativeSrc":"213:6:34","nodeType":"YulIdentifier","src":"213:6:34"}],"functionName":{"name":"add","nativeSrc":"204:3:34","nodeType":"YulIdentifier","src":"204:3:34"},"nativeSrc":"204:16:34","nodeType":"YulFunctionCall","src":"204:16:34"},{"kind":"number","nativeSrc":"222:4:34","nodeType":"YulLiteral","src":"222:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"200:3:34","nodeType":"YulIdentifier","src":"200:3:34"},"nativeSrc":"200:27:34","nodeType":"YulFunctionCall","src":"200:27:34"},{"kind":"number","nativeSrc":"229:1:34","nodeType":"YulLiteral","src":"229:1:34","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"193:6:34","nodeType":"YulIdentifier","src":"193:6:34"},"nativeSrc":"193:38:34","nodeType":"YulFunctionCall","src":"193:38:34"},"nativeSrc":"193:38:34","nodeType":"YulExpressionStatement","src":"193:38:34"},{"nativeSrc":"240:57:34","nodeType":"YulAssignment","src":"240:57:34","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"255:3:34","nodeType":"YulIdentifier","src":"255:3:34"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"268:6:34","nodeType":"YulIdentifier","src":"268:6:34"},{"kind":"number","nativeSrc":"276:2:34","nodeType":"YulLiteral","src":"276:2:34","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"264:3:34","nodeType":"YulIdentifier","src":"264:3:34"},"nativeSrc":"264:15:34","nodeType":"YulFunctionCall","src":"264:15:34"},{"arguments":[{"kind":"number","nativeSrc":"285:2:34","nodeType":"YulLiteral","src":"285:2:34","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"281:3:34","nodeType":"YulIdentifier","src":"281:3:34"},"nativeSrc":"281:7:34","nodeType":"YulFunctionCall","src":"281:7:34"}],"functionName":{"name":"and","nativeSrc":"260:3:34","nodeType":"YulIdentifier","src":"260:3:34"},"nativeSrc":"260:29:34","nodeType":"YulFunctionCall","src":"260:29:34"}],"functionName":{"name":"add","nativeSrc":"251:3:34","nodeType":"YulIdentifier","src":"251:3:34"},"nativeSrc":"251:39:34","nodeType":"YulFunctionCall","src":"251:39:34"},{"kind":"number","nativeSrc":"292:4:34","nodeType":"YulLiteral","src":"292:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"247:3:34","nodeType":"YulIdentifier","src":"247:3:34"},"nativeSrc":"247:50:34","nodeType":"YulFunctionCall","src":"247:50:34"},"variableNames":[{"name":"end","nativeSrc":"240:3:34","nodeType":"YulIdentifier","src":"240:3:34"}]}]},"name":"abi_encode_string","nativeSrc":"14:289:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"41:5:34","nodeType":"YulTypedName","src":"41:5:34","type":""},{"name":"pos","nativeSrc":"48:3:34","nodeType":"YulTypedName","src":"48:3:34","type":""}],"returnVariables":[{"name":"end","nativeSrc":"56:3:34","nodeType":"YulTypedName","src":"56:3:34","type":""}],"src":"14:289:34"},{"body":{"nativeSrc":"429:99:34","nodeType":"YulBlock","src":"429:99:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"446:9:34","nodeType":"YulIdentifier","src":"446:9:34"},{"kind":"number","nativeSrc":"457:2:34","nodeType":"YulLiteral","src":"457:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"439:6:34","nodeType":"YulIdentifier","src":"439:6:34"},"nativeSrc":"439:21:34","nodeType":"YulFunctionCall","src":"439:21:34"},"nativeSrc":"439:21:34","nodeType":"YulExpressionStatement","src":"439:21:34"},{"nativeSrc":"469:53:34","nodeType":"YulAssignment","src":"469:53:34","value":{"arguments":[{"name":"value0","nativeSrc":"495:6:34","nodeType":"YulIdentifier","src":"495:6:34"},{"arguments":[{"name":"headStart","nativeSrc":"507:9:34","nodeType":"YulIdentifier","src":"507:9:34"},{"kind":"number","nativeSrc":"518:2:34","nodeType":"YulLiteral","src":"518:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"503:3:34","nodeType":"YulIdentifier","src":"503:3:34"},"nativeSrc":"503:18:34","nodeType":"YulFunctionCall","src":"503:18:34"}],"functionName":{"name":"abi_encode_string","nativeSrc":"477:17:34","nodeType":"YulIdentifier","src":"477:17:34"},"nativeSrc":"477:45:34","nodeType":"YulFunctionCall","src":"477:45:34"},"variableNames":[{"name":"tail","nativeSrc":"469:4:34","nodeType":"YulIdentifier","src":"469:4:34"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"308:220:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"398:9:34","nodeType":"YulTypedName","src":"398:9:34","type":""},{"name":"value0","nativeSrc":"409:6:34","nodeType":"YulTypedName","src":"409:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"420:4:34","nodeType":"YulTypedName","src":"420:4:34","type":""}],"src":"308:220:34"},{"body":{"nativeSrc":"582:147:34","nodeType":"YulBlock","src":"582:147:34","statements":[{"nativeSrc":"592:29:34","nodeType":"YulAssignment","src":"592:29:34","value":{"arguments":[{"name":"offset","nativeSrc":"614:6:34","nodeType":"YulIdentifier","src":"614:6:34"}],"functionName":{"name":"calldataload","nativeSrc":"601:12:34","nodeType":"YulIdentifier","src":"601:12:34"},"nativeSrc":"601:20:34","nodeType":"YulFunctionCall","src":"601:20:34"},"variableNames":[{"name":"value","nativeSrc":"592:5:34","nodeType":"YulIdentifier","src":"592:5:34"}]},{"body":{"nativeSrc":"707:16:34","nodeType":"YulBlock","src":"707:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"716:1:34","nodeType":"YulLiteral","src":"716:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"719:1:34","nodeType":"YulLiteral","src":"719:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"709:6:34","nodeType":"YulIdentifier","src":"709:6:34"},"nativeSrc":"709:12:34","nodeType":"YulFunctionCall","src":"709:12:34"},"nativeSrc":"709:12:34","nodeType":"YulExpressionStatement","src":"709:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"643:5:34","nodeType":"YulIdentifier","src":"643:5:34"},{"arguments":[{"name":"value","nativeSrc":"654:5:34","nodeType":"YulIdentifier","src":"654:5:34"},{"kind":"number","nativeSrc":"661:42:34","nodeType":"YulLiteral","src":"661:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"650:3:34","nodeType":"YulIdentifier","src":"650:3:34"},"nativeSrc":"650:54:34","nodeType":"YulFunctionCall","src":"650:54:34"}],"functionName":{"name":"eq","nativeSrc":"640:2:34","nodeType":"YulIdentifier","src":"640:2:34"},"nativeSrc":"640:65:34","nodeType":"YulFunctionCall","src":"640:65:34"}],"functionName":{"name":"iszero","nativeSrc":"633:6:34","nodeType":"YulIdentifier","src":"633:6:34"},"nativeSrc":"633:73:34","nodeType":"YulFunctionCall","src":"633:73:34"},"nativeSrc":"630:93:34","nodeType":"YulIf","src":"630:93:34"}]},"name":"abi_decode_address","nativeSrc":"533:196:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"561:6:34","nodeType":"YulTypedName","src":"561:6:34","type":""}],"returnVariables":[{"name":"value","nativeSrc":"572:5:34","nodeType":"YulTypedName","src":"572:5:34","type":""}],"src":"533:196:34"},{"body":{"nativeSrc":"821:213:34","nodeType":"YulBlock","src":"821:213:34","statements":[{"body":{"nativeSrc":"867:16:34","nodeType":"YulBlock","src":"867:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"876:1:34","nodeType":"YulLiteral","src":"876:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"879:1:34","nodeType":"YulLiteral","src":"879:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"869:6:34","nodeType":"YulIdentifier","src":"869:6:34"},"nativeSrc":"869:12:34","nodeType":"YulFunctionCall","src":"869:12:34"},"nativeSrc":"869:12:34","nodeType":"YulExpressionStatement","src":"869:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"842:7:34","nodeType":"YulIdentifier","src":"842:7:34"},{"name":"headStart","nativeSrc":"851:9:34","nodeType":"YulIdentifier","src":"851:9:34"}],"functionName":{"name":"sub","nativeSrc":"838:3:34","nodeType":"YulIdentifier","src":"838:3:34"},"nativeSrc":"838:23:34","nodeType":"YulFunctionCall","src":"838:23:34"},{"kind":"number","nativeSrc":"863:2:34","nodeType":"YulLiteral","src":"863:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"834:3:34","nodeType":"YulIdentifier","src":"834:3:34"},"nativeSrc":"834:32:34","nodeType":"YulFunctionCall","src":"834:32:34"},"nativeSrc":"831:52:34","nodeType":"YulIf","src":"831:52:34"},{"nativeSrc":"892:39:34","nodeType":"YulAssignment","src":"892:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"921:9:34","nodeType":"YulIdentifier","src":"921:9:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"902:18:34","nodeType":"YulIdentifier","src":"902:18:34"},"nativeSrc":"902:29:34","nodeType":"YulFunctionCall","src":"902:29:34"},"variableNames":[{"name":"value0","nativeSrc":"892:6:34","nodeType":"YulIdentifier","src":"892:6:34"}]},{"nativeSrc":"940:14:34","nodeType":"YulVariableDeclaration","src":"940:14:34","value":{"kind":"number","nativeSrc":"953:1:34","nodeType":"YulLiteral","src":"953:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"944:5:34","nodeType":"YulTypedName","src":"944:5:34","type":""}]},{"nativeSrc":"963:41:34","nodeType":"YulAssignment","src":"963:41:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"989:9:34","nodeType":"YulIdentifier","src":"989:9:34"},{"kind":"number","nativeSrc":"1000:2:34","nodeType":"YulLiteral","src":"1000:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"985:3:34","nodeType":"YulIdentifier","src":"985:3:34"},"nativeSrc":"985:18:34","nodeType":"YulFunctionCall","src":"985:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"972:12:34","nodeType":"YulIdentifier","src":"972:12:34"},"nativeSrc":"972:32:34","nodeType":"YulFunctionCall","src":"972:32:34"},"variableNames":[{"name":"value","nativeSrc":"963:5:34","nodeType":"YulIdentifier","src":"963:5:34"}]},{"nativeSrc":"1013:15:34","nodeType":"YulAssignment","src":"1013:15:34","value":{"name":"value","nativeSrc":"1023:5:34","nodeType":"YulIdentifier","src":"1023:5:34"},"variableNames":[{"name":"value1","nativeSrc":"1013:6:34","nodeType":"YulIdentifier","src":"1013:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"734:300:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"779:9:34","nodeType":"YulTypedName","src":"779:9:34","type":""},{"name":"dataEnd","nativeSrc":"790:7:34","nodeType":"YulTypedName","src":"790:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"802:6:34","nodeType":"YulTypedName","src":"802:6:34","type":""},{"name":"value1","nativeSrc":"810:6:34","nodeType":"YulTypedName","src":"810:6:34","type":""}],"src":"734:300:34"},{"body":{"nativeSrc":"1134:92:34","nodeType":"YulBlock","src":"1134:92:34","statements":[{"nativeSrc":"1144:26:34","nodeType":"YulAssignment","src":"1144:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1156:9:34","nodeType":"YulIdentifier","src":"1156:9:34"},{"kind":"number","nativeSrc":"1167:2:34","nodeType":"YulLiteral","src":"1167:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1152:3:34","nodeType":"YulIdentifier","src":"1152:3:34"},"nativeSrc":"1152:18:34","nodeType":"YulFunctionCall","src":"1152:18:34"},"variableNames":[{"name":"tail","nativeSrc":"1144:4:34","nodeType":"YulIdentifier","src":"1144:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1186:9:34","nodeType":"YulIdentifier","src":"1186:9:34"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1211:6:34","nodeType":"YulIdentifier","src":"1211:6:34"}],"functionName":{"name":"iszero","nativeSrc":"1204:6:34","nodeType":"YulIdentifier","src":"1204:6:34"},"nativeSrc":"1204:14:34","nodeType":"YulFunctionCall","src":"1204:14:34"}],"functionName":{"name":"iszero","nativeSrc":"1197:6:34","nodeType":"YulIdentifier","src":"1197:6:34"},"nativeSrc":"1197:22:34","nodeType":"YulFunctionCall","src":"1197:22:34"}],"functionName":{"name":"mstore","nativeSrc":"1179:6:34","nodeType":"YulIdentifier","src":"1179:6:34"},"nativeSrc":"1179:41:34","nodeType":"YulFunctionCall","src":"1179:41:34"},"nativeSrc":"1179:41:34","nodeType":"YulExpressionStatement","src":"1179:41:34"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1039:187:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1103:9:34","nodeType":"YulTypedName","src":"1103:9:34","type":""},{"name":"value0","nativeSrc":"1114:6:34","nodeType":"YulTypedName","src":"1114:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1125:4:34","nodeType":"YulTypedName","src":"1125:4:34","type":""}],"src":"1039:187:34"},{"body":{"nativeSrc":"1332:76:34","nodeType":"YulBlock","src":"1332:76:34","statements":[{"nativeSrc":"1342:26:34","nodeType":"YulAssignment","src":"1342:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1354:9:34","nodeType":"YulIdentifier","src":"1354:9:34"},{"kind":"number","nativeSrc":"1365:2:34","nodeType":"YulLiteral","src":"1365:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1350:3:34","nodeType":"YulIdentifier","src":"1350:3:34"},"nativeSrc":"1350:18:34","nodeType":"YulFunctionCall","src":"1350:18:34"},"variableNames":[{"name":"tail","nativeSrc":"1342:4:34","nodeType":"YulIdentifier","src":"1342:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1384:9:34","nodeType":"YulIdentifier","src":"1384:9:34"},{"name":"value0","nativeSrc":"1395:6:34","nodeType":"YulIdentifier","src":"1395:6:34"}],"functionName":{"name":"mstore","nativeSrc":"1377:6:34","nodeType":"YulIdentifier","src":"1377:6:34"},"nativeSrc":"1377:25:34","nodeType":"YulFunctionCall","src":"1377:25:34"},"nativeSrc":"1377:25:34","nodeType":"YulExpressionStatement","src":"1377:25:34"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"1231:177:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1301:9:34","nodeType":"YulTypedName","src":"1301:9:34","type":""},{"name":"value0","nativeSrc":"1312:6:34","nodeType":"YulTypedName","src":"1312:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1323:4:34","nodeType":"YulTypedName","src":"1323:4:34","type":""}],"src":"1231:177:34"},{"body":{"nativeSrc":"1517:270:34","nodeType":"YulBlock","src":"1517:270:34","statements":[{"body":{"nativeSrc":"1563:16:34","nodeType":"YulBlock","src":"1563:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1572:1:34","nodeType":"YulLiteral","src":"1572:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1575:1:34","nodeType":"YulLiteral","src":"1575:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1565:6:34","nodeType":"YulIdentifier","src":"1565:6:34"},"nativeSrc":"1565:12:34","nodeType":"YulFunctionCall","src":"1565:12:34"},"nativeSrc":"1565:12:34","nodeType":"YulExpressionStatement","src":"1565:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1538:7:34","nodeType":"YulIdentifier","src":"1538:7:34"},{"name":"headStart","nativeSrc":"1547:9:34","nodeType":"YulIdentifier","src":"1547:9:34"}],"functionName":{"name":"sub","nativeSrc":"1534:3:34","nodeType":"YulIdentifier","src":"1534:3:34"},"nativeSrc":"1534:23:34","nodeType":"YulFunctionCall","src":"1534:23:34"},{"kind":"number","nativeSrc":"1559:2:34","nodeType":"YulLiteral","src":"1559:2:34","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"1530:3:34","nodeType":"YulIdentifier","src":"1530:3:34"},"nativeSrc":"1530:32:34","nodeType":"YulFunctionCall","src":"1530:32:34"},"nativeSrc":"1527:52:34","nodeType":"YulIf","src":"1527:52:34"},{"nativeSrc":"1588:39:34","nodeType":"YulAssignment","src":"1588:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1617:9:34","nodeType":"YulIdentifier","src":"1617:9:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1598:18:34","nodeType":"YulIdentifier","src":"1598:18:34"},"nativeSrc":"1598:29:34","nodeType":"YulFunctionCall","src":"1598:29:34"},"variableNames":[{"name":"value0","nativeSrc":"1588:6:34","nodeType":"YulIdentifier","src":"1588:6:34"}]},{"nativeSrc":"1636:48:34","nodeType":"YulAssignment","src":"1636:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1669:9:34","nodeType":"YulIdentifier","src":"1669:9:34"},{"kind":"number","nativeSrc":"1680:2:34","nodeType":"YulLiteral","src":"1680:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1665:3:34","nodeType":"YulIdentifier","src":"1665:3:34"},"nativeSrc":"1665:18:34","nodeType":"YulFunctionCall","src":"1665:18:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1646:18:34","nodeType":"YulIdentifier","src":"1646:18:34"},"nativeSrc":"1646:38:34","nodeType":"YulFunctionCall","src":"1646:38:34"},"variableNames":[{"name":"value1","nativeSrc":"1636:6:34","nodeType":"YulIdentifier","src":"1636:6:34"}]},{"nativeSrc":"1693:14:34","nodeType":"YulVariableDeclaration","src":"1693:14:34","value":{"kind":"number","nativeSrc":"1706:1:34","nodeType":"YulLiteral","src":"1706:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1697:5:34","nodeType":"YulTypedName","src":"1697:5:34","type":""}]},{"nativeSrc":"1716:41:34","nodeType":"YulAssignment","src":"1716:41:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1742:9:34","nodeType":"YulIdentifier","src":"1742:9:34"},{"kind":"number","nativeSrc":"1753:2:34","nodeType":"YulLiteral","src":"1753:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1738:3:34","nodeType":"YulIdentifier","src":"1738:3:34"},"nativeSrc":"1738:18:34","nodeType":"YulFunctionCall","src":"1738:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"1725:12:34","nodeType":"YulIdentifier","src":"1725:12:34"},"nativeSrc":"1725:32:34","nodeType":"YulFunctionCall","src":"1725:32:34"},"variableNames":[{"name":"value","nativeSrc":"1716:5:34","nodeType":"YulIdentifier","src":"1716:5:34"}]},{"nativeSrc":"1766:15:34","nodeType":"YulAssignment","src":"1766:15:34","value":{"name":"value","nativeSrc":"1776:5:34","nodeType":"YulIdentifier","src":"1776:5:34"},"variableNames":[{"name":"value2","nativeSrc":"1766:6:34","nodeType":"YulIdentifier","src":"1766:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"1413:374:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1467:9:34","nodeType":"YulTypedName","src":"1467:9:34","type":""},{"name":"dataEnd","nativeSrc":"1478:7:34","nodeType":"YulTypedName","src":"1478:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1490:6:34","nodeType":"YulTypedName","src":"1490:6:34","type":""},{"name":"value1","nativeSrc":"1498:6:34","nodeType":"YulTypedName","src":"1498:6:34","type":""},{"name":"value2","nativeSrc":"1506:6:34","nodeType":"YulTypedName","src":"1506:6:34","type":""}],"src":"1413:374:34"},{"body":{"nativeSrc":"1889:87:34","nodeType":"YulBlock","src":"1889:87:34","statements":[{"nativeSrc":"1899:26:34","nodeType":"YulAssignment","src":"1899:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1911:9:34","nodeType":"YulIdentifier","src":"1911:9:34"},{"kind":"number","nativeSrc":"1922:2:34","nodeType":"YulLiteral","src":"1922:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1907:3:34","nodeType":"YulIdentifier","src":"1907:3:34"},"nativeSrc":"1907:18:34","nodeType":"YulFunctionCall","src":"1907:18:34"},"variableNames":[{"name":"tail","nativeSrc":"1899:4:34","nodeType":"YulIdentifier","src":"1899:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1941:9:34","nodeType":"YulIdentifier","src":"1941:9:34"},{"arguments":[{"name":"value0","nativeSrc":"1956:6:34","nodeType":"YulIdentifier","src":"1956:6:34"},{"kind":"number","nativeSrc":"1964:4:34","nodeType":"YulLiteral","src":"1964:4:34","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"1952:3:34","nodeType":"YulIdentifier","src":"1952:3:34"},"nativeSrc":"1952:17:34","nodeType":"YulFunctionCall","src":"1952:17:34"}],"functionName":{"name":"mstore","nativeSrc":"1934:6:34","nodeType":"YulIdentifier","src":"1934:6:34"},"nativeSrc":"1934:36:34","nodeType":"YulFunctionCall","src":"1934:36:34"},"nativeSrc":"1934:36:34","nodeType":"YulExpressionStatement","src":"1934:36:34"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"1792:184:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1858:9:34","nodeType":"YulTypedName","src":"1858:9:34","type":""},{"name":"value0","nativeSrc":"1869:6:34","nodeType":"YulTypedName","src":"1869:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1880:4:34","nodeType":"YulTypedName","src":"1880:4:34","type":""}],"src":"1792:184:34"},{"body":{"nativeSrc":"2082:76:34","nodeType":"YulBlock","src":"2082:76:34","statements":[{"nativeSrc":"2092:26:34","nodeType":"YulAssignment","src":"2092:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"2104:9:34","nodeType":"YulIdentifier","src":"2104:9:34"},{"kind":"number","nativeSrc":"2115:2:34","nodeType":"YulLiteral","src":"2115:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2100:3:34","nodeType":"YulIdentifier","src":"2100:3:34"},"nativeSrc":"2100:18:34","nodeType":"YulFunctionCall","src":"2100:18:34"},"variableNames":[{"name":"tail","nativeSrc":"2092:4:34","nodeType":"YulIdentifier","src":"2092:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2134:9:34","nodeType":"YulIdentifier","src":"2134:9:34"},{"name":"value0","nativeSrc":"2145:6:34","nodeType":"YulIdentifier","src":"2145:6:34"}],"functionName":{"name":"mstore","nativeSrc":"2127:6:34","nodeType":"YulIdentifier","src":"2127:6:34"},"nativeSrc":"2127:25:34","nodeType":"YulFunctionCall","src":"2127:25:34"},"nativeSrc":"2127:25:34","nodeType":"YulExpressionStatement","src":"2127:25:34"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"1981:177:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2051:9:34","nodeType":"YulTypedName","src":"2051:9:34","type":""},{"name":"value0","nativeSrc":"2062:6:34","nodeType":"YulTypedName","src":"2062:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2073:4:34","nodeType":"YulTypedName","src":"2073:4:34","type":""}],"src":"1981:177:34"},{"body":{"nativeSrc":"2233:156:34","nodeType":"YulBlock","src":"2233:156:34","statements":[{"body":{"nativeSrc":"2279:16:34","nodeType":"YulBlock","src":"2279:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2288:1:34","nodeType":"YulLiteral","src":"2288:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"2291:1:34","nodeType":"YulLiteral","src":"2291:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2281:6:34","nodeType":"YulIdentifier","src":"2281:6:34"},"nativeSrc":"2281:12:34","nodeType":"YulFunctionCall","src":"2281:12:34"},"nativeSrc":"2281:12:34","nodeType":"YulExpressionStatement","src":"2281:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2254:7:34","nodeType":"YulIdentifier","src":"2254:7:34"},{"name":"headStart","nativeSrc":"2263:9:34","nodeType":"YulIdentifier","src":"2263:9:34"}],"functionName":{"name":"sub","nativeSrc":"2250:3:34","nodeType":"YulIdentifier","src":"2250:3:34"},"nativeSrc":"2250:23:34","nodeType":"YulFunctionCall","src":"2250:23:34"},{"kind":"number","nativeSrc":"2275:2:34","nodeType":"YulLiteral","src":"2275:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2246:3:34","nodeType":"YulIdentifier","src":"2246:3:34"},"nativeSrc":"2246:32:34","nodeType":"YulFunctionCall","src":"2246:32:34"},"nativeSrc":"2243:52:34","nodeType":"YulIf","src":"2243:52:34"},{"nativeSrc":"2304:14:34","nodeType":"YulVariableDeclaration","src":"2304:14:34","value":{"kind":"number","nativeSrc":"2317:1:34","nodeType":"YulLiteral","src":"2317:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2308:5:34","nodeType":"YulTypedName","src":"2308:5:34","type":""}]},{"nativeSrc":"2327:32:34","nodeType":"YulAssignment","src":"2327:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"2349:9:34","nodeType":"YulIdentifier","src":"2349:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"2336:12:34","nodeType":"YulIdentifier","src":"2336:12:34"},"nativeSrc":"2336:23:34","nodeType":"YulFunctionCall","src":"2336:23:34"},"variableNames":[{"name":"value","nativeSrc":"2327:5:34","nodeType":"YulIdentifier","src":"2327:5:34"}]},{"nativeSrc":"2368:15:34","nodeType":"YulAssignment","src":"2368:15:34","value":{"name":"value","nativeSrc":"2378:5:34","nodeType":"YulIdentifier","src":"2378:5:34"},"variableNames":[{"name":"value0","nativeSrc":"2368:6:34","nodeType":"YulIdentifier","src":"2368:6:34"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2163:226:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2199:9:34","nodeType":"YulTypedName","src":"2199:9:34","type":""},{"name":"dataEnd","nativeSrc":"2210:7:34","nodeType":"YulTypedName","src":"2210:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2222:6:34","nodeType":"YulTypedName","src":"2222:6:34","type":""}],"src":"2163:226:34"},{"body":{"nativeSrc":"2464:116:34","nodeType":"YulBlock","src":"2464:116:34","statements":[{"body":{"nativeSrc":"2510:16:34","nodeType":"YulBlock","src":"2510:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2519:1:34","nodeType":"YulLiteral","src":"2519:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"2522:1:34","nodeType":"YulLiteral","src":"2522:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2512:6:34","nodeType":"YulIdentifier","src":"2512:6:34"},"nativeSrc":"2512:12:34","nodeType":"YulFunctionCall","src":"2512:12:34"},"nativeSrc":"2512:12:34","nodeType":"YulExpressionStatement","src":"2512:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2485:7:34","nodeType":"YulIdentifier","src":"2485:7:34"},{"name":"headStart","nativeSrc":"2494:9:34","nodeType":"YulIdentifier","src":"2494:9:34"}],"functionName":{"name":"sub","nativeSrc":"2481:3:34","nodeType":"YulIdentifier","src":"2481:3:34"},"nativeSrc":"2481:23:34","nodeType":"YulFunctionCall","src":"2481:23:34"},{"kind":"number","nativeSrc":"2506:2:34","nodeType":"YulLiteral","src":"2506:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2477:3:34","nodeType":"YulIdentifier","src":"2477:3:34"},"nativeSrc":"2477:32:34","nodeType":"YulFunctionCall","src":"2477:32:34"},"nativeSrc":"2474:52:34","nodeType":"YulIf","src":"2474:52:34"},{"nativeSrc":"2535:39:34","nodeType":"YulAssignment","src":"2535:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"2564:9:34","nodeType":"YulIdentifier","src":"2564:9:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2545:18:34","nodeType":"YulIdentifier","src":"2545:18:34"},"nativeSrc":"2545:29:34","nodeType":"YulFunctionCall","src":"2545:29:34"},"variableNames":[{"name":"value0","nativeSrc":"2535:6:34","nodeType":"YulIdentifier","src":"2535:6:34"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2394:186:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2430:9:34","nodeType":"YulTypedName","src":"2430:9:34","type":""},{"name":"dataEnd","nativeSrc":"2441:7:34","nodeType":"YulTypedName","src":"2441:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2453:6:34","nodeType":"YulTypedName","src":"2453:6:34","type":""}],"src":"2394:186:34"},{"body":{"nativeSrc":"2942:904:34","nodeType":"YulBlock","src":"2942:904:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2959:9:34","nodeType":"YulIdentifier","src":"2959:9:34"},{"arguments":[{"name":"value0","nativeSrc":"2974:6:34","nodeType":"YulIdentifier","src":"2974:6:34"},{"arguments":[{"kind":"number","nativeSrc":"2986:3:34","nodeType":"YulLiteral","src":"2986:3:34","type":"","value":"248"},{"kind":"number","nativeSrc":"2991:3:34","nodeType":"YulLiteral","src":"2991:3:34","type":"","value":"255"}],"functionName":{"name":"shl","nativeSrc":"2982:3:34","nodeType":"YulIdentifier","src":"2982:3:34"},"nativeSrc":"2982:13:34","nodeType":"YulFunctionCall","src":"2982:13:34"}],"functionName":{"name":"and","nativeSrc":"2970:3:34","nodeType":"YulIdentifier","src":"2970:3:34"},"nativeSrc":"2970:26:34","nodeType":"YulFunctionCall","src":"2970:26:34"}],"functionName":{"name":"mstore","nativeSrc":"2952:6:34","nodeType":"YulIdentifier","src":"2952:6:34"},"nativeSrc":"2952:45:34","nodeType":"YulFunctionCall","src":"2952:45:34"},"nativeSrc":"2952:45:34","nodeType":"YulExpressionStatement","src":"2952:45:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3017:9:34","nodeType":"YulIdentifier","src":"3017:9:34"},{"kind":"number","nativeSrc":"3028:2:34","nodeType":"YulLiteral","src":"3028:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3013:3:34","nodeType":"YulIdentifier","src":"3013:3:34"},"nativeSrc":"3013:18:34","nodeType":"YulFunctionCall","src":"3013:18:34"},{"kind":"number","nativeSrc":"3033:3:34","nodeType":"YulLiteral","src":"3033:3:34","type":"","value":"224"}],"functionName":{"name":"mstore","nativeSrc":"3006:6:34","nodeType":"YulIdentifier","src":"3006:6:34"},"nativeSrc":"3006:31:34","nodeType":"YulFunctionCall","src":"3006:31:34"},"nativeSrc":"3006:31:34","nodeType":"YulExpressionStatement","src":"3006:31:34"},{"nativeSrc":"3046:60:34","nodeType":"YulVariableDeclaration","src":"3046:60:34","value":{"arguments":[{"name":"value1","nativeSrc":"3078:6:34","nodeType":"YulIdentifier","src":"3078:6:34"},{"arguments":[{"name":"headStart","nativeSrc":"3090:9:34","nodeType":"YulIdentifier","src":"3090:9:34"},{"kind":"number","nativeSrc":"3101:3:34","nodeType":"YulLiteral","src":"3101:3:34","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"3086:3:34","nodeType":"YulIdentifier","src":"3086:3:34"},"nativeSrc":"3086:19:34","nodeType":"YulFunctionCall","src":"3086:19:34"}],"functionName":{"name":"abi_encode_string","nativeSrc":"3060:17:34","nodeType":"YulIdentifier","src":"3060:17:34"},"nativeSrc":"3060:46:34","nodeType":"YulFunctionCall","src":"3060:46:34"},"variables":[{"name":"tail_1","nativeSrc":"3050:6:34","nodeType":"YulTypedName","src":"3050:6:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3126:9:34","nodeType":"YulIdentifier","src":"3126:9:34"},{"kind":"number","nativeSrc":"3137:2:34","nodeType":"YulLiteral","src":"3137:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3122:3:34","nodeType":"YulIdentifier","src":"3122:3:34"},"nativeSrc":"3122:18:34","nodeType":"YulFunctionCall","src":"3122:18:34"},{"arguments":[{"name":"tail_1","nativeSrc":"3146:6:34","nodeType":"YulIdentifier","src":"3146:6:34"},{"name":"headStart","nativeSrc":"3154:9:34","nodeType":"YulIdentifier","src":"3154:9:34"}],"functionName":{"name":"sub","nativeSrc":"3142:3:34","nodeType":"YulIdentifier","src":"3142:3:34"},"nativeSrc":"3142:22:34","nodeType":"YulFunctionCall","src":"3142:22:34"}],"functionName":{"name":"mstore","nativeSrc":"3115:6:34","nodeType":"YulIdentifier","src":"3115:6:34"},"nativeSrc":"3115:50:34","nodeType":"YulFunctionCall","src":"3115:50:34"},"nativeSrc":"3115:50:34","nodeType":"YulExpressionStatement","src":"3115:50:34"},{"nativeSrc":"3174:47:34","nodeType":"YulVariableDeclaration","src":"3174:47:34","value":{"arguments":[{"name":"value2","nativeSrc":"3206:6:34","nodeType":"YulIdentifier","src":"3206:6:34"},{"name":"tail_1","nativeSrc":"3214:6:34","nodeType":"YulIdentifier","src":"3214:6:34"}],"functionName":{"name":"abi_encode_string","nativeSrc":"3188:17:34","nodeType":"YulIdentifier","src":"3188:17:34"},"nativeSrc":"3188:33:34","nodeType":"YulFunctionCall","src":"3188:33:34"},"variables":[{"name":"tail_2","nativeSrc":"3178:6:34","nodeType":"YulTypedName","src":"3178:6:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3241:9:34","nodeType":"YulIdentifier","src":"3241:9:34"},{"kind":"number","nativeSrc":"3252:2:34","nodeType":"YulLiteral","src":"3252:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3237:3:34","nodeType":"YulIdentifier","src":"3237:3:34"},"nativeSrc":"3237:18:34","nodeType":"YulFunctionCall","src":"3237:18:34"},{"name":"value3","nativeSrc":"3257:6:34","nodeType":"YulIdentifier","src":"3257:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3230:6:34","nodeType":"YulIdentifier","src":"3230:6:34"},"nativeSrc":"3230:34:34","nodeType":"YulFunctionCall","src":"3230:34:34"},"nativeSrc":"3230:34:34","nodeType":"YulExpressionStatement","src":"3230:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3284:9:34","nodeType":"YulIdentifier","src":"3284:9:34"},{"kind":"number","nativeSrc":"3295:3:34","nodeType":"YulLiteral","src":"3295:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3280:3:34","nodeType":"YulIdentifier","src":"3280:3:34"},"nativeSrc":"3280:19:34","nodeType":"YulFunctionCall","src":"3280:19:34"},{"arguments":[{"name":"value4","nativeSrc":"3305:6:34","nodeType":"YulIdentifier","src":"3305:6:34"},{"kind":"number","nativeSrc":"3313:42:34","nodeType":"YulLiteral","src":"3313:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3301:3:34","nodeType":"YulIdentifier","src":"3301:3:34"},"nativeSrc":"3301:55:34","nodeType":"YulFunctionCall","src":"3301:55:34"}],"functionName":{"name":"mstore","nativeSrc":"3273:6:34","nodeType":"YulIdentifier","src":"3273:6:34"},"nativeSrc":"3273:84:34","nodeType":"YulFunctionCall","src":"3273:84:34"},"nativeSrc":"3273:84:34","nodeType":"YulExpressionStatement","src":"3273:84:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3377:9:34","nodeType":"YulIdentifier","src":"3377:9:34"},{"kind":"number","nativeSrc":"3388:3:34","nodeType":"YulLiteral","src":"3388:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"3373:3:34","nodeType":"YulIdentifier","src":"3373:3:34"},"nativeSrc":"3373:19:34","nodeType":"YulFunctionCall","src":"3373:19:34"},{"name":"value5","nativeSrc":"3394:6:34","nodeType":"YulIdentifier","src":"3394:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3366:6:34","nodeType":"YulIdentifier","src":"3366:6:34"},"nativeSrc":"3366:35:34","nodeType":"YulFunctionCall","src":"3366:35:34"},"nativeSrc":"3366:35:34","nodeType":"YulExpressionStatement","src":"3366:35:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3421:9:34","nodeType":"YulIdentifier","src":"3421:9:34"},{"kind":"number","nativeSrc":"3432:3:34","nodeType":"YulLiteral","src":"3432:3:34","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"3417:3:34","nodeType":"YulIdentifier","src":"3417:3:34"},"nativeSrc":"3417:19:34","nodeType":"YulFunctionCall","src":"3417:19:34"},{"arguments":[{"name":"tail_2","nativeSrc":"3442:6:34","nodeType":"YulIdentifier","src":"3442:6:34"},{"name":"headStart","nativeSrc":"3450:9:34","nodeType":"YulIdentifier","src":"3450:9:34"}],"functionName":{"name":"sub","nativeSrc":"3438:3:34","nodeType":"YulIdentifier","src":"3438:3:34"},"nativeSrc":"3438:22:34","nodeType":"YulFunctionCall","src":"3438:22:34"}],"functionName":{"name":"mstore","nativeSrc":"3410:6:34","nodeType":"YulIdentifier","src":"3410:6:34"},"nativeSrc":"3410:51:34","nodeType":"YulFunctionCall","src":"3410:51:34"},"nativeSrc":"3410:51:34","nodeType":"YulExpressionStatement","src":"3410:51:34"},{"nativeSrc":"3470:17:34","nodeType":"YulVariableDeclaration","src":"3470:17:34","value":{"name":"tail_2","nativeSrc":"3481:6:34","nodeType":"YulIdentifier","src":"3481:6:34"},"variables":[{"name":"pos","nativeSrc":"3474:3:34","nodeType":"YulTypedName","src":"3474:3:34","type":""}]},{"nativeSrc":"3496:27:34","nodeType":"YulVariableDeclaration","src":"3496:27:34","value":{"arguments":[{"name":"value6","nativeSrc":"3516:6:34","nodeType":"YulIdentifier","src":"3516:6:34"}],"functionName":{"name":"mload","nativeSrc":"3510:5:34","nodeType":"YulIdentifier","src":"3510:5:34"},"nativeSrc":"3510:13:34","nodeType":"YulFunctionCall","src":"3510:13:34"},"variables":[{"name":"length","nativeSrc":"3500:6:34","nodeType":"YulTypedName","src":"3500:6:34","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nativeSrc":"3539:6:34","nodeType":"YulIdentifier","src":"3539:6:34"},{"name":"length","nativeSrc":"3547:6:34","nodeType":"YulIdentifier","src":"3547:6:34"}],"functionName":{"name":"mstore","nativeSrc":"3532:6:34","nodeType":"YulIdentifier","src":"3532:6:34"},"nativeSrc":"3532:22:34","nodeType":"YulFunctionCall","src":"3532:22:34"},"nativeSrc":"3532:22:34","nodeType":"YulExpressionStatement","src":"3532:22:34"},{"nativeSrc":"3563:22:34","nodeType":"YulAssignment","src":"3563:22:34","value":{"arguments":[{"name":"tail_2","nativeSrc":"3574:6:34","nodeType":"YulIdentifier","src":"3574:6:34"},{"kind":"number","nativeSrc":"3582:2:34","nodeType":"YulLiteral","src":"3582:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3570:3:34","nodeType":"YulIdentifier","src":"3570:3:34"},"nativeSrc":"3570:15:34","nodeType":"YulFunctionCall","src":"3570:15:34"},"variableNames":[{"name":"pos","nativeSrc":"3563:3:34","nodeType":"YulIdentifier","src":"3563:3:34"}]},{"nativeSrc":"3594:29:34","nodeType":"YulVariableDeclaration","src":"3594:29:34","value":{"arguments":[{"name":"value6","nativeSrc":"3612:6:34","nodeType":"YulIdentifier","src":"3612:6:34"},{"kind":"number","nativeSrc":"3620:2:34","nodeType":"YulLiteral","src":"3620:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3608:3:34","nodeType":"YulIdentifier","src":"3608:3:34"},"nativeSrc":"3608:15:34","nodeType":"YulFunctionCall","src":"3608:15:34"},"variables":[{"name":"srcPtr","nativeSrc":"3598:6:34","nodeType":"YulTypedName","src":"3598:6:34","type":""}]},{"nativeSrc":"3632:10:34","nodeType":"YulVariableDeclaration","src":"3632:10:34","value":{"kind":"number","nativeSrc":"3641:1:34","nodeType":"YulLiteral","src":"3641:1:34","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"3636:1:34","nodeType":"YulTypedName","src":"3636:1:34","type":""}]},{"body":{"nativeSrc":"3700:120:34","nodeType":"YulBlock","src":"3700:120:34","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3721:3:34","nodeType":"YulIdentifier","src":"3721:3:34"},{"arguments":[{"name":"srcPtr","nativeSrc":"3732:6:34","nodeType":"YulIdentifier","src":"3732:6:34"}],"functionName":{"name":"mload","nativeSrc":"3726:5:34","nodeType":"YulIdentifier","src":"3726:5:34"},"nativeSrc":"3726:13:34","nodeType":"YulFunctionCall","src":"3726:13:34"}],"functionName":{"name":"mstore","nativeSrc":"3714:6:34","nodeType":"YulIdentifier","src":"3714:6:34"},"nativeSrc":"3714:26:34","nodeType":"YulFunctionCall","src":"3714:26:34"},"nativeSrc":"3714:26:34","nodeType":"YulExpressionStatement","src":"3714:26:34"},{"nativeSrc":"3753:19:34","nodeType":"YulAssignment","src":"3753:19:34","value":{"arguments":[{"name":"pos","nativeSrc":"3764:3:34","nodeType":"YulIdentifier","src":"3764:3:34"},{"kind":"number","nativeSrc":"3769:2:34","nodeType":"YulLiteral","src":"3769:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3760:3:34","nodeType":"YulIdentifier","src":"3760:3:34"},"nativeSrc":"3760:12:34","nodeType":"YulFunctionCall","src":"3760:12:34"},"variableNames":[{"name":"pos","nativeSrc":"3753:3:34","nodeType":"YulIdentifier","src":"3753:3:34"}]},{"nativeSrc":"3785:25:34","nodeType":"YulAssignment","src":"3785:25:34","value":{"arguments":[{"name":"srcPtr","nativeSrc":"3799:6:34","nodeType":"YulIdentifier","src":"3799:6:34"},{"kind":"number","nativeSrc":"3807:2:34","nodeType":"YulLiteral","src":"3807:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3795:3:34","nodeType":"YulIdentifier","src":"3795:3:34"},"nativeSrc":"3795:15:34","nodeType":"YulFunctionCall","src":"3795:15:34"},"variableNames":[{"name":"srcPtr","nativeSrc":"3785:6:34","nodeType":"YulIdentifier","src":"3785:6:34"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"3662:1:34","nodeType":"YulIdentifier","src":"3662:1:34"},{"name":"length","nativeSrc":"3665:6:34","nodeType":"YulIdentifier","src":"3665:6:34"}],"functionName":{"name":"lt","nativeSrc":"3659:2:34","nodeType":"YulIdentifier","src":"3659:2:34"},"nativeSrc":"3659:13:34","nodeType":"YulFunctionCall","src":"3659:13:34"},"nativeSrc":"3651:169:34","nodeType":"YulForLoop","post":{"nativeSrc":"3673:18:34","nodeType":"YulBlock","src":"3673:18:34","statements":[{"nativeSrc":"3675:14:34","nodeType":"YulAssignment","src":"3675:14:34","value":{"arguments":[{"name":"i","nativeSrc":"3684:1:34","nodeType":"YulIdentifier","src":"3684:1:34"},{"kind":"number","nativeSrc":"3687:1:34","nodeType":"YulLiteral","src":"3687:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3680:3:34","nodeType":"YulIdentifier","src":"3680:3:34"},"nativeSrc":"3680:9:34","nodeType":"YulFunctionCall","src":"3680:9:34"},"variableNames":[{"name":"i","nativeSrc":"3675:1:34","nodeType":"YulIdentifier","src":"3675:1:34"}]}]},"pre":{"nativeSrc":"3655:3:34","nodeType":"YulBlock","src":"3655:3:34","statements":[]},"src":"3651:169:34"},{"nativeSrc":"3829:11:34","nodeType":"YulAssignment","src":"3829:11:34","value":{"name":"pos","nativeSrc":"3837:3:34","nodeType":"YulIdentifier","src":"3837:3:34"},"variableNames":[{"name":"tail","nativeSrc":"3829:4:34","nodeType":"YulIdentifier","src":"3829:4:34"}]}]},"name":"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"2585:1261:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2863:9:34","nodeType":"YulTypedName","src":"2863:9:34","type":""},{"name":"value6","nativeSrc":"2874:6:34","nodeType":"YulTypedName","src":"2874:6:34","type":""},{"name":"value5","nativeSrc":"2882:6:34","nodeType":"YulTypedName","src":"2882:6:34","type":""},{"name":"value4","nativeSrc":"2890:6:34","nodeType":"YulTypedName","src":"2890:6:34","type":""},{"name":"value3","nativeSrc":"2898:6:34","nodeType":"YulTypedName","src":"2898:6:34","type":""},{"name":"value2","nativeSrc":"2906:6:34","nodeType":"YulTypedName","src":"2906:6:34","type":""},{"name":"value1","nativeSrc":"2914:6:34","nodeType":"YulTypedName","src":"2914:6:34","type":""},{"name":"value0","nativeSrc":"2922:6:34","nodeType":"YulTypedName","src":"2922:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2933:4:34","nodeType":"YulTypedName","src":"2933:4:34","type":""}],"src":"2585:1261:34"},{"body":{"nativeSrc":"3952:125:34","nodeType":"YulBlock","src":"3952:125:34","statements":[{"nativeSrc":"3962:26:34","nodeType":"YulAssignment","src":"3962:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"3974:9:34","nodeType":"YulIdentifier","src":"3974:9:34"},{"kind":"number","nativeSrc":"3985:2:34","nodeType":"YulLiteral","src":"3985:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3970:3:34","nodeType":"YulIdentifier","src":"3970:3:34"},"nativeSrc":"3970:18:34","nodeType":"YulFunctionCall","src":"3970:18:34"},"variableNames":[{"name":"tail","nativeSrc":"3962:4:34","nodeType":"YulIdentifier","src":"3962:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4004:9:34","nodeType":"YulIdentifier","src":"4004:9:34"},{"arguments":[{"name":"value0","nativeSrc":"4019:6:34","nodeType":"YulIdentifier","src":"4019:6:34"},{"kind":"number","nativeSrc":"4027:42:34","nodeType":"YulLiteral","src":"4027:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4015:3:34","nodeType":"YulIdentifier","src":"4015:3:34"},"nativeSrc":"4015:55:34","nodeType":"YulFunctionCall","src":"4015:55:34"}],"functionName":{"name":"mstore","nativeSrc":"3997:6:34","nodeType":"YulIdentifier","src":"3997:6:34"},"nativeSrc":"3997:74:34","nodeType":"YulFunctionCall","src":"3997:74:34"},"nativeSrc":"3997:74:34","nodeType":"YulExpressionStatement","src":"3997:74:34"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3851:226:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3921:9:34","nodeType":"YulTypedName","src":"3921:9:34","type":""},{"name":"value0","nativeSrc":"3932:6:34","nodeType":"YulTypedName","src":"3932:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3943:4:34","nodeType":"YulTypedName","src":"3943:4:34","type":""}],"src":"3851:226:34"},{"body":{"nativeSrc":"4252:733:34","nodeType":"YulBlock","src":"4252:733:34","statements":[{"body":{"nativeSrc":"4299:16:34","nodeType":"YulBlock","src":"4299:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4308:1:34","nodeType":"YulLiteral","src":"4308:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"4311:1:34","nodeType":"YulLiteral","src":"4311:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4301:6:34","nodeType":"YulIdentifier","src":"4301:6:34"},"nativeSrc":"4301:12:34","nodeType":"YulFunctionCall","src":"4301:12:34"},"nativeSrc":"4301:12:34","nodeType":"YulExpressionStatement","src":"4301:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4273:7:34","nodeType":"YulIdentifier","src":"4273:7:34"},{"name":"headStart","nativeSrc":"4282:9:34","nodeType":"YulIdentifier","src":"4282:9:34"}],"functionName":{"name":"sub","nativeSrc":"4269:3:34","nodeType":"YulIdentifier","src":"4269:3:34"},"nativeSrc":"4269:23:34","nodeType":"YulFunctionCall","src":"4269:23:34"},{"kind":"number","nativeSrc":"4294:3:34","nodeType":"YulLiteral","src":"4294:3:34","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"4265:3:34","nodeType":"YulIdentifier","src":"4265:3:34"},"nativeSrc":"4265:33:34","nodeType":"YulFunctionCall","src":"4265:33:34"},"nativeSrc":"4262:53:34","nodeType":"YulIf","src":"4262:53:34"},{"nativeSrc":"4324:39:34","nodeType":"YulAssignment","src":"4324:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"4353:9:34","nodeType":"YulIdentifier","src":"4353:9:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4334:18:34","nodeType":"YulIdentifier","src":"4334:18:34"},"nativeSrc":"4334:29:34","nodeType":"YulFunctionCall","src":"4334:29:34"},"variableNames":[{"name":"value0","nativeSrc":"4324:6:34","nodeType":"YulIdentifier","src":"4324:6:34"}]},{"nativeSrc":"4372:48:34","nodeType":"YulAssignment","src":"4372:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4405:9:34","nodeType":"YulIdentifier","src":"4405:9:34"},{"kind":"number","nativeSrc":"4416:2:34","nodeType":"YulLiteral","src":"4416:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4401:3:34","nodeType":"YulIdentifier","src":"4401:3:34"},"nativeSrc":"4401:18:34","nodeType":"YulFunctionCall","src":"4401:18:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4382:18:34","nodeType":"YulIdentifier","src":"4382:18:34"},"nativeSrc":"4382:38:34","nodeType":"YulFunctionCall","src":"4382:38:34"},"variableNames":[{"name":"value1","nativeSrc":"4372:6:34","nodeType":"YulIdentifier","src":"4372:6:34"}]},{"nativeSrc":"4429:14:34","nodeType":"YulVariableDeclaration","src":"4429:14:34","value":{"kind":"number","nativeSrc":"4442:1:34","nodeType":"YulLiteral","src":"4442:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4433:5:34","nodeType":"YulTypedName","src":"4433:5:34","type":""}]},{"nativeSrc":"4452:41:34","nodeType":"YulAssignment","src":"4452:41:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4478:9:34","nodeType":"YulIdentifier","src":"4478:9:34"},{"kind":"number","nativeSrc":"4489:2:34","nodeType":"YulLiteral","src":"4489:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4474:3:34","nodeType":"YulIdentifier","src":"4474:3:34"},"nativeSrc":"4474:18:34","nodeType":"YulFunctionCall","src":"4474:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"4461:12:34","nodeType":"YulIdentifier","src":"4461:12:34"},"nativeSrc":"4461:32:34","nodeType":"YulFunctionCall","src":"4461:32:34"},"variableNames":[{"name":"value","nativeSrc":"4452:5:34","nodeType":"YulIdentifier","src":"4452:5:34"}]},{"nativeSrc":"4502:15:34","nodeType":"YulAssignment","src":"4502:15:34","value":{"name":"value","nativeSrc":"4512:5:34","nodeType":"YulIdentifier","src":"4512:5:34"},"variableNames":[{"name":"value2","nativeSrc":"4502:6:34","nodeType":"YulIdentifier","src":"4502:6:34"}]},{"nativeSrc":"4526:16:34","nodeType":"YulVariableDeclaration","src":"4526:16:34","value":{"kind":"number","nativeSrc":"4541:1:34","nodeType":"YulLiteral","src":"4541:1:34","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"4530:7:34","nodeType":"YulTypedName","src":"4530:7:34","type":""}]},{"nativeSrc":"4551:43:34","nodeType":"YulAssignment","src":"4551:43:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4579:9:34","nodeType":"YulIdentifier","src":"4579:9:34"},{"kind":"number","nativeSrc":"4590:2:34","nodeType":"YulLiteral","src":"4590:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4575:3:34","nodeType":"YulIdentifier","src":"4575:3:34"},"nativeSrc":"4575:18:34","nodeType":"YulFunctionCall","src":"4575:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"4562:12:34","nodeType":"YulIdentifier","src":"4562:12:34"},"nativeSrc":"4562:32:34","nodeType":"YulFunctionCall","src":"4562:32:34"},"variableNames":[{"name":"value_1","nativeSrc":"4551:7:34","nodeType":"YulIdentifier","src":"4551:7:34"}]},{"nativeSrc":"4603:17:34","nodeType":"YulAssignment","src":"4603:17:34","value":{"name":"value_1","nativeSrc":"4613:7:34","nodeType":"YulIdentifier","src":"4613:7:34"},"variableNames":[{"name":"value3","nativeSrc":"4603:6:34","nodeType":"YulIdentifier","src":"4603:6:34"}]},{"nativeSrc":"4629:48:34","nodeType":"YulVariableDeclaration","src":"4629:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4661:9:34","nodeType":"YulIdentifier","src":"4661:9:34"},{"kind":"number","nativeSrc":"4672:3:34","nodeType":"YulLiteral","src":"4672:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4657:3:34","nodeType":"YulIdentifier","src":"4657:3:34"},"nativeSrc":"4657:19:34","nodeType":"YulFunctionCall","src":"4657:19:34"}],"functionName":{"name":"calldataload","nativeSrc":"4644:12:34","nodeType":"YulIdentifier","src":"4644:12:34"},"nativeSrc":"4644:33:34","nodeType":"YulFunctionCall","src":"4644:33:34"},"variables":[{"name":"value_2","nativeSrc":"4633:7:34","nodeType":"YulTypedName","src":"4633:7:34","type":""}]},{"body":{"nativeSrc":"4729:16:34","nodeType":"YulBlock","src":"4729:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4738:1:34","nodeType":"YulLiteral","src":"4738:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"4741:1:34","nodeType":"YulLiteral","src":"4741:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4731:6:34","nodeType":"YulIdentifier","src":"4731:6:34"},"nativeSrc":"4731:12:34","nodeType":"YulFunctionCall","src":"4731:12:34"},"nativeSrc":"4731:12:34","nodeType":"YulExpressionStatement","src":"4731:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nativeSrc":"4699:7:34","nodeType":"YulIdentifier","src":"4699:7:34"},{"arguments":[{"name":"value_2","nativeSrc":"4712:7:34","nodeType":"YulIdentifier","src":"4712:7:34"},{"kind":"number","nativeSrc":"4721:4:34","nodeType":"YulLiteral","src":"4721:4:34","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"4708:3:34","nodeType":"YulIdentifier","src":"4708:3:34"},"nativeSrc":"4708:18:34","nodeType":"YulFunctionCall","src":"4708:18:34"}],"functionName":{"name":"eq","nativeSrc":"4696:2:34","nodeType":"YulIdentifier","src":"4696:2:34"},"nativeSrc":"4696:31:34","nodeType":"YulFunctionCall","src":"4696:31:34"}],"functionName":{"name":"iszero","nativeSrc":"4689:6:34","nodeType":"YulIdentifier","src":"4689:6:34"},"nativeSrc":"4689:39:34","nodeType":"YulFunctionCall","src":"4689:39:34"},"nativeSrc":"4686:59:34","nodeType":"YulIf","src":"4686:59:34"},{"nativeSrc":"4754:17:34","nodeType":"YulAssignment","src":"4754:17:34","value":{"name":"value_2","nativeSrc":"4764:7:34","nodeType":"YulIdentifier","src":"4764:7:34"},"variableNames":[{"name":"value4","nativeSrc":"4754:6:34","nodeType":"YulIdentifier","src":"4754:6:34"}]},{"nativeSrc":"4780:16:34","nodeType":"YulVariableDeclaration","src":"4780:16:34","value":{"kind":"number","nativeSrc":"4795:1:34","nodeType":"YulLiteral","src":"4795:1:34","type":"","value":"0"},"variables":[{"name":"value_3","nativeSrc":"4784:7:34","nodeType":"YulTypedName","src":"4784:7:34","type":""}]},{"nativeSrc":"4805:44:34","nodeType":"YulAssignment","src":"4805:44:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4833:9:34","nodeType":"YulIdentifier","src":"4833:9:34"},{"kind":"number","nativeSrc":"4844:3:34","nodeType":"YulLiteral","src":"4844:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4829:3:34","nodeType":"YulIdentifier","src":"4829:3:34"},"nativeSrc":"4829:19:34","nodeType":"YulFunctionCall","src":"4829:19:34"}],"functionName":{"name":"calldataload","nativeSrc":"4816:12:34","nodeType":"YulIdentifier","src":"4816:12:34"},"nativeSrc":"4816:33:34","nodeType":"YulFunctionCall","src":"4816:33:34"},"variableNames":[{"name":"value_3","nativeSrc":"4805:7:34","nodeType":"YulIdentifier","src":"4805:7:34"}]},{"nativeSrc":"4858:17:34","nodeType":"YulAssignment","src":"4858:17:34","value":{"name":"value_3","nativeSrc":"4868:7:34","nodeType":"YulIdentifier","src":"4868:7:34"},"variableNames":[{"name":"value5","nativeSrc":"4858:6:34","nodeType":"YulIdentifier","src":"4858:6:34"}]},{"nativeSrc":"4884:16:34","nodeType":"YulVariableDeclaration","src":"4884:16:34","value":{"kind":"number","nativeSrc":"4899:1:34","nodeType":"YulLiteral","src":"4899:1:34","type":"","value":"0"},"variables":[{"name":"value_4","nativeSrc":"4888:7:34","nodeType":"YulTypedName","src":"4888:7:34","type":""}]},{"nativeSrc":"4909:44:34","nodeType":"YulAssignment","src":"4909:44:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4937:9:34","nodeType":"YulIdentifier","src":"4937:9:34"},{"kind":"number","nativeSrc":"4948:3:34","nodeType":"YulLiteral","src":"4948:3:34","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"4933:3:34","nodeType":"YulIdentifier","src":"4933:3:34"},"nativeSrc":"4933:19:34","nodeType":"YulFunctionCall","src":"4933:19:34"}],"functionName":{"name":"calldataload","nativeSrc":"4920:12:34","nodeType":"YulIdentifier","src":"4920:12:34"},"nativeSrc":"4920:33:34","nodeType":"YulFunctionCall","src":"4920:33:34"},"variableNames":[{"name":"value_4","nativeSrc":"4909:7:34","nodeType":"YulIdentifier","src":"4909:7:34"}]},{"nativeSrc":"4962:17:34","nodeType":"YulAssignment","src":"4962:17:34","value":{"name":"value_4","nativeSrc":"4972:7:34","nodeType":"YulIdentifier","src":"4972:7:34"},"variableNames":[{"name":"value6","nativeSrc":"4962:6:34","nodeType":"YulIdentifier","src":"4962:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nativeSrc":"4082:903:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4170:9:34","nodeType":"YulTypedName","src":"4170:9:34","type":""},{"name":"dataEnd","nativeSrc":"4181:7:34","nodeType":"YulTypedName","src":"4181:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4193:6:34","nodeType":"YulTypedName","src":"4193:6:34","type":""},{"name":"value1","nativeSrc":"4201:6:34","nodeType":"YulTypedName","src":"4201:6:34","type":""},{"name":"value2","nativeSrc":"4209:6:34","nodeType":"YulTypedName","src":"4209:6:34","type":""},{"name":"value3","nativeSrc":"4217:6:34","nodeType":"YulTypedName","src":"4217:6:34","type":""},{"name":"value4","nativeSrc":"4225:6:34","nodeType":"YulTypedName","src":"4225:6:34","type":""},{"name":"value5","nativeSrc":"4233:6:34","nodeType":"YulTypedName","src":"4233:6:34","type":""},{"name":"value6","nativeSrc":"4241:6:34","nodeType":"YulTypedName","src":"4241:6:34","type":""}],"src":"4082:903:34"},{"body":{"nativeSrc":"5077:173:34","nodeType":"YulBlock","src":"5077:173:34","statements":[{"body":{"nativeSrc":"5123:16:34","nodeType":"YulBlock","src":"5123:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5132:1:34","nodeType":"YulLiteral","src":"5132:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"5135:1:34","nodeType":"YulLiteral","src":"5135:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5125:6:34","nodeType":"YulIdentifier","src":"5125:6:34"},"nativeSrc":"5125:12:34","nodeType":"YulFunctionCall","src":"5125:12:34"},"nativeSrc":"5125:12:34","nodeType":"YulExpressionStatement","src":"5125:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5098:7:34","nodeType":"YulIdentifier","src":"5098:7:34"},{"name":"headStart","nativeSrc":"5107:9:34","nodeType":"YulIdentifier","src":"5107:9:34"}],"functionName":{"name":"sub","nativeSrc":"5094:3:34","nodeType":"YulIdentifier","src":"5094:3:34"},"nativeSrc":"5094:23:34","nodeType":"YulFunctionCall","src":"5094:23:34"},{"kind":"number","nativeSrc":"5119:2:34","nodeType":"YulLiteral","src":"5119:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5090:3:34","nodeType":"YulIdentifier","src":"5090:3:34"},"nativeSrc":"5090:32:34","nodeType":"YulFunctionCall","src":"5090:32:34"},"nativeSrc":"5087:52:34","nodeType":"YulIf","src":"5087:52:34"},{"nativeSrc":"5148:39:34","nodeType":"YulAssignment","src":"5148:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"5177:9:34","nodeType":"YulIdentifier","src":"5177:9:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5158:18:34","nodeType":"YulIdentifier","src":"5158:18:34"},"nativeSrc":"5158:29:34","nodeType":"YulFunctionCall","src":"5158:29:34"},"variableNames":[{"name":"value0","nativeSrc":"5148:6:34","nodeType":"YulIdentifier","src":"5148:6:34"}]},{"nativeSrc":"5196:48:34","nodeType":"YulAssignment","src":"5196:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5229:9:34","nodeType":"YulIdentifier","src":"5229:9:34"},{"kind":"number","nativeSrc":"5240:2:34","nodeType":"YulLiteral","src":"5240:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5225:3:34","nodeType":"YulIdentifier","src":"5225:3:34"},"nativeSrc":"5225:18:34","nodeType":"YulFunctionCall","src":"5225:18:34"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5206:18:34","nodeType":"YulIdentifier","src":"5206:18:34"},"nativeSrc":"5206:38:34","nodeType":"YulFunctionCall","src":"5206:38:34"},"variableNames":[{"name":"value1","nativeSrc":"5196:6:34","nodeType":"YulIdentifier","src":"5196:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"4990:260:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5035:9:34","nodeType":"YulTypedName","src":"5035:9:34","type":""},{"name":"dataEnd","nativeSrc":"5046:7:34","nodeType":"YulTypedName","src":"5046:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5058:6:34","nodeType":"YulTypedName","src":"5058:6:34","type":""},{"name":"value1","nativeSrc":"5066:6:34","nodeType":"YulTypedName","src":"5066:6:34","type":""}],"src":"4990:260:34"},{"body":{"nativeSrc":"5310:325:34","nodeType":"YulBlock","src":"5310:325:34","statements":[{"nativeSrc":"5320:22:34","nodeType":"YulAssignment","src":"5320:22:34","value":{"arguments":[{"kind":"number","nativeSrc":"5334:1:34","nodeType":"YulLiteral","src":"5334:1:34","type":"","value":"1"},{"name":"data","nativeSrc":"5337:4:34","nodeType":"YulIdentifier","src":"5337:4:34"}],"functionName":{"name":"shr","nativeSrc":"5330:3:34","nodeType":"YulIdentifier","src":"5330:3:34"},"nativeSrc":"5330:12:34","nodeType":"YulFunctionCall","src":"5330:12:34"},"variableNames":[{"name":"length","nativeSrc":"5320:6:34","nodeType":"YulIdentifier","src":"5320:6:34"}]},{"nativeSrc":"5351:38:34","nodeType":"YulVariableDeclaration","src":"5351:38:34","value":{"arguments":[{"name":"data","nativeSrc":"5381:4:34","nodeType":"YulIdentifier","src":"5381:4:34"},{"kind":"number","nativeSrc":"5387:1:34","nodeType":"YulLiteral","src":"5387:1:34","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"5377:3:34","nodeType":"YulIdentifier","src":"5377:3:34"},"nativeSrc":"5377:12:34","nodeType":"YulFunctionCall","src":"5377:12:34"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"5355:18:34","nodeType":"YulTypedName","src":"5355:18:34","type":""}]},{"body":{"nativeSrc":"5428:31:34","nodeType":"YulBlock","src":"5428:31:34","statements":[{"nativeSrc":"5430:27:34","nodeType":"YulAssignment","src":"5430:27:34","value":{"arguments":[{"name":"length","nativeSrc":"5444:6:34","nodeType":"YulIdentifier","src":"5444:6:34"},{"kind":"number","nativeSrc":"5452:4:34","nodeType":"YulLiteral","src":"5452:4:34","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"5440:3:34","nodeType":"YulIdentifier","src":"5440:3:34"},"nativeSrc":"5440:17:34","nodeType":"YulFunctionCall","src":"5440:17:34"},"variableNames":[{"name":"length","nativeSrc":"5430:6:34","nodeType":"YulIdentifier","src":"5430:6:34"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"5408:18:34","nodeType":"YulIdentifier","src":"5408:18:34"}],"functionName":{"name":"iszero","nativeSrc":"5401:6:34","nodeType":"YulIdentifier","src":"5401:6:34"},"nativeSrc":"5401:26:34","nodeType":"YulFunctionCall","src":"5401:26:34"},"nativeSrc":"5398:61:34","nodeType":"YulIf","src":"5398:61:34"},{"body":{"nativeSrc":"5518:111:34","nodeType":"YulBlock","src":"5518:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5539:1:34","nodeType":"YulLiteral","src":"5539:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"5546:3:34","nodeType":"YulLiteral","src":"5546:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"5551:10:34","nodeType":"YulLiteral","src":"5551:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"5542:3:34","nodeType":"YulIdentifier","src":"5542:3:34"},"nativeSrc":"5542:20:34","nodeType":"YulFunctionCall","src":"5542:20:34"}],"functionName":{"name":"mstore","nativeSrc":"5532:6:34","nodeType":"YulIdentifier","src":"5532:6:34"},"nativeSrc":"5532:31:34","nodeType":"YulFunctionCall","src":"5532:31:34"},"nativeSrc":"5532:31:34","nodeType":"YulExpressionStatement","src":"5532:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5583:1:34","nodeType":"YulLiteral","src":"5583:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"5586:4:34","nodeType":"YulLiteral","src":"5586:4:34","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"5576:6:34","nodeType":"YulIdentifier","src":"5576:6:34"},"nativeSrc":"5576:15:34","nodeType":"YulFunctionCall","src":"5576:15:34"},"nativeSrc":"5576:15:34","nodeType":"YulExpressionStatement","src":"5576:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5611:1:34","nodeType":"YulLiteral","src":"5611:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"5614:4:34","nodeType":"YulLiteral","src":"5614:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5604:6:34","nodeType":"YulIdentifier","src":"5604:6:34"},"nativeSrc":"5604:15:34","nodeType":"YulFunctionCall","src":"5604:15:34"},"nativeSrc":"5604:15:34","nodeType":"YulExpressionStatement","src":"5604:15:34"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"5474:18:34","nodeType":"YulIdentifier","src":"5474:18:34"},{"arguments":[{"name":"length","nativeSrc":"5497:6:34","nodeType":"YulIdentifier","src":"5497:6:34"},{"kind":"number","nativeSrc":"5505:2:34","nodeType":"YulLiteral","src":"5505:2:34","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"5494:2:34","nodeType":"YulIdentifier","src":"5494:2:34"},"nativeSrc":"5494:14:34","nodeType":"YulFunctionCall","src":"5494:14:34"}],"functionName":{"name":"eq","nativeSrc":"5471:2:34","nodeType":"YulIdentifier","src":"5471:2:34"},"nativeSrc":"5471:38:34","nodeType":"YulFunctionCall","src":"5471:38:34"},"nativeSrc":"5468:161:34","nodeType":"YulIf","src":"5468:161:34"}]},"name":"extract_byte_array_length","nativeSrc":"5255:380:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"5290:4:34","nodeType":"YulTypedName","src":"5290:4:34","type":""}],"returnVariables":[{"name":"length","nativeSrc":"5299:6:34","nodeType":"YulTypedName","src":"5299:6:34","type":""}],"src":"5255:380:34"},{"body":{"nativeSrc":"5672:95:34","nodeType":"YulBlock","src":"5672:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5689:1:34","nodeType":"YulLiteral","src":"5689:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"5696:3:34","nodeType":"YulLiteral","src":"5696:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"5701:10:34","nodeType":"YulLiteral","src":"5701:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"5692:3:34","nodeType":"YulIdentifier","src":"5692:3:34"},"nativeSrc":"5692:20:34","nodeType":"YulFunctionCall","src":"5692:20:34"}],"functionName":{"name":"mstore","nativeSrc":"5682:6:34","nodeType":"YulIdentifier","src":"5682:6:34"},"nativeSrc":"5682:31:34","nodeType":"YulFunctionCall","src":"5682:31:34"},"nativeSrc":"5682:31:34","nodeType":"YulExpressionStatement","src":"5682:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5729:1:34","nodeType":"YulLiteral","src":"5729:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"5732:4:34","nodeType":"YulLiteral","src":"5732:4:34","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"5722:6:34","nodeType":"YulIdentifier","src":"5722:6:34"},"nativeSrc":"5722:15:34","nodeType":"YulFunctionCall","src":"5722:15:34"},"nativeSrc":"5722:15:34","nodeType":"YulExpressionStatement","src":"5722:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5753:1:34","nodeType":"YulLiteral","src":"5753:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"5756:4:34","nodeType":"YulLiteral","src":"5756:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5746:6:34","nodeType":"YulIdentifier","src":"5746:6:34"},"nativeSrc":"5746:15:34","nodeType":"YulFunctionCall","src":"5746:15:34"},"nativeSrc":"5746:15:34","nodeType":"YulExpressionStatement","src":"5746:15:34"}]},"name":"panic_error_0x41","nativeSrc":"5640:127:34","nodeType":"YulFunctionDefinition","src":"5640:127:34"},{"body":{"nativeSrc":"6013:392:34","nodeType":"YulBlock","src":"6013:392:34","statements":[{"nativeSrc":"6023:27:34","nodeType":"YulAssignment","src":"6023:27:34","value":{"arguments":[{"name":"headStart","nativeSrc":"6035:9:34","nodeType":"YulIdentifier","src":"6035:9:34"},{"kind":"number","nativeSrc":"6046:3:34","nodeType":"YulLiteral","src":"6046:3:34","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"6031:3:34","nodeType":"YulIdentifier","src":"6031:3:34"},"nativeSrc":"6031:19:34","nodeType":"YulFunctionCall","src":"6031:19:34"},"variableNames":[{"name":"tail","nativeSrc":"6023:4:34","nodeType":"YulIdentifier","src":"6023:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6066:9:34","nodeType":"YulIdentifier","src":"6066:9:34"},{"name":"value0","nativeSrc":"6077:6:34","nodeType":"YulIdentifier","src":"6077:6:34"}],"functionName":{"name":"mstore","nativeSrc":"6059:6:34","nodeType":"YulIdentifier","src":"6059:6:34"},"nativeSrc":"6059:25:34","nodeType":"YulFunctionCall","src":"6059:25:34"},"nativeSrc":"6059:25:34","nodeType":"YulExpressionStatement","src":"6059:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6104:9:34","nodeType":"YulIdentifier","src":"6104:9:34"},{"kind":"number","nativeSrc":"6115:2:34","nodeType":"YulLiteral","src":"6115:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6100:3:34","nodeType":"YulIdentifier","src":"6100:3:34"},"nativeSrc":"6100:18:34","nodeType":"YulFunctionCall","src":"6100:18:34"},{"arguments":[{"name":"value1","nativeSrc":"6124:6:34","nodeType":"YulIdentifier","src":"6124:6:34"},{"kind":"number","nativeSrc":"6132:42:34","nodeType":"YulLiteral","src":"6132:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6120:3:34","nodeType":"YulIdentifier","src":"6120:3:34"},"nativeSrc":"6120:55:34","nodeType":"YulFunctionCall","src":"6120:55:34"}],"functionName":{"name":"mstore","nativeSrc":"6093:6:34","nodeType":"YulIdentifier","src":"6093:6:34"},"nativeSrc":"6093:83:34","nodeType":"YulFunctionCall","src":"6093:83:34"},"nativeSrc":"6093:83:34","nodeType":"YulExpressionStatement","src":"6093:83:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6196:9:34","nodeType":"YulIdentifier","src":"6196:9:34"},{"kind":"number","nativeSrc":"6207:2:34","nodeType":"YulLiteral","src":"6207:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6192:3:34","nodeType":"YulIdentifier","src":"6192:3:34"},"nativeSrc":"6192:18:34","nodeType":"YulFunctionCall","src":"6192:18:34"},{"arguments":[{"name":"value2","nativeSrc":"6216:6:34","nodeType":"YulIdentifier","src":"6216:6:34"},{"kind":"number","nativeSrc":"6224:42:34","nodeType":"YulLiteral","src":"6224:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6212:3:34","nodeType":"YulIdentifier","src":"6212:3:34"},"nativeSrc":"6212:55:34","nodeType":"YulFunctionCall","src":"6212:55:34"}],"functionName":{"name":"mstore","nativeSrc":"6185:6:34","nodeType":"YulIdentifier","src":"6185:6:34"},"nativeSrc":"6185:83:34","nodeType":"YulFunctionCall","src":"6185:83:34"},"nativeSrc":"6185:83:34","nodeType":"YulExpressionStatement","src":"6185:83:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6288:9:34","nodeType":"YulIdentifier","src":"6288:9:34"},{"kind":"number","nativeSrc":"6299:2:34","nodeType":"YulLiteral","src":"6299:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6284:3:34","nodeType":"YulIdentifier","src":"6284:3:34"},"nativeSrc":"6284:18:34","nodeType":"YulFunctionCall","src":"6284:18:34"},{"name":"value3","nativeSrc":"6304:6:34","nodeType":"YulIdentifier","src":"6304:6:34"}],"functionName":{"name":"mstore","nativeSrc":"6277:6:34","nodeType":"YulIdentifier","src":"6277:6:34"},"nativeSrc":"6277:34:34","nodeType":"YulFunctionCall","src":"6277:34:34"},"nativeSrc":"6277:34:34","nodeType":"YulExpressionStatement","src":"6277:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6331:9:34","nodeType":"YulIdentifier","src":"6331:9:34"},{"kind":"number","nativeSrc":"6342:3:34","nodeType":"YulLiteral","src":"6342:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6327:3:34","nodeType":"YulIdentifier","src":"6327:3:34"},"nativeSrc":"6327:19:34","nodeType":"YulFunctionCall","src":"6327:19:34"},{"name":"value4","nativeSrc":"6348:6:34","nodeType":"YulIdentifier","src":"6348:6:34"}],"functionName":{"name":"mstore","nativeSrc":"6320:6:34","nodeType":"YulIdentifier","src":"6320:6:34"},"nativeSrc":"6320:35:34","nodeType":"YulFunctionCall","src":"6320:35:34"},"nativeSrc":"6320:35:34","nodeType":"YulExpressionStatement","src":"6320:35:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6375:9:34","nodeType":"YulIdentifier","src":"6375:9:34"},{"kind":"number","nativeSrc":"6386:3:34","nodeType":"YulLiteral","src":"6386:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6371:3:34","nodeType":"YulIdentifier","src":"6371:3:34"},"nativeSrc":"6371:19:34","nodeType":"YulFunctionCall","src":"6371:19:34"},{"name":"value5","nativeSrc":"6392:6:34","nodeType":"YulIdentifier","src":"6392:6:34"}],"functionName":{"name":"mstore","nativeSrc":"6364:6:34","nodeType":"YulIdentifier","src":"6364:6:34"},"nativeSrc":"6364:35:34","nodeType":"YulFunctionCall","src":"6364:35:34"},"nativeSrc":"6364:35:34","nodeType":"YulExpressionStatement","src":"6364:35:34"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"5772:633:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5942:9:34","nodeType":"YulTypedName","src":"5942:9:34","type":""},{"name":"value5","nativeSrc":"5953:6:34","nodeType":"YulTypedName","src":"5953:6:34","type":""},{"name":"value4","nativeSrc":"5961:6:34","nodeType":"YulTypedName","src":"5961:6:34","type":""},{"name":"value3","nativeSrc":"5969:6:34","nodeType":"YulTypedName","src":"5969:6:34","type":""},{"name":"value2","nativeSrc":"5977:6:34","nodeType":"YulTypedName","src":"5977:6:34","type":""},{"name":"value1","nativeSrc":"5985:6:34","nodeType":"YulTypedName","src":"5985:6:34","type":""},{"name":"value0","nativeSrc":"5993:6:34","nodeType":"YulTypedName","src":"5993:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6004:4:34","nodeType":"YulTypedName","src":"6004:4:34","type":""}],"src":"5772:633:34"},{"body":{"nativeSrc":"6539:217:34","nodeType":"YulBlock","src":"6539:217:34","statements":[{"nativeSrc":"6549:26:34","nodeType":"YulAssignment","src":"6549:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"6561:9:34","nodeType":"YulIdentifier","src":"6561:9:34"},{"kind":"number","nativeSrc":"6572:2:34","nodeType":"YulLiteral","src":"6572:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6557:3:34","nodeType":"YulIdentifier","src":"6557:3:34"},"nativeSrc":"6557:18:34","nodeType":"YulFunctionCall","src":"6557:18:34"},"variableNames":[{"name":"tail","nativeSrc":"6549:4:34","nodeType":"YulIdentifier","src":"6549:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6591:9:34","nodeType":"YulIdentifier","src":"6591:9:34"},{"arguments":[{"name":"value0","nativeSrc":"6606:6:34","nodeType":"YulIdentifier","src":"6606:6:34"},{"kind":"number","nativeSrc":"6614:42:34","nodeType":"YulLiteral","src":"6614:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6602:3:34","nodeType":"YulIdentifier","src":"6602:3:34"},"nativeSrc":"6602:55:34","nodeType":"YulFunctionCall","src":"6602:55:34"}],"functionName":{"name":"mstore","nativeSrc":"6584:6:34","nodeType":"YulIdentifier","src":"6584:6:34"},"nativeSrc":"6584:74:34","nodeType":"YulFunctionCall","src":"6584:74:34"},"nativeSrc":"6584:74:34","nodeType":"YulExpressionStatement","src":"6584:74:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6678:9:34","nodeType":"YulIdentifier","src":"6678:9:34"},{"kind":"number","nativeSrc":"6689:2:34","nodeType":"YulLiteral","src":"6689:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6674:3:34","nodeType":"YulIdentifier","src":"6674:3:34"},"nativeSrc":"6674:18:34","nodeType":"YulFunctionCall","src":"6674:18:34"},{"arguments":[{"name":"value1","nativeSrc":"6698:6:34","nodeType":"YulIdentifier","src":"6698:6:34"},{"kind":"number","nativeSrc":"6706:42:34","nodeType":"YulLiteral","src":"6706:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6694:3:34","nodeType":"YulIdentifier","src":"6694:3:34"},"nativeSrc":"6694:55:34","nodeType":"YulFunctionCall","src":"6694:55:34"}],"functionName":{"name":"mstore","nativeSrc":"6667:6:34","nodeType":"YulIdentifier","src":"6667:6:34"},"nativeSrc":"6667:83:34","nodeType":"YulFunctionCall","src":"6667:83:34"},"nativeSrc":"6667:83:34","nodeType":"YulExpressionStatement","src":"6667:83:34"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"6410:346:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6500:9:34","nodeType":"YulTypedName","src":"6500:9:34","type":""},{"name":"value1","nativeSrc":"6511:6:34","nodeType":"YulTypedName","src":"6511:6:34","type":""},{"name":"value0","nativeSrc":"6519:6:34","nodeType":"YulTypedName","src":"6519:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6530:4:34","nodeType":"YulTypedName","src":"6530:4:34","type":""}],"src":"6410:346:34"},{"body":{"nativeSrc":"6918:211:34","nodeType":"YulBlock","src":"6918:211:34","statements":[{"nativeSrc":"6928:26:34","nodeType":"YulAssignment","src":"6928:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"6940:9:34","nodeType":"YulIdentifier","src":"6940:9:34"},{"kind":"number","nativeSrc":"6951:2:34","nodeType":"YulLiteral","src":"6951:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6936:3:34","nodeType":"YulIdentifier","src":"6936:3:34"},"nativeSrc":"6936:18:34","nodeType":"YulFunctionCall","src":"6936:18:34"},"variableNames":[{"name":"tail","nativeSrc":"6928:4:34","nodeType":"YulIdentifier","src":"6928:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6970:9:34","nodeType":"YulIdentifier","src":"6970:9:34"},{"arguments":[{"name":"value0","nativeSrc":"6985:6:34","nodeType":"YulIdentifier","src":"6985:6:34"},{"kind":"number","nativeSrc":"6993:42:34","nodeType":"YulLiteral","src":"6993:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6981:3:34","nodeType":"YulIdentifier","src":"6981:3:34"},"nativeSrc":"6981:55:34","nodeType":"YulFunctionCall","src":"6981:55:34"}],"functionName":{"name":"mstore","nativeSrc":"6963:6:34","nodeType":"YulIdentifier","src":"6963:6:34"},"nativeSrc":"6963:74:34","nodeType":"YulFunctionCall","src":"6963:74:34"},"nativeSrc":"6963:74:34","nodeType":"YulExpressionStatement","src":"6963:74:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7057:9:34","nodeType":"YulIdentifier","src":"7057:9:34"},{"kind":"number","nativeSrc":"7068:2:34","nodeType":"YulLiteral","src":"7068:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7053:3:34","nodeType":"YulIdentifier","src":"7053:3:34"},"nativeSrc":"7053:18:34","nodeType":"YulFunctionCall","src":"7053:18:34"},{"name":"value1","nativeSrc":"7073:6:34","nodeType":"YulIdentifier","src":"7073:6:34"}],"functionName":{"name":"mstore","nativeSrc":"7046:6:34","nodeType":"YulIdentifier","src":"7046:6:34"},"nativeSrc":"7046:34:34","nodeType":"YulFunctionCall","src":"7046:34:34"},"nativeSrc":"7046:34:34","nodeType":"YulExpressionStatement","src":"7046:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7100:9:34","nodeType":"YulIdentifier","src":"7100:9:34"},{"kind":"number","nativeSrc":"7111:2:34","nodeType":"YulLiteral","src":"7111:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7096:3:34","nodeType":"YulIdentifier","src":"7096:3:34"},"nativeSrc":"7096:18:34","nodeType":"YulFunctionCall","src":"7096:18:34"},{"name":"value2","nativeSrc":"7116:6:34","nodeType":"YulIdentifier","src":"7116:6:34"}],"functionName":{"name":"mstore","nativeSrc":"7089:6:34","nodeType":"YulIdentifier","src":"7089:6:34"},"nativeSrc":"7089:34:34","nodeType":"YulFunctionCall","src":"7089:34:34"},"nativeSrc":"7089:34:34","nodeType":"YulExpressionStatement","src":"7089:34:34"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"6761:368:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6871:9:34","nodeType":"YulTypedName","src":"6871:9:34","type":""},{"name":"value2","nativeSrc":"6882:6:34","nodeType":"YulTypedName","src":"6882:6:34","type":""},{"name":"value1","nativeSrc":"6890:6:34","nodeType":"YulTypedName","src":"6890:6:34","type":""},{"name":"value0","nativeSrc":"6898:6:34","nodeType":"YulTypedName","src":"6898:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6909:4:34","nodeType":"YulTypedName","src":"6909:4:34","type":""}],"src":"6761:368:34"},{"body":{"nativeSrc":"7182:174:34","nodeType":"YulBlock","src":"7182:174:34","statements":[{"nativeSrc":"7192:16:34","nodeType":"YulAssignment","src":"7192:16:34","value":{"arguments":[{"name":"x","nativeSrc":"7203:1:34","nodeType":"YulIdentifier","src":"7203:1:34"},{"name":"y","nativeSrc":"7206:1:34","nodeType":"YulIdentifier","src":"7206:1:34"}],"functionName":{"name":"add","nativeSrc":"7199:3:34","nodeType":"YulIdentifier","src":"7199:3:34"},"nativeSrc":"7199:9:34","nodeType":"YulFunctionCall","src":"7199:9:34"},"variableNames":[{"name":"sum","nativeSrc":"7192:3:34","nodeType":"YulIdentifier","src":"7192:3:34"}]},{"body":{"nativeSrc":"7239:111:34","nodeType":"YulBlock","src":"7239:111:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7260:1:34","nodeType":"YulLiteral","src":"7260:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"7267:3:34","nodeType":"YulLiteral","src":"7267:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"7272:10:34","nodeType":"YulLiteral","src":"7272:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"7263:3:34","nodeType":"YulIdentifier","src":"7263:3:34"},"nativeSrc":"7263:20:34","nodeType":"YulFunctionCall","src":"7263:20:34"}],"functionName":{"name":"mstore","nativeSrc":"7253:6:34","nodeType":"YulIdentifier","src":"7253:6:34"},"nativeSrc":"7253:31:34","nodeType":"YulFunctionCall","src":"7253:31:34"},"nativeSrc":"7253:31:34","nodeType":"YulExpressionStatement","src":"7253:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7304:1:34","nodeType":"YulLiteral","src":"7304:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"7307:4:34","nodeType":"YulLiteral","src":"7307:4:34","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"7297:6:34","nodeType":"YulIdentifier","src":"7297:6:34"},"nativeSrc":"7297:15:34","nodeType":"YulFunctionCall","src":"7297:15:34"},"nativeSrc":"7297:15:34","nodeType":"YulExpressionStatement","src":"7297:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7332:1:34","nodeType":"YulLiteral","src":"7332:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"7335:4:34","nodeType":"YulLiteral","src":"7335:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7325:6:34","nodeType":"YulIdentifier","src":"7325:6:34"},"nativeSrc":"7325:15:34","nodeType":"YulFunctionCall","src":"7325:15:34"},"nativeSrc":"7325:15:34","nodeType":"YulExpressionStatement","src":"7325:15:34"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"7223:1:34","nodeType":"YulIdentifier","src":"7223:1:34"},{"name":"sum","nativeSrc":"7226:3:34","nodeType":"YulIdentifier","src":"7226:3:34"}],"functionName":{"name":"gt","nativeSrc":"7220:2:34","nodeType":"YulIdentifier","src":"7220:2:34"},"nativeSrc":"7220:10:34","nodeType":"YulFunctionCall","src":"7220:10:34"},"nativeSrc":"7217:133:34","nodeType":"YulIf","src":"7217:133:34"}]},"name":"checked_add_t_uint256","nativeSrc":"7134:222:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7165:1:34","nodeType":"YulTypedName","src":"7165:1:34","type":""},{"name":"y","nativeSrc":"7168:1:34","nodeType":"YulTypedName","src":"7168:1:34","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"7174:3:34","nodeType":"YulTypedName","src":"7174:3:34","type":""}],"src":"7134:222:34"},{"body":{"nativeSrc":"7574:299:34","nodeType":"YulBlock","src":"7574:299:34","statements":[{"nativeSrc":"7584:27:34","nodeType":"YulAssignment","src":"7584:27:34","value":{"arguments":[{"name":"headStart","nativeSrc":"7596:9:34","nodeType":"YulIdentifier","src":"7596:9:34"},{"kind":"number","nativeSrc":"7607:3:34","nodeType":"YulLiteral","src":"7607:3:34","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7592:3:34","nodeType":"YulIdentifier","src":"7592:3:34"},"nativeSrc":"7592:19:34","nodeType":"YulFunctionCall","src":"7592:19:34"},"variableNames":[{"name":"tail","nativeSrc":"7584:4:34","nodeType":"YulIdentifier","src":"7584:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7627:9:34","nodeType":"YulIdentifier","src":"7627:9:34"},{"name":"value0","nativeSrc":"7638:6:34","nodeType":"YulIdentifier","src":"7638:6:34"}],"functionName":{"name":"mstore","nativeSrc":"7620:6:34","nodeType":"YulIdentifier","src":"7620:6:34"},"nativeSrc":"7620:25:34","nodeType":"YulFunctionCall","src":"7620:25:34"},"nativeSrc":"7620:25:34","nodeType":"YulExpressionStatement","src":"7620:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7665:9:34","nodeType":"YulIdentifier","src":"7665:9:34"},{"kind":"number","nativeSrc":"7676:2:34","nodeType":"YulLiteral","src":"7676:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7661:3:34","nodeType":"YulIdentifier","src":"7661:3:34"},"nativeSrc":"7661:18:34","nodeType":"YulFunctionCall","src":"7661:18:34"},{"name":"value1","nativeSrc":"7681:6:34","nodeType":"YulIdentifier","src":"7681:6:34"}],"functionName":{"name":"mstore","nativeSrc":"7654:6:34","nodeType":"YulIdentifier","src":"7654:6:34"},"nativeSrc":"7654:34:34","nodeType":"YulFunctionCall","src":"7654:34:34"},"nativeSrc":"7654:34:34","nodeType":"YulExpressionStatement","src":"7654:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7708:9:34","nodeType":"YulIdentifier","src":"7708:9:34"},{"kind":"number","nativeSrc":"7719:2:34","nodeType":"YulLiteral","src":"7719:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7704:3:34","nodeType":"YulIdentifier","src":"7704:3:34"},"nativeSrc":"7704:18:34","nodeType":"YulFunctionCall","src":"7704:18:34"},{"name":"value2","nativeSrc":"7724:6:34","nodeType":"YulIdentifier","src":"7724:6:34"}],"functionName":{"name":"mstore","nativeSrc":"7697:6:34","nodeType":"YulIdentifier","src":"7697:6:34"},"nativeSrc":"7697:34:34","nodeType":"YulFunctionCall","src":"7697:34:34"},"nativeSrc":"7697:34:34","nodeType":"YulExpressionStatement","src":"7697:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7751:9:34","nodeType":"YulIdentifier","src":"7751:9:34"},{"kind":"number","nativeSrc":"7762:2:34","nodeType":"YulLiteral","src":"7762:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7747:3:34","nodeType":"YulIdentifier","src":"7747:3:34"},"nativeSrc":"7747:18:34","nodeType":"YulFunctionCall","src":"7747:18:34"},{"name":"value3","nativeSrc":"7767:6:34","nodeType":"YulIdentifier","src":"7767:6:34"}],"functionName":{"name":"mstore","nativeSrc":"7740:6:34","nodeType":"YulIdentifier","src":"7740:6:34"},"nativeSrc":"7740:34:34","nodeType":"YulFunctionCall","src":"7740:34:34"},"nativeSrc":"7740:34:34","nodeType":"YulExpressionStatement","src":"7740:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7794:9:34","nodeType":"YulIdentifier","src":"7794:9:34"},{"kind":"number","nativeSrc":"7805:3:34","nodeType":"YulLiteral","src":"7805:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7790:3:34","nodeType":"YulIdentifier","src":"7790:3:34"},"nativeSrc":"7790:19:34","nodeType":"YulFunctionCall","src":"7790:19:34"},{"arguments":[{"name":"value4","nativeSrc":"7815:6:34","nodeType":"YulIdentifier","src":"7815:6:34"},{"kind":"number","nativeSrc":"7823:42:34","nodeType":"YulLiteral","src":"7823:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7811:3:34","nodeType":"YulIdentifier","src":"7811:3:34"},"nativeSrc":"7811:55:34","nodeType":"YulFunctionCall","src":"7811:55:34"}],"functionName":{"name":"mstore","nativeSrc":"7783:6:34","nodeType":"YulIdentifier","src":"7783:6:34"},"nativeSrc":"7783:84:34","nodeType":"YulFunctionCall","src":"7783:84:34"},"nativeSrc":"7783:84:34","nodeType":"YulExpressionStatement","src":"7783:84:34"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nativeSrc":"7361:512:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7511:9:34","nodeType":"YulTypedName","src":"7511:9:34","type":""},{"name":"value4","nativeSrc":"7522:6:34","nodeType":"YulTypedName","src":"7522:6:34","type":""},{"name":"value3","nativeSrc":"7530:6:34","nodeType":"YulTypedName","src":"7530:6:34","type":""},{"name":"value2","nativeSrc":"7538:6:34","nodeType":"YulTypedName","src":"7538:6:34","type":""},{"name":"value1","nativeSrc":"7546:6:34","nodeType":"YulTypedName","src":"7546:6:34","type":""},{"name":"value0","nativeSrc":"7554:6:34","nodeType":"YulTypedName","src":"7554:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7565:4:34","nodeType":"YulTypedName","src":"7565:4:34","type":""}],"src":"7361:512:34"},{"body":{"nativeSrc":"8059:217:34","nodeType":"YulBlock","src":"8059:217:34","statements":[{"nativeSrc":"8069:27:34","nodeType":"YulAssignment","src":"8069:27:34","value":{"arguments":[{"name":"headStart","nativeSrc":"8081:9:34","nodeType":"YulIdentifier","src":"8081:9:34"},{"kind":"number","nativeSrc":"8092:3:34","nodeType":"YulLiteral","src":"8092:3:34","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8077:3:34","nodeType":"YulIdentifier","src":"8077:3:34"},"nativeSrc":"8077:19:34","nodeType":"YulFunctionCall","src":"8077:19:34"},"variableNames":[{"name":"tail","nativeSrc":"8069:4:34","nodeType":"YulIdentifier","src":"8069:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8112:9:34","nodeType":"YulIdentifier","src":"8112:9:34"},{"name":"value0","nativeSrc":"8123:6:34","nodeType":"YulIdentifier","src":"8123:6:34"}],"functionName":{"name":"mstore","nativeSrc":"8105:6:34","nodeType":"YulIdentifier","src":"8105:6:34"},"nativeSrc":"8105:25:34","nodeType":"YulFunctionCall","src":"8105:25:34"},"nativeSrc":"8105:25:34","nodeType":"YulExpressionStatement","src":"8105:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8150:9:34","nodeType":"YulIdentifier","src":"8150:9:34"},{"kind":"number","nativeSrc":"8161:2:34","nodeType":"YulLiteral","src":"8161:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8146:3:34","nodeType":"YulIdentifier","src":"8146:3:34"},"nativeSrc":"8146:18:34","nodeType":"YulFunctionCall","src":"8146:18:34"},{"arguments":[{"name":"value1","nativeSrc":"8170:6:34","nodeType":"YulIdentifier","src":"8170:6:34"},{"kind":"number","nativeSrc":"8178:4:34","nodeType":"YulLiteral","src":"8178:4:34","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"8166:3:34","nodeType":"YulIdentifier","src":"8166:3:34"},"nativeSrc":"8166:17:34","nodeType":"YulFunctionCall","src":"8166:17:34"}],"functionName":{"name":"mstore","nativeSrc":"8139:6:34","nodeType":"YulIdentifier","src":"8139:6:34"},"nativeSrc":"8139:45:34","nodeType":"YulFunctionCall","src":"8139:45:34"},"nativeSrc":"8139:45:34","nodeType":"YulExpressionStatement","src":"8139:45:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8204:9:34","nodeType":"YulIdentifier","src":"8204:9:34"},{"kind":"number","nativeSrc":"8215:2:34","nodeType":"YulLiteral","src":"8215:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8200:3:34","nodeType":"YulIdentifier","src":"8200:3:34"},"nativeSrc":"8200:18:34","nodeType":"YulFunctionCall","src":"8200:18:34"},{"name":"value2","nativeSrc":"8220:6:34","nodeType":"YulIdentifier","src":"8220:6:34"}],"functionName":{"name":"mstore","nativeSrc":"8193:6:34","nodeType":"YulIdentifier","src":"8193:6:34"},"nativeSrc":"8193:34:34","nodeType":"YulFunctionCall","src":"8193:34:34"},"nativeSrc":"8193:34:34","nodeType":"YulExpressionStatement","src":"8193:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8247:9:34","nodeType":"YulIdentifier","src":"8247:9:34"},{"kind":"number","nativeSrc":"8258:2:34","nodeType":"YulLiteral","src":"8258:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8243:3:34","nodeType":"YulIdentifier","src":"8243:3:34"},"nativeSrc":"8243:18:34","nodeType":"YulFunctionCall","src":"8243:18:34"},{"name":"value3","nativeSrc":"8263:6:34","nodeType":"YulIdentifier","src":"8263:6:34"}],"functionName":{"name":"mstore","nativeSrc":"8236:6:34","nodeType":"YulIdentifier","src":"8236:6:34"},"nativeSrc":"8236:34:34","nodeType":"YulFunctionCall","src":"8236:34:34"},"nativeSrc":"8236:34:34","nodeType":"YulExpressionStatement","src":"8236:34:34"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"7878:398:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8004:9:34","nodeType":"YulTypedName","src":"8004:9:34","type":""},{"name":"value3","nativeSrc":"8015:6:34","nodeType":"YulTypedName","src":"8015:6:34","type":""},{"name":"value2","nativeSrc":"8023:6:34","nodeType":"YulTypedName","src":"8023:6:34","type":""},{"name":"value1","nativeSrc":"8031:6:34","nodeType":"YulTypedName","src":"8031:6:34","type":""},{"name":"value0","nativeSrc":"8039:6:34","nodeType":"YulTypedName","src":"8039:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8050:4:34","nodeType":"YulTypedName","src":"8050:4:34","type":""}],"src":"7878:398:34"},{"body":{"nativeSrc":"8313:95:34","nodeType":"YulBlock","src":"8313:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8330:1:34","nodeType":"YulLiteral","src":"8330:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"8337:3:34","nodeType":"YulLiteral","src":"8337:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"8342:10:34","nodeType":"YulLiteral","src":"8342:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"8333:3:34","nodeType":"YulIdentifier","src":"8333:3:34"},"nativeSrc":"8333:20:34","nodeType":"YulFunctionCall","src":"8333:20:34"}],"functionName":{"name":"mstore","nativeSrc":"8323:6:34","nodeType":"YulIdentifier","src":"8323:6:34"},"nativeSrc":"8323:31:34","nodeType":"YulFunctionCall","src":"8323:31:34"},"nativeSrc":"8323:31:34","nodeType":"YulExpressionStatement","src":"8323:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8370:1:34","nodeType":"YulLiteral","src":"8370:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"8373:4:34","nodeType":"YulLiteral","src":"8373:4:34","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"8363:6:34","nodeType":"YulIdentifier","src":"8363:6:34"},"nativeSrc":"8363:15:34","nodeType":"YulFunctionCall","src":"8363:15:34"},"nativeSrc":"8363:15:34","nodeType":"YulExpressionStatement","src":"8363:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8394:1:34","nodeType":"YulLiteral","src":"8394:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"8397:4:34","nodeType":"YulLiteral","src":"8397:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8387:6:34","nodeType":"YulIdentifier","src":"8387:6:34"},"nativeSrc":"8387:15:34","nodeType":"YulFunctionCall","src":"8387:15:34"},"nativeSrc":"8387:15:34","nodeType":"YulExpressionStatement","src":"8387:15:34"}]},"name":"panic_error_0x21","nativeSrc":"8281:127:34","nodeType":"YulFunctionDefinition","src":"8281:127:34"}]},"contents":"{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        mcopy(add(pos, 0x20), add(value, 0x20), length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 96))\n        value3 := value_1\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 160))\n        value5 := value_3\n        let value_4 := 0\n        value_4 := calldataload(add(headStart, 192))\n        value6 := value_4\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2466":[{"length":32,"start":1815}],"2468":[{"length":32,"start":1773}],"2470":[{"length":32,"start":1731}],"2472":[{"length":32,"start":1896}],"2474":[{"length":32,"start":1936}],"2477":[{"length":32,"start":2225}],"2480":[{"length":32,"start":2270}]},"linkReferences":{},"object":"608060405234801561000f575f80fd5b506004361061012f575f3560e01c806379cc6790116100ad57806395d89b411161007d578063d505accf11610063578063d505accf1461026c578063dd62ed3e1461027f578063f2fde38b146102b7575f80fd5b806395d89b4114610251578063a9059cbb14610259575f80fd5b806379cc6790146101f55780637ecebe001461020857806384b0196e1461021b5780638da5cb5b14610236575f80fd5b8063313ce5671161010257806342966c68116100e857806342966c68146101b057806370a08231146101c5578063715018a6146101ed575f80fd5b8063313ce567146101995780633644e515146101a8575f80fd5b806306fdde0314610133578063095ea7b31461015157806318160ddd1461017457806323b872dd14610186575b5f80fd5b61013b6102ca565b6040516101489190610e0f565b60405180910390f35b61016461015f366004610e43565b61035a565b6040519015158152602001610148565b6002545b604051908152602001610148565b610164610194366004610e6b565b610373565b60405160128152602001610148565b610178610396565b6101c36101be366004610ea5565b6103a4565b005b6101786101d3366004610ebc565b6001600160a01b03165f9081526020819052604090205490565b6101c36103b1565b6101c3610203366004610e43565b6103c4565b610178610216366004610ebc565b6103dd565b6102236103fa565b6040516101489796959493929190610ed5565b6008546040516001600160a01b039091168152602001610148565b61013b61043c565b610164610267366004610e43565b61044b565b6101c361027a366004610f6b565b610458565b61017861028d366004610fd8565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6101c36102c5366004610ebc565b610593565b6060600380546102d990611009565b80601f016020809104026020016040519081016040528092919081815260200182805461030590611009565b80156103505780601f1061032757610100808354040283529160200191610350565b820191905f5260205f20905b81548152906001019060200180831161033357829003601f168201915b5050505050905090565b5f336103678185856105cd565b60019150505b92915050565b5f336103808582856105df565b61038b85858561065a565b506001949350505050565b5f61039f6106b7565b905090565b6103ae33826107e0565b50565b6103b9610814565b6103c25f610841565b565b6103cf8233836105df565b6103d982826107e0565b5050565b6001600160a01b0381165f9081526007602052604081205461036d565b5f6060805f805f606061040b6108aa565b6104136108d7565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600480546102d990611009565b5f3361036781858561065a565b834211156104815760405163313c898160e11b8152600481018590526024015b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886104cc8c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61052682610904565b90505f61053582878787610930565b9050896001600160a01b0316816001600160a01b03161461057c576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610478565b6105878a8a8a6105cd565b50505050505050505050565b61059b610814565b6001600160a01b0381166105c457604051631e4fbdf760e01b81525f6004820152602401610478565b6103ae81610841565b6105da838383600161095c565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610654578181101561064657604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610478565b61065484848484035f61095c565b50505050565b6001600160a01b03831661068357604051634b637e8f60e11b81525f6004820152602401610478565b6001600160a01b0382166106ac5760405163ec442f0560e01b81525f6004820152602401610478565b6105da838383610a2e565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561070f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561073957507f000000000000000000000000000000000000000000000000000000000000000090565b61039f604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b6001600160a01b03821661080957604051634b637e8f60e11b81525f6004820152602401610478565b6103d9825f83610a2e565b6008546001600160a01b031633146103c25760405163118cdaa760e01b8152336004820152602401610478565b600880546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b606061039f7f00000000000000000000000000000000000000000000000000000000000000006005610b54565b606061039f7f00000000000000000000000000000000000000000000000000000000000000006006610b54565b5f61036d6109106106b7565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8061094088888888610bfd565b9250925092506109508282610cc5565b50909695505050505050565b6001600160a01b0384166109855760405163e602df0560e01b81525f6004820152602401610478565b6001600160a01b0383166109ae57604051634a1406b160e11b81525f6004820152602401610478565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561065457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a2091815260200190565b60405180910390a350505050565b6001600160a01b038316610a58578060025f828254610a4d9190611041565b90915550610ac89050565b6001600160a01b0383165f9081526020819052604090205481811015610aaa5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610478565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610ae457600280548290039055610b02565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b4791815260200190565b60405180910390a3505050565b606060ff8314610b6e57610b6783610d7d565b905061036d565b818054610b7a90611009565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba690611009565b8015610bf15780601f10610bc857610100808354040283529160200191610bf1565b820191905f5260205f20905b815481529060010190602001808311610bd457829003601f168201915b5050505050905061036d565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610c3657505f91506003905082610cbb565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610c87573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610cb257505f925060019150829050610cbb565b92505f91508190505b9450945094915050565b5f826003811115610cd857610cd8611060565b03610ce1575050565b6001826003811115610cf557610cf5611060565b03610d135760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610d2757610d27611060565b03610d485760405163fce698f760e01b815260048101829052602401610478565b6003826003811115610d5c57610d5c611060565b036103d9576040516335e2f38360e21b815260048101829052602401610478565b60605f610d8983610dba565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f81111561036d57604051632cd44ac360e21b815260040160405180910390fd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610e216020830184610de1565b9392505050565b80356001600160a01b0381168114610e3e575f80fd5b919050565b5f8060408385031215610e54575f80fd5b610e5d83610e28565b946020939093013593505050565b5f805f60608486031215610e7d575f80fd5b610e8684610e28565b9250610e9460208501610e28565b929592945050506040919091013590565b5f60208284031215610eb5575f80fd5b5035919050565b5f60208284031215610ecc575f80fd5b610e2182610e28565b60ff60f81b8816815260e060208201525f610ef360e0830189610de1565b8281036040840152610f058189610de1565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015610f5a578351835260209384019390920191600101610f3c565b50909b9a5050505050505050505050565b5f805f805f805f60e0888a031215610f81575f80fd5b610f8a88610e28565b9650610f9860208901610e28565b95506040880135945060608801359350608088013560ff81168114610fbb575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f8060408385031215610fe9575f80fd5b610ff283610e28565b915061100060208401610e28565b90509250929050565b600181811c9082168061101d57607f821691505b60208210810361103b57634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561036d57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7D JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x259 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x236 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0xE8 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1ED JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1A8 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x186 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x13B PUSH2 0x2CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x164 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH2 0x164 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6B JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x396 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xEA5 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x178 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x3B1 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x3C4 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x223 PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x148 JUMP JUMPDEST PUSH2 0x13B PUSH2 0x43C JUMP JUMPDEST PUSH2 0x164 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x44B JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0xF6B JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH2 0x2C5 CALLDATASIZE PUSH1 0x4 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x593 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x305 SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x350 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x327 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x350 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x333 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x367 DUP2 DUP6 DUP6 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x380 DUP6 DUP3 DUP6 PUSH2 0x5DF JUMP JUMPDEST PUSH2 0x38B DUP6 DUP6 DUP6 PUSH2 0x65A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x39F PUSH2 0x6B7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3AE CALLER DUP3 PUSH2 0x7E0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3B9 PUSH2 0x814 JUMP JUMPDEST PUSH2 0x3C2 PUSH0 PUSH2 0x841 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3CF DUP3 CALLER DUP4 PUSH2 0x5DF JUMP JUMPDEST PUSH2 0x3D9 DUP3 DUP3 PUSH2 0x7E0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x36D JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x40B PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x413 PUSH2 0x8D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1009 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x367 DUP2 DUP6 DUP6 PUSH2 0x65A JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x481 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x4CC DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x526 DUP3 PUSH2 0x904 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x535 DUP3 DUP8 DUP8 DUP8 PUSH2 0x930 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x57C JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x587 DUP11 DUP11 DUP11 PUSH2 0x5CD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x59B PUSH2 0x814 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x3AE DUP2 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x5DA DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x95C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x654 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x646 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x654 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x95C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x683 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6AC JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x5DA DUP4 DUP4 DUP4 PUSH2 0xA2E JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x70F JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x739 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x39F PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x809 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH2 0x3D9 DUP3 PUSH0 DUP4 PUSH2 0xA2E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x39F PUSH32 0x0 PUSH1 0x5 PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x39F PUSH32 0x0 PUSH1 0x6 PUSH2 0xB54 JUMP JUMPDEST PUSH0 PUSH2 0x36D PUSH2 0x910 PUSH2 0x6B7 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x940 DUP9 DUP9 DUP9 DUP9 PUSH2 0xBFD JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x950 DUP3 DUP3 PUSH2 0xCC5 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x9AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x654 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xA20 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA58 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xA4D SWAP2 SWAP1 PUSH2 0x1041 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xAC8 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xAAA JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE4 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xB02 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xB47 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xB6E JUMPI PUSH2 0xB67 DUP4 PUSH2 0xD7D JUMP JUMPDEST SWAP1 POP PUSH2 0x36D JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xB7A SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBA6 SWAP1 PUSH2 0x1009 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBC8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x36D JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xC36 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC87 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCB2 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xCBB JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCD8 JUMPI PUSH2 0xCD8 PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0xCE1 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCF5 JUMPI PUSH2 0xCF5 PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD27 JUMPI PUSH2 0xD27 PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0xD48 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD5C JUMPI PUSH2 0xD5C PUSH2 0x1060 JUMP JUMPDEST SUB PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x478 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xD89 DUP4 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xE21 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDE1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE3E JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE54 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE5D DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE7D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE86 DUP5 PUSH2 0xE28 JUMP JUMPDEST SWAP3 POP PUSH2 0xE94 PUSH1 0x20 DUP6 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xECC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE21 DUP3 PUSH2 0xE28 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xEF3 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xDE1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xF05 DUP2 DUP10 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF5A JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xF3C JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xF81 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF8A DUP9 PUSH2 0xE28 JUMP JUMPDEST SWAP7 POP PUSH2 0xF98 PUSH1 0x20 DUP10 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xFBB JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFE9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFF2 DUP4 PUSH2 0xE28 JUMP JUMPDEST SWAP2 POP PUSH2 0x1000 PUSH1 0x20 DUP5 ADD PUSH2 0xE28 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x101D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x103B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x36D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"385:172:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1204:14:34;;1197:22;1179:41;;1167:2;1152:18;4293:186:3;1039:187:34;3144:97:3;3222:12;;3144:97;;;1377:25:34;;;1365:2;1350:18;3144:97:3;1231:177:34;5039:244:3;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;1934:36:34;;1922:2;1907:18;3002:82:3;1792:184:34;2656:112:6;;;:::i;618:87:5:-;;;;;;:::i;:::-;;:::i;:::-;;3299:116:3;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:3;3364:7;3390:18;;;;;;;;;;;;3299:116;2293:101:0;;;:::i;1021:158:5:-;;;;;;:::i;:::-;;:::i;2406:143:6:-;;;;;;:::i;:::-;;:::i;5144:557:16:-;;;:::i;:::-;;;;;;;;;;;;;:::i;1638:85:0:-;1710:6;;1638:85;;-1:-1:-1;;;;;1710:6:0;;;3997:74:34;;3985:2;3970:18;1638:85:0;3851:226:34;2276:93:3;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;1680:672:6:-;;;;;;:::i;:::-;;:::i;3846:140:3:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:3;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2543:215:0;;;;;;:::i;:::-;;:::i;2074:89:3:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:10;4420:31:3;735:10:10;4436:7:3;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:10;5182:37:3;5198:4;735:10:10;5213:5:3;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:3;;5039:244;-1:-1:-1;;;;5039:244:3:o;2656:112:6:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;618:87:5:-;672:26;735:10:10;692:5:5;672;:26::i;:::-;618:87;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1021:158:5:-;1096:45;1112:7;735:10:10;1135:5:5;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;:::-;1021:158;;:::o;2406:143:6:-;-1:-1:-1;;;;;624:14:11;;2497:7:6;624:14:11;;;:7;:14;;;;;;2523:19:6;538:107:11;5144:557:16;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:16;;;-1:-1:-1;5482:212:16;;-1:-1:-1;5590:13:16;;-1:-1:-1;5625:4:16;;-1:-1:-1;5652:1:16;-1:-1:-1;5668:16:16;-1:-1:-1;5482:212:16;-1:-1:-1;5144:557:16:o;2276:93:3:-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:10;3733:27:3;735:10:10;3750:2:3;3754:5;3733:9;:27::i;1680:672:6:-;1901:8;1883:15;:26;1879:97;;;1932:33;;-1:-1:-1;;;1932:33:6;;;;;1377:25:34;;;1350:18;;1932:33:6;;;;;;;;1879:97;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;-1:-1:-1;;;;;1121:14:11;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2068:16:6;2017:78;;;;;;6059:25:34;;;;-1:-1:-1;;;;;6120:55:34;;;6100:18;;;6093:83;6212:55;;;;6192:18;;;6185:83;6284:18;;;6277:34;6327:19;;;6320:35;6371:19;;;6364:35;;;6031:19;;2017:78:6;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;-1:-1:-1;;;;;2220:15:6;:6;-1:-1:-1;;;;;2220:15:6;;2216:88;;2258:35;;-1:-1:-1;;;2258:35:6;;-1:-1:-1;;;;;6602:55:34;;;2258:35:6;;;6584:74:34;6694:55;;6674:18;;;6667:83;6557:18;;2258:35:6;6410:346:34;2216:88:6;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;3997:74:34::0;3970:18;;2672:31:0::1;3851:226:34::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;8989:128:3:-:0;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:3;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:3;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:3;;-1:-1:-1;;;;;6981:55:34;;10936:60:3;;;6963:74:34;7053:18;;;7046:34;;;7096:18;;;7089:34;;;6936:18;;10936:60:3;6761:368:34;10881:130:3;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:3;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:3;;5807:1;5780:30;;;3997:74:34;3970:18;;5780:30:3;3851:226:34;5735:86:3;-1:-1:-1;;;;;5834:16:3;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:3;;5902:1;5873:32;;;3997:74:34;3970:18;;5873:32:3;3851:226:34;5830:86:3;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;3845:262:16:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:16;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:16;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;7620:25:34;4226:11:16;7661:18:34;;;7654:34;;;;4239:14:16;7704:18:34;;;7697:34;4255:13:16;7747:18:34;;;7740:34;4278:4:16;7790:19:34;;;7783:84;4168:7:16;;7592:19:34;;4204:80:16;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;8247:206:3;-1:-1:-1;;;;;8317:21:3;;8313:89;;8361:30;;-1:-1:-1;;;8361:30:3;;8388:1;8361:30;;;3997:74:34;3970:18;;8361:30:3;3851:226:34;8313:89:3;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;1796:162:0:-;1710:6;;-1:-1:-1;;;;;1710:6:0;735:10:10;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:10;1901:40:0;;;3997:74:34;3970:18;;1901:40:0;3851:226:34;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;;;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;6021:126:16:-;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;4917:176::-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3555:4:17;3549:11;-1:-1:-1;;;3573:23:17;;3625:4;3616:14;;3609:39;;;;3677:4;3668:14;;3661:34;3733:4;3718:20;;;3353:401;6803:260:15;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;-1:-1:-1;7047:9:15;;6803:260;-1:-1:-1;;;;;;6803:260:15:o;9949:432:3:-;-1:-1:-1;;;;;10061:19:3;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:3;;10132:1;10103:32;;;3997:74:34;3970:18;;10103:32:3;3851:226:34;10057:89:3;-1:-1:-1;;;;;10159:21:3;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:3;;10231:1;10203:31;;;3997:74:34;3970:18;;10203:31:3;3851:226:34;10155:90:3;-1:-1:-1;;;;;10254:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:3;10342:5;-1:-1:-1;;;;;10333:31:3;;10358:5;10333:31;;;;1377:25:34;;1365:2;1350:18;;1231:177;10333:31:3;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:3;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:3;;-1:-1:-1;6356:540:3;;-1:-1:-1;;;;;6570:15:3;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:3;;-1:-1:-1;;;;;6981:55:34;;6649:50:3;;;6963:74:34;7053:18;;;7046:34;;;7096:18;;;7089:34;;;6936:18;;6649:50:3;6761:368:34;6599:115:3;-1:-1:-1;;;;;6834:15:3;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:3;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:3;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:3;7355:4;-1:-1:-1;;;;;7346:25:3;;7365:5;7346:25;;;;1377::34;;1365:2;1350:18;;1231:177;7346:25:3;;;;;;;;6271:1107;;;:::o;3385:267:12:-;3479:13;1390:66;3508:46;;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5140:1530:15;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:15;;-1:-1:-1;6301:30:15;;-1:-1:-1;6333:1:15;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;8105:25:34;;;8178:4;8166:17;;8146:18;;;8139:45;;;;8200:18;;;8193:34;;;8243:18;;;8236:34;;;6457:24:15;;8077:19:34;;6457:24:15;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:15;;-1:-1:-1;;6457:24:15;;;-1:-1:-1;;;;;;;6495:20:15;;6491:113;;-1:-1:-1;6547:1:15;;-1:-1:-1;6551:29:15;;-1:-1:-1;6547:1:15;;-1:-1:-1;6531:62:15;;6491:113;6622:6;-1:-1:-1;6630:20:15;;-1:-1:-1;6630:20:15;;-1:-1:-1;5140:1530:15;;;;;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:15;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:15;;;;;1377:25:34;;;1350:18;;7550:46:15;1231:177:34;7479:243:15;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:15;;;;;1377:25:34;;;1350:18;;7679:32:15;1231:177:34;2078:405:12;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:12;;2300:14;;;;;;;;;-1:-1:-1;;;2390:16:12;;;-1:-1:-1;2435:4:12;2426:14;;2419:28;;;;-1:-1:-1;2390:16:12;2078:405::o;2555:245::-;2616:7;2688:4;2652:40;;2715:2;2706:11;;2702:69;;;2740:20;;-1:-1:-1;;;2740:20:12;;;;;;;;;;;14:289:34;56:3;94:5;88:12;121:6;116:3;109:19;177:6;170:4;163:5;159:16;152:4;147:3;143:14;137:47;229:1;222:4;213:6;208:3;204:16;200:27;193:38;292:4;285:2;281:7;276:2;268:6;264:15;260:29;255:3;251:39;247:50;240:57;;;14:289;;;;:::o;308:220::-;457:2;446:9;439:21;420:4;477:45;518:2;507:9;503:18;495:6;477:45;:::i;:::-;469:53;308:220;-1:-1:-1;;;308:220:34:o;533:196::-;601:20;;-1:-1:-1;;;;;650:54:34;;640:65;;630:93;;719:1;716;709:12;630:93;533:196;;;:::o;734:300::-;802:6;810;863:2;851:9;842:7;838:23;834:32;831:52;;;879:1;876;869:12;831:52;902:29;921:9;902:29;:::i;:::-;892:39;1000:2;985:18;;;;972:32;;-1:-1:-1;;;734:300:34:o;1413:374::-;1490:6;1498;1506;1559:2;1547:9;1538:7;1534:23;1530:32;1527:52;;;1575:1;1572;1565:12;1527:52;1598:29;1617:9;1598:29;:::i;:::-;1588:39;;1646:38;1680:2;1669:9;1665:18;1646:38;:::i;:::-;1413:374;;1636:48;;-1:-1:-1;;;1753:2:34;1738:18;;;;1725:32;;1413:374::o;2163:226::-;2222:6;2275:2;2263:9;2254:7;2250:23;2246:32;2243:52;;;2291:1;2288;2281:12;2243:52;-1:-1:-1;2336:23:34;;2163:226;-1:-1:-1;2163:226:34:o;2394:186::-;2453:6;2506:2;2494:9;2485:7;2481:23;2477:32;2474:52;;;2522:1;2519;2512:12;2474:52;2545:29;2564:9;2545:29;:::i;2585:1261::-;2991:3;2986;2982:13;2974:6;2970:26;2959:9;2952:45;3033:3;3028:2;3017:9;3013:18;3006:31;2933:4;3060:46;3101:3;3090:9;3086:19;3078:6;3060:46;:::i;:::-;3154:9;3146:6;3142:22;3137:2;3126:9;3122:18;3115:50;3188:33;3214:6;3206;3188:33;:::i;:::-;3252:2;3237:18;;3230:34;;;-1:-1:-1;;;;;3301:55:34;;3295:3;3280:19;;3273:84;3388:3;3373:19;;3366:35;;;3438:22;;;3432:3;3417:19;;3410:51;3510:13;;3532:22;;;3582:2;3608:15;;;;-1:-1:-1;3570:15:34;;;;-1:-1:-1;3651:169:34;3665:6;3662:1;3659:13;3651:169;;;3726:13;;3714:26;;3769:2;3795:15;;;;3760:12;;;;3687:1;3680:9;3651:169;;;-1:-1:-1;3837:3:34;;2585:1261;-1:-1:-1;;;;;;;;;;;2585:1261:34:o;4082:903::-;4193:6;4201;4209;4217;4225;4233;4241;4294:3;4282:9;4273:7;4269:23;4265:33;4262:53;;;4311:1;4308;4301:12;4262:53;4334:29;4353:9;4334:29;:::i;:::-;4324:39;;4382:38;4416:2;4405:9;4401:18;4382:38;:::i;:::-;4372:48;-1:-1:-1;4489:2:34;4474:18;;4461:32;;-1:-1:-1;4590:2:34;4575:18;;4562:32;;-1:-1:-1;4672:3:34;4657:19;;4644:33;4721:4;4708:18;;4696:31;;4686:59;;4741:1;4738;4731:12;4686:59;4082:903;;;;-1:-1:-1;4082:903:34;;;;4764:7;4844:3;4829:19;;4816:33;;-1:-1:-1;4948:3:34;4933:19;;;4920:33;;4082:903;-1:-1:-1;;4082:903:34:o;4990:260::-;5058:6;5066;5119:2;5107:9;5098:7;5094:23;5090:32;5087:52;;;5135:1;5132;5125:12;5087:52;5158:29;5177:9;5158:29;:::i;:::-;5148:39;;5206:38;5240:2;5229:9;5225:18;5206:38;:::i;:::-;5196:48;;4990:260;;;;;:::o;5255:380::-;5334:1;5330:12;;;;5377;;;5398:61;;5452:4;5444:6;5440:17;5430:27;;5398:61;5505:2;5497:6;5494:14;5474:18;5471:38;5468:161;;5551:10;5546:3;5542:20;5539:1;5532:31;5586:4;5583:1;5576:15;5614:4;5611:1;5604:15;5468:161;;5255:380;;;:::o;7134:222::-;7199:9;;;7220:10;;;7217:133;;;7272:10;7267:3;7263:20;7260:1;7253:31;7307:4;7304:1;7297:15;7335:4;7332:1;7325:15;8281:127;8342:10;8337:3;8333:20;8330:1;8323:31;8373:4;8370:1;8363:15;8397:4;8394:1;8387:15"},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","eip712Domain()":"84b0196e","name()":"06fdde03","nonces(address)":"7ecebe00","owner()":"8da5cb5b","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","renounceOwnership()":"715018a6","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/goat/GoatToken.sol\":\"GoatToken\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/goat/GoatToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {ERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract GoatToken is ERC20Permit, ERC20Burnable, Ownable {\\n    constructor()\\n        ERC20(\\\"GOAT\\\", \\\"GOAT\\\")\\n        Ownable(msg.sender)\\n        ERC20Permit(\\\"GOAT\\\")\\n    {}\\n}\\n\",\"keccak256\":\"0xca3687cf40f6598ba7cec85b657245cb86c28504ef20cb814630be17e9f71618\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/interfaces/Bitcoin.sol":{"IBitcoin":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"height","type":"uint256"}],"name":"NewBlockHash","type":"event"},{"inputs":[{"internalType":"uint256","name":"_height","type":"uint256"}],"name":"blockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestHeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"networkName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"newBlockHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startHeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"blockHash(uint256)":"85df51fd","latestHeight()":"e405bbc3","networkName()":"107bf28c","newBlockHash(bytes32)":"94f490bd","startHeight()":"26a6557a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"NewBlockHash\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"blockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"newBlockHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/Bitcoin.sol\":\"IBitcoin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/Bitcoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface IBitcoin {\\n    event NewBlockHash(uint256 height);\\n\\n    function startHeight() external view returns (uint256);\\n\\n    function latestHeight() external view returns (uint256);\\n\\n    function blockHash(uint256 _height) external view returns (bytes32);\\n\\n    function newBlockHash(bytes32 _hash) external;\\n\\n    function networkName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9160d2258595cdc8224e95d8dfbb8b262a328cec251aef3fd59af181f3b29615\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/interfaces/Relayer.sol":{"IRelayer":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes20","name":"voter","type":"bytes20"},{"indexed":false,"internalType":"bytes32","name":"keyHash","type":"bytes32"}],"name":"AddedVoter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes20","name":"voter","type":"bytes20"}],"name":"RemovedVoter","type":"event"},{"inputs":[{"internalType":"bytes20","name":"voter","type":"bytes20"},{"internalType":"bytes32","name":"vtkey","type":"bytes32"}],"name":"addVoter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes20","name":"voter","type":"bytes20"}],"name":"removeVoter","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addVoter(bytes20,bytes32)":"d782d4f7","removeVoter(bytes20)":"6b75a2b3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"AddedVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"}],\"name\":\"RemovedVoter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"},{\"internalType\":\"bytes32\",\"name\":\"vtkey\",\"type\":\"bytes32\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"}],\"name\":\"removeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/Relayer.sol\":\"IRelayer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/Relayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IRelayer {\\n    event AddedVoter(bytes20 indexed voter, bytes32 keyHash);\\n\\n    event RemovedVoter(bytes20 indexed voter);\\n\\n    function addVoter(bytes20 voter, bytes32 vtkey) external;\\n\\n    function removeVoter(bytes20 voter) external;\\n}\\n\",\"keccak256\":\"0xaab0ac9d0e26c562439a57c2589d5f84c46e0191e10121adeca830f950f6a23b\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/interfaces/bridge/Bridge.sol":{"IBridge":{"abi":[{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"RateLimitExceeded","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Canceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Canceling","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"txid","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"txout","type":"uint32"},{"indexed":false,"internalType":"uint256","name":"tax","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"txid","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"txout","type":"uint32"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Paid","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxTxPrice","type":"uint256"}],"name":"RBF","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Refund","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tax","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxTxPrice","type":"uint256"},{"indexed":false,"internalType":"string","name":"receiver","type":"string"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"cancel1","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"cancel2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txid","type":"bytes32"},{"internalType":"uint32","name":"txout","type":"uint32"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txid","type":"bytes32"},{"internalType":"uint32","name":"txout","type":"uint32"}],"name":"isDeposited","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes32","name":"txid","type":"bytes32"},{"internalType":"uint32","name":"txout","type":"uint32"},{"internalType":"uint256","name":"paid","type":"uint256"}],"name":"paid","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint16","name":"maxTxPrice","type":"uint16"}],"name":"replaceByFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"receiver","type":"string"},{"internalType":"uint16","name":"maxTxPrice","type":"uint16"}],"name":"withdraw","outputs":[],"stateMutability":"payable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"cancel1(uint256)":"84a64c12","cancel2(uint256)":"c19dd320","deposit(bytes32,uint32,address,uint256)":"b55ada39","isDeposited(bytes32,uint32)":"1ccc92c7","paid(uint256,bytes32,uint32,uint256)":"b670ab5e","refund(uint256)":"278ecde1","replaceByFee(uint256,uint16)":"b3dd64dd","withdraw(string,uint16)":"a81de869"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateLimitExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Canceling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxPrice\",\"type\":\"uint256\"}],\"name\":\"RBF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"}],\"name\":\"isDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"txout\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"name\":\"paid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxTxPrice\",\"type\":\"uint16\"}],\"name\":\"replaceByFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"maxTxPrice\",\"type\":\"uint16\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/bridge/Bridge.sol\":\"IBridge\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IBridge {\\n    event Deposit(\\n        address indexed target,\\n        uint256 indexed amount,\\n        bytes32 txid,\\n        uint32 txout,\\n        uint256 tax\\n    );\\n\\n    event Withdraw(\\n        uint256 indexed id,\\n        address indexed from,\\n        uint256 amount,\\n        uint256 tax,\\n        uint256 maxTxPrice,\\n        string receiver\\n    );\\n\\n    event Canceling(uint256 indexed id);\\n\\n    event Canceled(uint256 indexed id);\\n\\n    event Refund(uint256 indexed id);\\n\\n    event RBF(uint256 indexed id, uint256 maxTxPrice);\\n\\n    event Paid(uint256 indexed id, bytes32 txid, uint32 txout, uint256 value);\\n\\n    enum WithdrawalStatus {\\n        Invalid,\\n        Pending,\\n        Canceling,\\n        Canceled,\\n        Refunded,\\n        Paid\\n    }\\n\\n    error RateLimitExceeded();\\n    error InvalidAddress();\\n\\n    struct Withdrawal {\\n        address sender;\\n        uint256 amount; // msg.value - tax\\n        uint256 tax; // tax for goat foundation\\n        uint256 maxTxPrice;\\n        uint256 updatedAt;\\n        string receiver;\\n        WithdrawalStatus status;\\n    }\\n\\n    // the payment receipt\\n    struct Receipt {\\n        bytes32 txid;\\n        uint32 txout;\\n        uint256 received;\\n    }\\n\\n    function isDeposited(\\n        bytes32 txid,\\n        uint32 txout\\n    ) external view returns (bool);\\n\\n    function deposit(\\n        bytes32 txid,\\n        uint32 txout,\\n        address target,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        string calldata receiver,\\n        uint16 maxTxPrice\\n    ) external payable;\\n\\n    function replaceByFee(uint256 id, uint16 maxTxPrice) external;\\n\\n    function cancel1(uint256 id) external;\\n\\n    function refund(uint256 id) external;\\n\\n    function cancel2(uint256 id) external;\\n\\n    function paid(\\n        uint256 id,\\n        bytes32 txid,\\n        uint32 txout,\\n        uint256 paid\\n    ) external;\\n}\\n\",\"keccak256\":\"0x44a12635312f8fa98159216ddb142cfe4959e280a73a4c56c11ebe28ae1df0d1\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/interfaces/bridge/BridgeParam.sol":{"IBridgeParam":{"abi":[{"inputs":[],"name":"MalformedTax","type":"error"},{"inputs":[],"name":"TaxTooHigh","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"rate","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"max","type":"uint64"}],"name":"DepositTaxUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"","type":"uint16"}],"name":"RateLimitUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"rate","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"max","type":"uint64"}],"name":"WithdrawalTaxUpdated","type":"event"},{"inputs":[{"internalType":"uint16","name":"bp","type":"uint16"},{"internalType":"uint64","name":"max","type":"uint64"}],"name":"setDepositTax","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"sec","type":"uint16"}],"name":"setRateLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"bp","type":"uint16"},{"internalType":"uint64","name":"max","type":"uint64"}],"name":"setWithdrawalTax","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"setDepositTax(uint16,uint64)":"b3f33eda","setRateLimit(uint16)":"d653d820","setWithdrawalTax(uint16,uint64)":"8aa4af89"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MalformedTax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"DepositTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"RateLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"WithdrawalTaxUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"bp\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"setDepositTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sec\",\"type\":\"uint16\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"bp\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"setWithdrawalTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/bridge/BridgeParam.sol\":\"IBridgeParam\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/bridge/BridgeParam.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IBridgeParam {\\n    event DepositTaxUpdated(uint16 rate, uint64 max);\\n    event WithdrawalTaxUpdated(uint16 rate, uint64 max);\\n    event RateLimitUpdated(uint16);\\n\\n    struct Param {\\n        uint16 rateLimit;\\n        uint16 depositTaxBP;\\n        uint64 maxDepositTax;\\n        uint16 withdrawalTaxBP;\\n        uint64 maxWithdrawalTax;\\n        uint16 _res1;\\n        uint64 _res2;\\n    }\\n\\n    error TaxTooHigh();\\n\\n    error MalformedTax();\\n\\n    function setDepositTax(uint16 bp, uint64 max) external;\\n\\n    function setWithdrawalTax(uint16 bp, uint64 max) external;\\n\\n    function setRateLimit(uint16 sec) external;\\n}\\n\",\"keccak256\":\"0x3fbfd9b7efcad01d4b5048700454f05372ef98e371512110156037a061b826fa\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/library/constants/Executor.sol":{"Executor":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"58:205:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:205:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"58:205:29:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/constants/Executor.sol\":\"Executor\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/library/constants/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Executor {\\n    address internal constant Relayer =\\n        0xBc10000000000000000000000000000000001000;\\n\\n    address internal constant Locking =\\n        0xBC10000000000000000000000000000000001001;\\n}\\n\",\"keccak256\":\"0xa31f071b26279ca8fc6f27cbb14f47f545bf6b170b73d38ca5d797d146f6c285\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/library/constants/Predeployed.sol":{"PreDeployedAddresses":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602c6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x2C PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"58:817:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:817:30;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"58:817:30:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/constants/Predeployed.sol\":\"PreDeployedAddresses\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/library/constants/Predeployed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary PreDeployedAddresses {\\n    address internal constant WrappedGoatBitcoin =\\n        0xbC10000000000000000000000000000000000000;\\n\\n    address internal constant GoatDAO =\\n        0xBC10000000000000000000000000000000000Da0;\\n\\n    address internal constant GoatToken =\\n        0xbC10000000000000000000000000000000000001;\\n\\n    address payable internal constant GoatFoundation =\\n        payable(0xBc10000000000000000000000000000000000002);\\n\\n    address internal constant Bridge =\\n        0xBC10000000000000000000000000000000000003;\\n\\n    address internal constant Locking =\\n        0xbC10000000000000000000000000000000000004;\\n\\n    address internal constant BitcoinBlocks =\\n        0xbc10000000000000000000000000000000000005;\\n\\n    address internal constant Relayer =\\n        0xBC10000000000000000000000000000000000006;\\n}\\n\",\"keccak256\":\"0x57bda9ff9c425cd873a4499e7c5482a9b6be94e1c03e4c8ea392e0837ef99fe8\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/library/utils/BaseAccess.sol":{"BaseAccess":{"abi":[{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"Forbidden","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600e575f80fd5b50601580601a5f395ff3fe60806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x15 DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"111:210:31:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"111:210:31:-:0;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/utils/BaseAccess.sol\":\"BaseAccess\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/library/constants/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Executor {\\n    address internal constant Relayer =\\n        0xBc10000000000000000000000000000000001000;\\n\\n    address internal constant Locking =\\n        0xBC10000000000000000000000000000000001001;\\n}\\n\",\"keccak256\":\"0xa31f071b26279ca8fc6f27cbb14f47f545bf6b170b73d38ca5d797d146f6c285\",\"license\":\"MIT\"},\"contracts/library/utils/BaseAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Executor} from \\\"../constants/Executor.sol\\\";\\n\\ncontract BaseAccess {\\n    error AccessDenied();\\n    error Forbidden();\\n\\n    modifier OnlyRelayer() {\\n        if (msg.sender != Executor.Relayer) {\\n            revert AccessDenied();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7bba2af8e432bc544a2742912750286668be9d970a1508bdf53a3557ebf3e024\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/library/utils/Burner.sol":{"Burner":{"abi":[{"inputs":[],"stateMutability":"payable","type":"constructor"}],"evm":{"bytecode":{"functionDebugData":{"@_5299":{"entryPoint":null,"id":5299,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405230fffe","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE ADDRESS SELFDESTRUCT INVALID ","sourceMap":"58:99:32:-:0;;;141:4;112:36"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040525f80fdfea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"58:99:32:-:0;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/utils/Burner.sol\":\"Burner\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/library/utils/Burner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Burner {\\n    constructor() payable {\\n        selfdestruct(payable(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x22549cfb43806076ea46bbe3d0d51467e3b7d90381f743e0a632f7f6350c30fe\",\"license\":\"MIT\"}},\"version\":1}"}},"contracts/relayer/relayer.sol":{"Relayer":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes20","name":"voter","type":"bytes20"},{"indexed":false,"internalType":"bytes32","name":"keyHash","type":"bytes32"}],"name":"AddedVoter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes20","name":"voter","type":"bytes20"}],"name":"RemovedVoter","type":"event"},{"inputs":[],"name":"MAX_VOTER_COUNT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes20","name":"voter","type":"bytes20"},{"internalType":"bytes32","name":"vtkey","type":"bytes32"}],"name":"addVoter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"vtkh","type":"bytes32"}],"name":"pubkeys","outputs":[{"internalType":"bool","name":"exists","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes20","name":"voter","type":"bytes20"}],"name":"removeVoter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"total","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes20","name":"voter","type":"bytes20"}],"name":"voters","outputs":[{"internalType":"bool","name":"exists","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_5332":{"entryPoint":null,"id":5332,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":108,"id":146,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":187,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:514:34","nodeType":"YulBlock","src":"0:514:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"95:209:34","nodeType":"YulBlock","src":"95:209:34","statements":[{"body":{"nativeSrc":"141:16:34","nodeType":"YulBlock","src":"141:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:34","nodeType":"YulLiteral","src":"150:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:34","nodeType":"YulLiteral","src":"153:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:34","nodeType":"YulIdentifier","src":"143:6:34"},"nativeSrc":"143:12:34","nodeType":"YulFunctionCall","src":"143:12:34"},"nativeSrc":"143:12:34","nodeType":"YulExpressionStatement","src":"143:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"116:7:34","nodeType":"YulIdentifier","src":"116:7:34"},{"name":"headStart","nativeSrc":"125:9:34","nodeType":"YulIdentifier","src":"125:9:34"}],"functionName":{"name":"sub","nativeSrc":"112:3:34","nodeType":"YulIdentifier","src":"112:3:34"},"nativeSrc":"112:23:34","nodeType":"YulFunctionCall","src":"112:23:34"},{"kind":"number","nativeSrc":"137:2:34","nodeType":"YulLiteral","src":"137:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"108:3:34","nodeType":"YulIdentifier","src":"108:3:34"},"nativeSrc":"108:32:34","nodeType":"YulFunctionCall","src":"108:32:34"},"nativeSrc":"105:52:34","nodeType":"YulIf","src":"105:52:34"},{"nativeSrc":"166:29:34","nodeType":"YulVariableDeclaration","src":"166:29:34","value":{"arguments":[{"name":"headStart","nativeSrc":"185:9:34","nodeType":"YulIdentifier","src":"185:9:34"}],"functionName":{"name":"mload","nativeSrc":"179:5:34","nodeType":"YulIdentifier","src":"179:5:34"},"nativeSrc":"179:16:34","nodeType":"YulFunctionCall","src":"179:16:34"},"variables":[{"name":"value","nativeSrc":"170:5:34","nodeType":"YulTypedName","src":"170:5:34","type":""}]},{"body":{"nativeSrc":"258:16:34","nodeType":"YulBlock","src":"258:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"267:1:34","nodeType":"YulLiteral","src":"267:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"270:1:34","nodeType":"YulLiteral","src":"270:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"260:6:34","nodeType":"YulIdentifier","src":"260:6:34"},"nativeSrc":"260:12:34","nodeType":"YulFunctionCall","src":"260:12:34"},"nativeSrc":"260:12:34","nodeType":"YulExpressionStatement","src":"260:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"217:5:34","nodeType":"YulIdentifier","src":"217:5:34"},{"arguments":[{"name":"value","nativeSrc":"228:5:34","nodeType":"YulIdentifier","src":"228:5:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"243:3:34","nodeType":"YulLiteral","src":"243:3:34","type":"","value":"160"},{"kind":"number","nativeSrc":"248:1:34","nodeType":"YulLiteral","src":"248:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"239:3:34","nodeType":"YulIdentifier","src":"239:3:34"},"nativeSrc":"239:11:34","nodeType":"YulFunctionCall","src":"239:11:34"},{"kind":"number","nativeSrc":"252:1:34","nodeType":"YulLiteral","src":"252:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"235:3:34","nodeType":"YulIdentifier","src":"235:3:34"},"nativeSrc":"235:19:34","nodeType":"YulFunctionCall","src":"235:19:34"}],"functionName":{"name":"and","nativeSrc":"224:3:34","nodeType":"YulIdentifier","src":"224:3:34"},"nativeSrc":"224:31:34","nodeType":"YulFunctionCall","src":"224:31:34"}],"functionName":{"name":"eq","nativeSrc":"214:2:34","nodeType":"YulIdentifier","src":"214:2:34"},"nativeSrc":"214:42:34","nodeType":"YulFunctionCall","src":"214:42:34"}],"functionName":{"name":"iszero","nativeSrc":"207:6:34","nodeType":"YulIdentifier","src":"207:6:34"},"nativeSrc":"207:50:34","nodeType":"YulFunctionCall","src":"207:50:34"},"nativeSrc":"204:70:34","nodeType":"YulIf","src":"204:70:34"},{"nativeSrc":"283:15:34","nodeType":"YulAssignment","src":"283:15:34","value":{"name":"value","nativeSrc":"293:5:34","nodeType":"YulIdentifier","src":"293:5:34"},"variableNames":[{"name":"value0","nativeSrc":"283:6:34","nodeType":"YulIdentifier","src":"283:6:34"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"14:290:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"61:9:34","nodeType":"YulTypedName","src":"61:9:34","type":""},{"name":"dataEnd","nativeSrc":"72:7:34","nodeType":"YulTypedName","src":"72:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"84:6:34","nodeType":"YulTypedName","src":"84:6:34","type":""}],"src":"14:290:34"},{"body":{"nativeSrc":"410:102:34","nodeType":"YulBlock","src":"410:102:34","statements":[{"nativeSrc":"420:26:34","nodeType":"YulAssignment","src":"420:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"432:9:34","nodeType":"YulIdentifier","src":"432:9:34"},{"kind":"number","nativeSrc":"443:2:34","nodeType":"YulLiteral","src":"443:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"428:3:34","nodeType":"YulIdentifier","src":"428:3:34"},"nativeSrc":"428:18:34","nodeType":"YulFunctionCall","src":"428:18:34"},"variableNames":[{"name":"tail","nativeSrc":"420:4:34","nodeType":"YulIdentifier","src":"420:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"462:9:34","nodeType":"YulIdentifier","src":"462:9:34"},{"arguments":[{"name":"value0","nativeSrc":"477:6:34","nodeType":"YulIdentifier","src":"477:6:34"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"493:3:34","nodeType":"YulLiteral","src":"493:3:34","type":"","value":"160"},{"kind":"number","nativeSrc":"498:1:34","nodeType":"YulLiteral","src":"498:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"489:3:34","nodeType":"YulIdentifier","src":"489:3:34"},"nativeSrc":"489:11:34","nodeType":"YulFunctionCall","src":"489:11:34"},{"kind":"number","nativeSrc":"502:1:34","nodeType":"YulLiteral","src":"502:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"485:3:34","nodeType":"YulIdentifier","src":"485:3:34"},"nativeSrc":"485:19:34","nodeType":"YulFunctionCall","src":"485:19:34"}],"functionName":{"name":"and","nativeSrc":"473:3:34","nodeType":"YulIdentifier","src":"473:3:34"},"nativeSrc":"473:32:34","nodeType":"YulFunctionCall","src":"473:32:34"}],"functionName":{"name":"mstore","nativeSrc":"455:6:34","nodeType":"YulIdentifier","src":"455:6:34"},"nativeSrc":"455:51:34","nodeType":"YulFunctionCall","src":"455:51:34"},"nativeSrc":"455:51:34","nodeType":"YulExpressionStatement","src":"455:51:34"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"309:203:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"379:9:34","nodeType":"YulTypedName","src":"379:9:34","type":""},{"name":"value0","nativeSrc":"390:6:34","nodeType":"YulTypedName","src":"390:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"401:4:34","nodeType":"YulTypedName","src":"401:4:34","type":""}],"src":"309:203:34"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561000f575f80fd5b506040516107a63803806107a683398101604081905261002e916100bb565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100658161006c565b50506100e8565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100cb575f80fd5b81516001600160a01b03811681146100e1575f80fd5b9392505050565b6106b1806100f55f395ff3fe608060405234801561000f575f80fd5b506004361061009f575f3560e01c8063827fb8111161007257806398611f121161005857806398611f1214610141578063d782d4f714610163578063f2fde38b14610176575f80fd5b8063827fb8111461011e5780638da5cb5b14610127575f80fd5b80631a41e890146100a35780632ddbd13a146100da5780636b75a2b314610101578063715018a614610116575b5f80fd5b6100c56100b13660046105cf565b60026020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b5f546100ee90600160a01b900461ffff1681565b60405161ffff90911681526020016100d1565b61011461010f3660046105cf565b610189565b005b6101146102f8565b6100ee61010081565b5f546040516001600160a01b0390911681526020016100d1565b6100c561014f3660046105ef565b60016020525f908152604090205460ff1681565b610114610171366004610606565b61030b565b61011461018436600461062e565b6104de565b61019161051b565b6bffffffffffffffffffffffff1981165f9081526002602052604090205460ff166102035760405162461bcd60e51b815260206004820152600f60248201527f766f746572206e6f7420666f756e64000000000000000000000000000000000060448201526064015b60405180910390fd5b5f546001600160a01b90910461ffff16116102605760405162461bcd60e51b815260206004820152600e60248201527f746f6f2066657720766f7465727300000000000000000000000000000000000060448201526064016101fa565b6bffffffffffffffffffffffff1981165f908152600260205260408120805460ff191690558054600160a01b900461ffff1690601461029e83610668565b91906101000a81548161ffff021916908361ffff16021790555050806bffffffffffffffffffffffff19167fa4d0070f0847ad2444266e520aecd08cc31d75b1f1facc657f007083f985777860405160405180910390a250565b61030061051b565b6103095f610547565b565b61031361051b565b5f8181526001602052604090205460ff16156103715760405162461bcd60e51b815260206004820152600e60248201527f6475706c696361746564206b657900000000000000000000000000000000000060448201526064016101fa565b6bffffffffffffffffffffffff1982165f9081526002602052604090205460ff16156103df5760405162461bcd60e51b815260206004820152601060248201527f6475706c69636174656420766f7465720000000000000000000000000000000060448201526064016101fa565b5f805461010091906014906103fe90600160a01b900461ffff16610684565b91906101000a81548161ffff021916908361ffff160217905561ffff16106104685760405162461bcd60e51b815260206004820152600f60248201527f746f6f206d616e7920766f74657273000000000000000000000000000000000060448201526064016101fa565b6bffffffffffffffffffffffff1982165f8181526002602090815260408083208054600160ff1991821681179092558685528184529382902080549094161790925590518381527f2940969868a5545331aa91a95aaa97def154a66f4ed34985622a4136be3b1b04910160405180910390a25050565b6104e661051b565b6001600160a01b03811661050f57604051631e4fbdf760e01b81525f60048201526024016101fa565b61051881610547565b50565b5f546001600160a01b031633146103095760405163118cdaa760e01b81523360048201526024016101fa565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356bffffffffffffffffffffffff19811681146105ca575f80fd5b919050565b5f602082840312156105df575f80fd5b6105e8826105ae565b9392505050565b5f602082840312156105ff575f80fd5b5035919050565b5f8060408385031215610617575f80fd5b610620836105ae565b946020939093013593505050565b5f6020828403121561063e575f80fd5b81356001600160a01b03811681146105e8575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f61ffff82168061067b5761067b610654565b5f190192915050565b5f61ffff821661ffff810361069b5761069b610654565b6001019291505056fea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7A6 CODESIZE SUB DUP1 PUSH2 0x7A6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0xBB JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x65 DUP2 PUSH2 0x6C JUMP JUMPDEST POP POP PUSH2 0xE8 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE1 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6B1 DUP1 PUSH2 0xF5 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x827FB811 GT PUSH2 0x72 JUMPI DUP1 PUSH4 0x98611F12 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x98611F12 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0xD782D4F7 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x176 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x827FB811 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x127 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1A41E890 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x2DDBD13A EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x6B75A2B3 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x116 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xC5 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5CF JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 SLOAD PUSH2 0xEE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x114 PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0xEE PUSH2 0x100 DUP2 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x171 CALLDATASIZE PUSH1 0x4 PUSH2 0x606 JUMP JUMPDEST PUSH2 0x30B JUMP JUMPDEST PUSH2 0x114 PUSH2 0x184 CALLDATASIZE PUSH1 0x4 PUSH2 0x62E JUMP JUMPDEST PUSH2 0x4DE JUMP JUMPDEST PUSH2 0x191 PUSH2 0x51B JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x203 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x766F746572206E6F7420666F756E640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH2 0xFFFF AND GT PUSH2 0x260 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6F2066657720766F74657273000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND SWAP1 PUSH1 0x14 PUSH2 0x29E DUP4 PUSH2 0x668 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH32 0xA4D0070F0847AD2444266E520AECD08CC31D75B1F1FACC657F007083F9857778 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x300 PUSH2 0x51B JUMP JUMPDEST PUSH2 0x309 PUSH0 PUSH2 0x547 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x313 PUSH2 0x51B JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x371 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6475706C696361746564206B6579000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6475706C69636174656420766F74657200000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH1 0x14 SWAP1 PUSH2 0x3FE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x684 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE PUSH2 0xFFFF AND LT PUSH2 0x468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6F206D616E7920766F746572730000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE DUP7 DUP6 MSTORE DUP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP5 AND OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP4 DUP2 MSTORE PUSH32 0x2940969868A5545331AA91A95AAA97DEF154A66F4ED34985622A4136BE3B1B04 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x4E6 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x50F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x518 DUP2 PUSH2 0x547 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND DUP2 EQ PUSH2 0x5CA JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5DF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x5E8 DUP3 PUSH2 0x5AE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5FF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x617 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x620 DUP4 PUSH2 0x5AE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x63E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E8 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND DUP1 PUSH2 0x67B JUMPI PUSH2 0x67B PUSH2 0x654 JUMP JUMPDEST PUSH0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND PUSH2 0xFFFF DUP2 SUB PUSH2 0x69B JUMPI PUSH2 0x69B PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"203:1841:33:-:0;;;516:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;551:5;-1:-1:-1;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;455:51:34;428:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;516:44:33;203:1841;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:290:34:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:34;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:34:o;309:203::-;203:1841:33;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MAX_VOTER_COUNT_5313":{"entryPoint":null,"id":5313,"parameterSlots":0,"returnSlots":0},"@_checkOwner_84":{"entryPoint":1307,"id":84,"parameterSlots":0,"returnSlots":0},"@_msgSender_1429":{"entryPoint":null,"id":1429,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":1351,"id":146,"parameterSlots":1,"returnSlots":0},"@addVoter_5384":{"entryPoint":779,"id":5384,"parameterSlots":2,"returnSlots":0},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@pubkeys_5319":{"entryPoint":null,"id":5319,"parameterSlots":0,"returnSlots":0},"@removeVoter_5420":{"entryPoint":393,"id":5420,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_98":{"entryPoint":760,"id":98,"parameterSlots":0,"returnSlots":0},"@total_5315":{"entryPoint":null,"id":5315,"parameterSlots":0,"returnSlots":0},"@transferOwnership_126":{"entryPoint":1246,"id":126,"parameterSlots":1,"returnSlots":0},"@voters_5323":{"entryPoint":null,"id":5323,"parameterSlots":0,"returnSlots":0},"abi_decode_bytes20":{"entryPoint":1454,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1582,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes20":{"entryPoint":1487,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes20t_bytes32":{"entryPoint":1542,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":1519,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_17a7a094bed714d7a976817e1b97c661b5df5369664dcb0b5bf265f97b5fb68e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_62ed58227f24629179b3471ceab593c7808e28a9de10d196f617d0016115a7b5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6aaee0322235e78e47597728e9235efb307ea6e350eef5561421443a33e1250d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_873560222dc0f92eaf969bc27b1332bf2531ba58759b0850a597bdf9e9e44f21__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d1bc205a3fff4970024dfd61b2e1808a01cf394784bb003e93b2acdacd5c6869__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"decrement_t_uint16":{"entryPoint":1640,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint16":{"entryPoint":1668,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":1620,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:4262:34","nodeType":"YulBlock","src":"0:4262:34","statements":[{"nativeSrc":"6:3:34","nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nativeSrc":"63:136:34","nodeType":"YulBlock","src":"63:136:34","statements":[{"nativeSrc":"73:29:34","nodeType":"YulAssignment","src":"73:29:34","value":{"arguments":[{"name":"offset","nativeSrc":"95:6:34","nodeType":"YulIdentifier","src":"95:6:34"}],"functionName":{"name":"calldataload","nativeSrc":"82:12:34","nodeType":"YulIdentifier","src":"82:12:34"},"nativeSrc":"82:20:34","nodeType":"YulFunctionCall","src":"82:20:34"},"variableNames":[{"name":"value","nativeSrc":"73:5:34","nodeType":"YulIdentifier","src":"73:5:34"}]},{"body":{"nativeSrc":"177:16:34","nodeType":"YulBlock","src":"177:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"186:1:34","nodeType":"YulLiteral","src":"186:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"189:1:34","nodeType":"YulLiteral","src":"189:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"179:6:34","nodeType":"YulIdentifier","src":"179:6:34"},"nativeSrc":"179:12:34","nodeType":"YulFunctionCall","src":"179:12:34"},"nativeSrc":"179:12:34","nodeType":"YulExpressionStatement","src":"179:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"124:5:34","nodeType":"YulIdentifier","src":"124:5:34"},{"arguments":[{"name":"value","nativeSrc":"135:5:34","nodeType":"YulIdentifier","src":"135:5:34"},{"arguments":[{"kind":"number","nativeSrc":"146:26:34","nodeType":"YulLiteral","src":"146:26:34","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nativeSrc":"142:3:34","nodeType":"YulIdentifier","src":"142:3:34"},"nativeSrc":"142:31:34","nodeType":"YulFunctionCall","src":"142:31:34"}],"functionName":{"name":"and","nativeSrc":"131:3:34","nodeType":"YulIdentifier","src":"131:3:34"},"nativeSrc":"131:43:34","nodeType":"YulFunctionCall","src":"131:43:34"}],"functionName":{"name":"eq","nativeSrc":"121:2:34","nodeType":"YulIdentifier","src":"121:2:34"},"nativeSrc":"121:54:34","nodeType":"YulFunctionCall","src":"121:54:34"}],"functionName":{"name":"iszero","nativeSrc":"114:6:34","nodeType":"YulIdentifier","src":"114:6:34"},"nativeSrc":"114:62:34","nodeType":"YulFunctionCall","src":"114:62:34"},"nativeSrc":"111:82:34","nodeType":"YulIf","src":"111:82:34"}]},"name":"abi_decode_bytes20","nativeSrc":"14:185:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"42:6:34","nodeType":"YulTypedName","src":"42:6:34","type":""}],"returnVariables":[{"name":"value","nativeSrc":"53:5:34","nodeType":"YulTypedName","src":"53:5:34","type":""}],"src":"14:185:34"},{"body":{"nativeSrc":"274:116:34","nodeType":"YulBlock","src":"274:116:34","statements":[{"body":{"nativeSrc":"320:16:34","nodeType":"YulBlock","src":"320:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"329:1:34","nodeType":"YulLiteral","src":"329:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"332:1:34","nodeType":"YulLiteral","src":"332:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"322:6:34","nodeType":"YulIdentifier","src":"322:6:34"},"nativeSrc":"322:12:34","nodeType":"YulFunctionCall","src":"322:12:34"},"nativeSrc":"322:12:34","nodeType":"YulExpressionStatement","src":"322:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"295:7:34","nodeType":"YulIdentifier","src":"295:7:34"},{"name":"headStart","nativeSrc":"304:9:34","nodeType":"YulIdentifier","src":"304:9:34"}],"functionName":{"name":"sub","nativeSrc":"291:3:34","nodeType":"YulIdentifier","src":"291:3:34"},"nativeSrc":"291:23:34","nodeType":"YulFunctionCall","src":"291:23:34"},{"kind":"number","nativeSrc":"316:2:34","nodeType":"YulLiteral","src":"316:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"287:3:34","nodeType":"YulIdentifier","src":"287:3:34"},"nativeSrc":"287:32:34","nodeType":"YulFunctionCall","src":"287:32:34"},"nativeSrc":"284:52:34","nodeType":"YulIf","src":"284:52:34"},{"nativeSrc":"345:39:34","nodeType":"YulAssignment","src":"345:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"374:9:34","nodeType":"YulIdentifier","src":"374:9:34"}],"functionName":{"name":"abi_decode_bytes20","nativeSrc":"355:18:34","nodeType":"YulIdentifier","src":"355:18:34"},"nativeSrc":"355:29:34","nodeType":"YulFunctionCall","src":"355:29:34"},"variableNames":[{"name":"value0","nativeSrc":"345:6:34","nodeType":"YulIdentifier","src":"345:6:34"}]}]},"name":"abi_decode_tuple_t_bytes20","nativeSrc":"204:186:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"240:9:34","nodeType":"YulTypedName","src":"240:9:34","type":""},{"name":"dataEnd","nativeSrc":"251:7:34","nodeType":"YulTypedName","src":"251:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"263:6:34","nodeType":"YulTypedName","src":"263:6:34","type":""}],"src":"204:186:34"},{"body":{"nativeSrc":"490:92:34","nodeType":"YulBlock","src":"490:92:34","statements":[{"nativeSrc":"500:26:34","nodeType":"YulAssignment","src":"500:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"512:9:34","nodeType":"YulIdentifier","src":"512:9:34"},{"kind":"number","nativeSrc":"523:2:34","nodeType":"YulLiteral","src":"523:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"508:3:34","nodeType":"YulIdentifier","src":"508:3:34"},"nativeSrc":"508:18:34","nodeType":"YulFunctionCall","src":"508:18:34"},"variableNames":[{"name":"tail","nativeSrc":"500:4:34","nodeType":"YulIdentifier","src":"500:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"542:9:34","nodeType":"YulIdentifier","src":"542:9:34"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"567:6:34","nodeType":"YulIdentifier","src":"567:6:34"}],"functionName":{"name":"iszero","nativeSrc":"560:6:34","nodeType":"YulIdentifier","src":"560:6:34"},"nativeSrc":"560:14:34","nodeType":"YulFunctionCall","src":"560:14:34"}],"functionName":{"name":"iszero","nativeSrc":"553:6:34","nodeType":"YulIdentifier","src":"553:6:34"},"nativeSrc":"553:22:34","nodeType":"YulFunctionCall","src":"553:22:34"}],"functionName":{"name":"mstore","nativeSrc":"535:6:34","nodeType":"YulIdentifier","src":"535:6:34"},"nativeSrc":"535:41:34","nodeType":"YulFunctionCall","src":"535:41:34"},"nativeSrc":"535:41:34","nodeType":"YulExpressionStatement","src":"535:41:34"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"395:187:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"459:9:34","nodeType":"YulTypedName","src":"459:9:34","type":""},{"name":"value0","nativeSrc":"470:6:34","nodeType":"YulTypedName","src":"470:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"481:4:34","nodeType":"YulTypedName","src":"481:4:34","type":""}],"src":"395:187:34"},{"body":{"nativeSrc":"686:89:34","nodeType":"YulBlock","src":"686:89:34","statements":[{"nativeSrc":"696:26:34","nodeType":"YulAssignment","src":"696:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"708:9:34","nodeType":"YulIdentifier","src":"708:9:34"},{"kind":"number","nativeSrc":"719:2:34","nodeType":"YulLiteral","src":"719:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"704:3:34","nodeType":"YulIdentifier","src":"704:3:34"},"nativeSrc":"704:18:34","nodeType":"YulFunctionCall","src":"704:18:34"},"variableNames":[{"name":"tail","nativeSrc":"696:4:34","nodeType":"YulIdentifier","src":"696:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"738:9:34","nodeType":"YulIdentifier","src":"738:9:34"},{"arguments":[{"name":"value0","nativeSrc":"753:6:34","nodeType":"YulIdentifier","src":"753:6:34"},{"kind":"number","nativeSrc":"761:6:34","nodeType":"YulLiteral","src":"761:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"749:3:34","nodeType":"YulIdentifier","src":"749:3:34"},"nativeSrc":"749:19:34","nodeType":"YulFunctionCall","src":"749:19:34"}],"functionName":{"name":"mstore","nativeSrc":"731:6:34","nodeType":"YulIdentifier","src":"731:6:34"},"nativeSrc":"731:38:34","nodeType":"YulFunctionCall","src":"731:38:34"},"nativeSrc":"731:38:34","nodeType":"YulExpressionStatement","src":"731:38:34"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nativeSrc":"587:188:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"655:9:34","nodeType":"YulTypedName","src":"655:9:34","type":""},{"name":"value0","nativeSrc":"666:6:34","nodeType":"YulTypedName","src":"666:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"677:4:34","nodeType":"YulTypedName","src":"677:4:34","type":""}],"src":"587:188:34"},{"body":{"nativeSrc":"881:125:34","nodeType":"YulBlock","src":"881:125:34","statements":[{"nativeSrc":"891:26:34","nodeType":"YulAssignment","src":"891:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"903:9:34","nodeType":"YulIdentifier","src":"903:9:34"},{"kind":"number","nativeSrc":"914:2:34","nodeType":"YulLiteral","src":"914:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"899:3:34","nodeType":"YulIdentifier","src":"899:3:34"},"nativeSrc":"899:18:34","nodeType":"YulFunctionCall","src":"899:18:34"},"variableNames":[{"name":"tail","nativeSrc":"891:4:34","nodeType":"YulIdentifier","src":"891:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"933:9:34","nodeType":"YulIdentifier","src":"933:9:34"},{"arguments":[{"name":"value0","nativeSrc":"948:6:34","nodeType":"YulIdentifier","src":"948:6:34"},{"kind":"number","nativeSrc":"956:42:34","nodeType":"YulLiteral","src":"956:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"944:3:34","nodeType":"YulIdentifier","src":"944:3:34"},"nativeSrc":"944:55:34","nodeType":"YulFunctionCall","src":"944:55:34"}],"functionName":{"name":"mstore","nativeSrc":"926:6:34","nodeType":"YulIdentifier","src":"926:6:34"},"nativeSrc":"926:74:34","nodeType":"YulFunctionCall","src":"926:74:34"},"nativeSrc":"926:74:34","nodeType":"YulExpressionStatement","src":"926:74:34"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"780:226:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"850:9:34","nodeType":"YulTypedName","src":"850:9:34","type":""},{"name":"value0","nativeSrc":"861:6:34","nodeType":"YulTypedName","src":"861:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"872:4:34","nodeType":"YulTypedName","src":"872:4:34","type":""}],"src":"780:226:34"},{"body":{"nativeSrc":"1081:156:34","nodeType":"YulBlock","src":"1081:156:34","statements":[{"body":{"nativeSrc":"1127:16:34","nodeType":"YulBlock","src":"1127:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1136:1:34","nodeType":"YulLiteral","src":"1136:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1139:1:34","nodeType":"YulLiteral","src":"1139:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1129:6:34","nodeType":"YulIdentifier","src":"1129:6:34"},"nativeSrc":"1129:12:34","nodeType":"YulFunctionCall","src":"1129:12:34"},"nativeSrc":"1129:12:34","nodeType":"YulExpressionStatement","src":"1129:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1102:7:34","nodeType":"YulIdentifier","src":"1102:7:34"},{"name":"headStart","nativeSrc":"1111:9:34","nodeType":"YulIdentifier","src":"1111:9:34"}],"functionName":{"name":"sub","nativeSrc":"1098:3:34","nodeType":"YulIdentifier","src":"1098:3:34"},"nativeSrc":"1098:23:34","nodeType":"YulFunctionCall","src":"1098:23:34"},{"kind":"number","nativeSrc":"1123:2:34","nodeType":"YulLiteral","src":"1123:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1094:3:34","nodeType":"YulIdentifier","src":"1094:3:34"},"nativeSrc":"1094:32:34","nodeType":"YulFunctionCall","src":"1094:32:34"},"nativeSrc":"1091:52:34","nodeType":"YulIf","src":"1091:52:34"},{"nativeSrc":"1152:14:34","nodeType":"YulVariableDeclaration","src":"1152:14:34","value":{"kind":"number","nativeSrc":"1165:1:34","nodeType":"YulLiteral","src":"1165:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1156:5:34","nodeType":"YulTypedName","src":"1156:5:34","type":""}]},{"nativeSrc":"1175:32:34","nodeType":"YulAssignment","src":"1175:32:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1197:9:34","nodeType":"YulIdentifier","src":"1197:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"1184:12:34","nodeType":"YulIdentifier","src":"1184:12:34"},"nativeSrc":"1184:23:34","nodeType":"YulFunctionCall","src":"1184:23:34"},"variableNames":[{"name":"value","nativeSrc":"1175:5:34","nodeType":"YulIdentifier","src":"1175:5:34"}]},{"nativeSrc":"1216:15:34","nodeType":"YulAssignment","src":"1216:15:34","value":{"name":"value","nativeSrc":"1226:5:34","nodeType":"YulIdentifier","src":"1226:5:34"},"variableNames":[{"name":"value0","nativeSrc":"1216:6:34","nodeType":"YulIdentifier","src":"1216:6:34"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"1011:226:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1047:9:34","nodeType":"YulTypedName","src":"1047:9:34","type":""},{"name":"dataEnd","nativeSrc":"1058:7:34","nodeType":"YulTypedName","src":"1058:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1070:6:34","nodeType":"YulTypedName","src":"1070:6:34","type":""}],"src":"1011:226:34"},{"body":{"nativeSrc":"1329:213:34","nodeType":"YulBlock","src":"1329:213:34","statements":[{"body":{"nativeSrc":"1375:16:34","nodeType":"YulBlock","src":"1375:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1384:1:34","nodeType":"YulLiteral","src":"1384:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1387:1:34","nodeType":"YulLiteral","src":"1387:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1377:6:34","nodeType":"YulIdentifier","src":"1377:6:34"},"nativeSrc":"1377:12:34","nodeType":"YulFunctionCall","src":"1377:12:34"},"nativeSrc":"1377:12:34","nodeType":"YulExpressionStatement","src":"1377:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1350:7:34","nodeType":"YulIdentifier","src":"1350:7:34"},{"name":"headStart","nativeSrc":"1359:9:34","nodeType":"YulIdentifier","src":"1359:9:34"}],"functionName":{"name":"sub","nativeSrc":"1346:3:34","nodeType":"YulIdentifier","src":"1346:3:34"},"nativeSrc":"1346:23:34","nodeType":"YulFunctionCall","src":"1346:23:34"},{"kind":"number","nativeSrc":"1371:2:34","nodeType":"YulLiteral","src":"1371:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1342:3:34","nodeType":"YulIdentifier","src":"1342:3:34"},"nativeSrc":"1342:32:34","nodeType":"YulFunctionCall","src":"1342:32:34"},"nativeSrc":"1339:52:34","nodeType":"YulIf","src":"1339:52:34"},{"nativeSrc":"1400:39:34","nodeType":"YulAssignment","src":"1400:39:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1429:9:34","nodeType":"YulIdentifier","src":"1429:9:34"}],"functionName":{"name":"abi_decode_bytes20","nativeSrc":"1410:18:34","nodeType":"YulIdentifier","src":"1410:18:34"},"nativeSrc":"1410:29:34","nodeType":"YulFunctionCall","src":"1410:29:34"},"variableNames":[{"name":"value0","nativeSrc":"1400:6:34","nodeType":"YulIdentifier","src":"1400:6:34"}]},{"nativeSrc":"1448:14:34","nodeType":"YulVariableDeclaration","src":"1448:14:34","value":{"kind":"number","nativeSrc":"1461:1:34","nodeType":"YulLiteral","src":"1461:1:34","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1452:5:34","nodeType":"YulTypedName","src":"1452:5:34","type":""}]},{"nativeSrc":"1471:41:34","nodeType":"YulAssignment","src":"1471:41:34","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1497:9:34","nodeType":"YulIdentifier","src":"1497:9:34"},{"kind":"number","nativeSrc":"1508:2:34","nodeType":"YulLiteral","src":"1508:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1493:3:34","nodeType":"YulIdentifier","src":"1493:3:34"},"nativeSrc":"1493:18:34","nodeType":"YulFunctionCall","src":"1493:18:34"}],"functionName":{"name":"calldataload","nativeSrc":"1480:12:34","nodeType":"YulIdentifier","src":"1480:12:34"},"nativeSrc":"1480:32:34","nodeType":"YulFunctionCall","src":"1480:32:34"},"variableNames":[{"name":"value","nativeSrc":"1471:5:34","nodeType":"YulIdentifier","src":"1471:5:34"}]},{"nativeSrc":"1521:15:34","nodeType":"YulAssignment","src":"1521:15:34","value":{"name":"value","nativeSrc":"1531:5:34","nodeType":"YulIdentifier","src":"1531:5:34"},"variableNames":[{"name":"value1","nativeSrc":"1521:6:34","nodeType":"YulIdentifier","src":"1521:6:34"}]}]},"name":"abi_decode_tuple_t_bytes20t_bytes32","nativeSrc":"1242:300:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1287:9:34","nodeType":"YulTypedName","src":"1287:9:34","type":""},{"name":"dataEnd","nativeSrc":"1298:7:34","nodeType":"YulTypedName","src":"1298:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1310:6:34","nodeType":"YulTypedName","src":"1310:6:34","type":""},{"name":"value1","nativeSrc":"1318:6:34","nodeType":"YulTypedName","src":"1318:6:34","type":""}],"src":"1242:300:34"},{"body":{"nativeSrc":"1617:239:34","nodeType":"YulBlock","src":"1617:239:34","statements":[{"body":{"nativeSrc":"1663:16:34","nodeType":"YulBlock","src":"1663:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1672:1:34","nodeType":"YulLiteral","src":"1672:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1675:1:34","nodeType":"YulLiteral","src":"1675:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1665:6:34","nodeType":"YulIdentifier","src":"1665:6:34"},"nativeSrc":"1665:12:34","nodeType":"YulFunctionCall","src":"1665:12:34"},"nativeSrc":"1665:12:34","nodeType":"YulExpressionStatement","src":"1665:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1638:7:34","nodeType":"YulIdentifier","src":"1638:7:34"},{"name":"headStart","nativeSrc":"1647:9:34","nodeType":"YulIdentifier","src":"1647:9:34"}],"functionName":{"name":"sub","nativeSrc":"1634:3:34","nodeType":"YulIdentifier","src":"1634:3:34"},"nativeSrc":"1634:23:34","nodeType":"YulFunctionCall","src":"1634:23:34"},{"kind":"number","nativeSrc":"1659:2:34","nodeType":"YulLiteral","src":"1659:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1630:3:34","nodeType":"YulIdentifier","src":"1630:3:34"},"nativeSrc":"1630:32:34","nodeType":"YulFunctionCall","src":"1630:32:34"},"nativeSrc":"1627:52:34","nodeType":"YulIf","src":"1627:52:34"},{"nativeSrc":"1688:36:34","nodeType":"YulVariableDeclaration","src":"1688:36:34","value":{"arguments":[{"name":"headStart","nativeSrc":"1714:9:34","nodeType":"YulIdentifier","src":"1714:9:34"}],"functionName":{"name":"calldataload","nativeSrc":"1701:12:34","nodeType":"YulIdentifier","src":"1701:12:34"},"nativeSrc":"1701:23:34","nodeType":"YulFunctionCall","src":"1701:23:34"},"variables":[{"name":"value","nativeSrc":"1692:5:34","nodeType":"YulTypedName","src":"1692:5:34","type":""}]},{"body":{"nativeSrc":"1810:16:34","nodeType":"YulBlock","src":"1810:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1819:1:34","nodeType":"YulLiteral","src":"1819:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"1822:1:34","nodeType":"YulLiteral","src":"1822:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1812:6:34","nodeType":"YulIdentifier","src":"1812:6:34"},"nativeSrc":"1812:12:34","nodeType":"YulFunctionCall","src":"1812:12:34"},"nativeSrc":"1812:12:34","nodeType":"YulExpressionStatement","src":"1812:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1746:5:34","nodeType":"YulIdentifier","src":"1746:5:34"},{"arguments":[{"name":"value","nativeSrc":"1757:5:34","nodeType":"YulIdentifier","src":"1757:5:34"},{"kind":"number","nativeSrc":"1764:42:34","nodeType":"YulLiteral","src":"1764:42:34","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1753:3:34","nodeType":"YulIdentifier","src":"1753:3:34"},"nativeSrc":"1753:54:34","nodeType":"YulFunctionCall","src":"1753:54:34"}],"functionName":{"name":"eq","nativeSrc":"1743:2:34","nodeType":"YulIdentifier","src":"1743:2:34"},"nativeSrc":"1743:65:34","nodeType":"YulFunctionCall","src":"1743:65:34"}],"functionName":{"name":"iszero","nativeSrc":"1736:6:34","nodeType":"YulIdentifier","src":"1736:6:34"},"nativeSrc":"1736:73:34","nodeType":"YulFunctionCall","src":"1736:73:34"},"nativeSrc":"1733:93:34","nodeType":"YulIf","src":"1733:93:34"},{"nativeSrc":"1835:15:34","nodeType":"YulAssignment","src":"1835:15:34","value":{"name":"value","nativeSrc":"1845:5:34","nodeType":"YulIdentifier","src":"1845:5:34"},"variableNames":[{"name":"value0","nativeSrc":"1835:6:34","nodeType":"YulIdentifier","src":"1835:6:34"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1547:309:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1583:9:34","nodeType":"YulTypedName","src":"1583:9:34","type":""},{"name":"dataEnd","nativeSrc":"1594:7:34","nodeType":"YulTypedName","src":"1594:7:34","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1606:6:34","nodeType":"YulTypedName","src":"1606:6:34","type":""}],"src":"1547:309:34"},{"body":{"nativeSrc":"2035:165:34","nodeType":"YulBlock","src":"2035:165:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2052:9:34","nodeType":"YulIdentifier","src":"2052:9:34"},{"kind":"number","nativeSrc":"2063:2:34","nodeType":"YulLiteral","src":"2063:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"2045:6:34","nodeType":"YulIdentifier","src":"2045:6:34"},"nativeSrc":"2045:21:34","nodeType":"YulFunctionCall","src":"2045:21:34"},"nativeSrc":"2045:21:34","nodeType":"YulExpressionStatement","src":"2045:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2086:9:34","nodeType":"YulIdentifier","src":"2086:9:34"},{"kind":"number","nativeSrc":"2097:2:34","nodeType":"YulLiteral","src":"2097:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2082:3:34","nodeType":"YulIdentifier","src":"2082:3:34"},"nativeSrc":"2082:18:34","nodeType":"YulFunctionCall","src":"2082:18:34"},{"kind":"number","nativeSrc":"2102:2:34","nodeType":"YulLiteral","src":"2102:2:34","type":"","value":"15"}],"functionName":{"name":"mstore","nativeSrc":"2075:6:34","nodeType":"YulIdentifier","src":"2075:6:34"},"nativeSrc":"2075:30:34","nodeType":"YulFunctionCall","src":"2075:30:34"},"nativeSrc":"2075:30:34","nodeType":"YulExpressionStatement","src":"2075:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2125:9:34","nodeType":"YulIdentifier","src":"2125:9:34"},{"kind":"number","nativeSrc":"2136:2:34","nodeType":"YulLiteral","src":"2136:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2121:3:34","nodeType":"YulIdentifier","src":"2121:3:34"},"nativeSrc":"2121:18:34","nodeType":"YulFunctionCall","src":"2121:18:34"},{"hexValue":"766f746572206e6f7420666f756e64","kind":"string","nativeSrc":"2141:17:34","nodeType":"YulLiteral","src":"2141:17:34","type":"","value":"voter not found"}],"functionName":{"name":"mstore","nativeSrc":"2114:6:34","nodeType":"YulIdentifier","src":"2114:6:34"},"nativeSrc":"2114:45:34","nodeType":"YulFunctionCall","src":"2114:45:34"},"nativeSrc":"2114:45:34","nodeType":"YulExpressionStatement","src":"2114:45:34"},{"nativeSrc":"2168:26:34","nodeType":"YulAssignment","src":"2168:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"2180:9:34","nodeType":"YulIdentifier","src":"2180:9:34"},{"kind":"number","nativeSrc":"2191:2:34","nodeType":"YulLiteral","src":"2191:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2176:3:34","nodeType":"YulIdentifier","src":"2176:3:34"},"nativeSrc":"2176:18:34","nodeType":"YulFunctionCall","src":"2176:18:34"},"variableNames":[{"name":"tail","nativeSrc":"2168:4:34","nodeType":"YulIdentifier","src":"2168:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_873560222dc0f92eaf969bc27b1332bf2531ba58759b0850a597bdf9e9e44f21__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1861:339:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2012:9:34","nodeType":"YulTypedName","src":"2012:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2026:4:34","nodeType":"YulTypedName","src":"2026:4:34","type":""}],"src":"1861:339:34"},{"body":{"nativeSrc":"2379:164:34","nodeType":"YulBlock","src":"2379:164:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2396:9:34","nodeType":"YulIdentifier","src":"2396:9:34"},{"kind":"number","nativeSrc":"2407:2:34","nodeType":"YulLiteral","src":"2407:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"2389:6:34","nodeType":"YulIdentifier","src":"2389:6:34"},"nativeSrc":"2389:21:34","nodeType":"YulFunctionCall","src":"2389:21:34"},"nativeSrc":"2389:21:34","nodeType":"YulExpressionStatement","src":"2389:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2430:9:34","nodeType":"YulIdentifier","src":"2430:9:34"},{"kind":"number","nativeSrc":"2441:2:34","nodeType":"YulLiteral","src":"2441:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2426:3:34","nodeType":"YulIdentifier","src":"2426:3:34"},"nativeSrc":"2426:18:34","nodeType":"YulFunctionCall","src":"2426:18:34"},{"kind":"number","nativeSrc":"2446:2:34","nodeType":"YulLiteral","src":"2446:2:34","type":"","value":"14"}],"functionName":{"name":"mstore","nativeSrc":"2419:6:34","nodeType":"YulIdentifier","src":"2419:6:34"},"nativeSrc":"2419:30:34","nodeType":"YulFunctionCall","src":"2419:30:34"},"nativeSrc":"2419:30:34","nodeType":"YulExpressionStatement","src":"2419:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2469:9:34","nodeType":"YulIdentifier","src":"2469:9:34"},{"kind":"number","nativeSrc":"2480:2:34","nodeType":"YulLiteral","src":"2480:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2465:3:34","nodeType":"YulIdentifier","src":"2465:3:34"},"nativeSrc":"2465:18:34","nodeType":"YulFunctionCall","src":"2465:18:34"},{"hexValue":"746f6f2066657720766f74657273","kind":"string","nativeSrc":"2485:16:34","nodeType":"YulLiteral","src":"2485:16:34","type":"","value":"too few voters"}],"functionName":{"name":"mstore","nativeSrc":"2458:6:34","nodeType":"YulIdentifier","src":"2458:6:34"},"nativeSrc":"2458:44:34","nodeType":"YulFunctionCall","src":"2458:44:34"},"nativeSrc":"2458:44:34","nodeType":"YulExpressionStatement","src":"2458:44:34"},{"nativeSrc":"2511:26:34","nodeType":"YulAssignment","src":"2511:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"2523:9:34","nodeType":"YulIdentifier","src":"2523:9:34"},{"kind":"number","nativeSrc":"2534:2:34","nodeType":"YulLiteral","src":"2534:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2519:3:34","nodeType":"YulIdentifier","src":"2519:3:34"},"nativeSrc":"2519:18:34","nodeType":"YulFunctionCall","src":"2519:18:34"},"variableNames":[{"name":"tail","nativeSrc":"2511:4:34","nodeType":"YulIdentifier","src":"2511:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_6aaee0322235e78e47597728e9235efb307ea6e350eef5561421443a33e1250d__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2205:338:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2356:9:34","nodeType":"YulTypedName","src":"2356:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2370:4:34","nodeType":"YulTypedName","src":"2370:4:34","type":""}],"src":"2205:338:34"},{"body":{"nativeSrc":"2580:95:34","nodeType":"YulBlock","src":"2580:95:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2597:1:34","nodeType":"YulLiteral","src":"2597:1:34","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2604:3:34","nodeType":"YulLiteral","src":"2604:3:34","type":"","value":"224"},{"kind":"number","nativeSrc":"2609:10:34","nodeType":"YulLiteral","src":"2609:10:34","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2600:3:34","nodeType":"YulIdentifier","src":"2600:3:34"},"nativeSrc":"2600:20:34","nodeType":"YulFunctionCall","src":"2600:20:34"}],"functionName":{"name":"mstore","nativeSrc":"2590:6:34","nodeType":"YulIdentifier","src":"2590:6:34"},"nativeSrc":"2590:31:34","nodeType":"YulFunctionCall","src":"2590:31:34"},"nativeSrc":"2590:31:34","nodeType":"YulExpressionStatement","src":"2590:31:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2637:1:34","nodeType":"YulLiteral","src":"2637:1:34","type":"","value":"4"},{"kind":"number","nativeSrc":"2640:4:34","nodeType":"YulLiteral","src":"2640:4:34","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"2630:6:34","nodeType":"YulIdentifier","src":"2630:6:34"},"nativeSrc":"2630:15:34","nodeType":"YulFunctionCall","src":"2630:15:34"},"nativeSrc":"2630:15:34","nodeType":"YulExpressionStatement","src":"2630:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2661:1:34","nodeType":"YulLiteral","src":"2661:1:34","type":"","value":"0"},{"kind":"number","nativeSrc":"2664:4:34","nodeType":"YulLiteral","src":"2664:4:34","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2654:6:34","nodeType":"YulIdentifier","src":"2654:6:34"},"nativeSrc":"2654:15:34","nodeType":"YulFunctionCall","src":"2654:15:34"},"nativeSrc":"2654:15:34","nodeType":"YulExpressionStatement","src":"2654:15:34"}]},"name":"panic_error_0x11","nativeSrc":"2548:127:34","nodeType":"YulFunctionDefinition","src":"2548:127:34"},{"body":{"nativeSrc":"2726:135:34","nodeType":"YulBlock","src":"2726:135:34","statements":[{"nativeSrc":"2736:33:34","nodeType":"YulVariableDeclaration","src":"2736:33:34","value":{"arguments":[{"name":"value","nativeSrc":"2755:5:34","nodeType":"YulIdentifier","src":"2755:5:34"},{"kind":"number","nativeSrc":"2762:6:34","nodeType":"YulLiteral","src":"2762:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"2751:3:34","nodeType":"YulIdentifier","src":"2751:3:34"},"nativeSrc":"2751:18:34","nodeType":"YulFunctionCall","src":"2751:18:34"},"variables":[{"name":"value_1","nativeSrc":"2740:7:34","nodeType":"YulTypedName","src":"2740:7:34","type":""}]},{"body":{"nativeSrc":"2797:22:34","nodeType":"YulBlock","src":"2797:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"2799:16:34","nodeType":"YulIdentifier","src":"2799:16:34"},"nativeSrc":"2799:18:34","nodeType":"YulFunctionCall","src":"2799:18:34"},"nativeSrc":"2799:18:34","nodeType":"YulExpressionStatement","src":"2799:18:34"}]},"condition":{"arguments":[{"name":"value_1","nativeSrc":"2788:7:34","nodeType":"YulIdentifier","src":"2788:7:34"}],"functionName":{"name":"iszero","nativeSrc":"2781:6:34","nodeType":"YulIdentifier","src":"2781:6:34"},"nativeSrc":"2781:15:34","nodeType":"YulFunctionCall","src":"2781:15:34"},"nativeSrc":"2778:41:34","nodeType":"YulIf","src":"2778:41:34"},{"nativeSrc":"2828:27:34","nodeType":"YulAssignment","src":"2828:27:34","value":{"arguments":[{"name":"value_1","nativeSrc":"2839:7:34","nodeType":"YulIdentifier","src":"2839:7:34"},{"arguments":[{"kind":"number","nativeSrc":"2852:1:34","nodeType":"YulLiteral","src":"2852:1:34","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2848:3:34","nodeType":"YulIdentifier","src":"2848:3:34"},"nativeSrc":"2848:6:34","nodeType":"YulFunctionCall","src":"2848:6:34"}],"functionName":{"name":"add","nativeSrc":"2835:3:34","nodeType":"YulIdentifier","src":"2835:3:34"},"nativeSrc":"2835:20:34","nodeType":"YulFunctionCall","src":"2835:20:34"},"variableNames":[{"name":"ret","nativeSrc":"2828:3:34","nodeType":"YulIdentifier","src":"2828:3:34"}]}]},"name":"decrement_t_uint16","nativeSrc":"2680:181:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2708:5:34","nodeType":"YulTypedName","src":"2708:5:34","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"2718:3:34","nodeType":"YulTypedName","src":"2718:3:34","type":""}],"src":"2680:181:34"},{"body":{"nativeSrc":"3040:164:34","nodeType":"YulBlock","src":"3040:164:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3057:9:34","nodeType":"YulIdentifier","src":"3057:9:34"},{"kind":"number","nativeSrc":"3068:2:34","nodeType":"YulLiteral","src":"3068:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3050:6:34","nodeType":"YulIdentifier","src":"3050:6:34"},"nativeSrc":"3050:21:34","nodeType":"YulFunctionCall","src":"3050:21:34"},"nativeSrc":"3050:21:34","nodeType":"YulExpressionStatement","src":"3050:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3091:9:34","nodeType":"YulIdentifier","src":"3091:9:34"},{"kind":"number","nativeSrc":"3102:2:34","nodeType":"YulLiteral","src":"3102:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3087:3:34","nodeType":"YulIdentifier","src":"3087:3:34"},"nativeSrc":"3087:18:34","nodeType":"YulFunctionCall","src":"3087:18:34"},{"kind":"number","nativeSrc":"3107:2:34","nodeType":"YulLiteral","src":"3107:2:34","type":"","value":"14"}],"functionName":{"name":"mstore","nativeSrc":"3080:6:34","nodeType":"YulIdentifier","src":"3080:6:34"},"nativeSrc":"3080:30:34","nodeType":"YulFunctionCall","src":"3080:30:34"},"nativeSrc":"3080:30:34","nodeType":"YulExpressionStatement","src":"3080:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3130:9:34","nodeType":"YulIdentifier","src":"3130:9:34"},{"kind":"number","nativeSrc":"3141:2:34","nodeType":"YulLiteral","src":"3141:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3126:3:34","nodeType":"YulIdentifier","src":"3126:3:34"},"nativeSrc":"3126:18:34","nodeType":"YulFunctionCall","src":"3126:18:34"},{"hexValue":"6475706c696361746564206b6579","kind":"string","nativeSrc":"3146:16:34","nodeType":"YulLiteral","src":"3146:16:34","type":"","value":"duplicated key"}],"functionName":{"name":"mstore","nativeSrc":"3119:6:34","nodeType":"YulIdentifier","src":"3119:6:34"},"nativeSrc":"3119:44:34","nodeType":"YulFunctionCall","src":"3119:44:34"},"nativeSrc":"3119:44:34","nodeType":"YulExpressionStatement","src":"3119:44:34"},{"nativeSrc":"3172:26:34","nodeType":"YulAssignment","src":"3172:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"3184:9:34","nodeType":"YulIdentifier","src":"3184:9:34"},{"kind":"number","nativeSrc":"3195:2:34","nodeType":"YulLiteral","src":"3195:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3180:3:34","nodeType":"YulIdentifier","src":"3180:3:34"},"nativeSrc":"3180:18:34","nodeType":"YulFunctionCall","src":"3180:18:34"},"variableNames":[{"name":"tail","nativeSrc":"3172:4:34","nodeType":"YulIdentifier","src":"3172:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_17a7a094bed714d7a976817e1b97c661b5df5369664dcb0b5bf265f97b5fb68e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2866:338:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3017:9:34","nodeType":"YulTypedName","src":"3017:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3031:4:34","nodeType":"YulTypedName","src":"3031:4:34","type":""}],"src":"2866:338:34"},{"body":{"nativeSrc":"3383:166:34","nodeType":"YulBlock","src":"3383:166:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3400:9:34","nodeType":"YulIdentifier","src":"3400:9:34"},{"kind":"number","nativeSrc":"3411:2:34","nodeType":"YulLiteral","src":"3411:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3393:6:34","nodeType":"YulIdentifier","src":"3393:6:34"},"nativeSrc":"3393:21:34","nodeType":"YulFunctionCall","src":"3393:21:34"},"nativeSrc":"3393:21:34","nodeType":"YulExpressionStatement","src":"3393:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3434:9:34","nodeType":"YulIdentifier","src":"3434:9:34"},{"kind":"number","nativeSrc":"3445:2:34","nodeType":"YulLiteral","src":"3445:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3430:3:34","nodeType":"YulIdentifier","src":"3430:3:34"},"nativeSrc":"3430:18:34","nodeType":"YulFunctionCall","src":"3430:18:34"},{"kind":"number","nativeSrc":"3450:2:34","nodeType":"YulLiteral","src":"3450:2:34","type":"","value":"16"}],"functionName":{"name":"mstore","nativeSrc":"3423:6:34","nodeType":"YulIdentifier","src":"3423:6:34"},"nativeSrc":"3423:30:34","nodeType":"YulFunctionCall","src":"3423:30:34"},"nativeSrc":"3423:30:34","nodeType":"YulExpressionStatement","src":"3423:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3473:9:34","nodeType":"YulIdentifier","src":"3473:9:34"},{"kind":"number","nativeSrc":"3484:2:34","nodeType":"YulLiteral","src":"3484:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3469:3:34","nodeType":"YulIdentifier","src":"3469:3:34"},"nativeSrc":"3469:18:34","nodeType":"YulFunctionCall","src":"3469:18:34"},{"hexValue":"6475706c69636174656420766f746572","kind":"string","nativeSrc":"3489:18:34","nodeType":"YulLiteral","src":"3489:18:34","type":"","value":"duplicated voter"}],"functionName":{"name":"mstore","nativeSrc":"3462:6:34","nodeType":"YulIdentifier","src":"3462:6:34"},"nativeSrc":"3462:46:34","nodeType":"YulFunctionCall","src":"3462:46:34"},"nativeSrc":"3462:46:34","nodeType":"YulExpressionStatement","src":"3462:46:34"},{"nativeSrc":"3517:26:34","nodeType":"YulAssignment","src":"3517:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"3529:9:34","nodeType":"YulIdentifier","src":"3529:9:34"},{"kind":"number","nativeSrc":"3540:2:34","nodeType":"YulLiteral","src":"3540:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3525:3:34","nodeType":"YulIdentifier","src":"3525:3:34"},"nativeSrc":"3525:18:34","nodeType":"YulFunctionCall","src":"3525:18:34"},"variableNames":[{"name":"tail","nativeSrc":"3517:4:34","nodeType":"YulIdentifier","src":"3517:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_62ed58227f24629179b3471ceab593c7808e28a9de10d196f617d0016115a7b5__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3209:340:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3360:9:34","nodeType":"YulTypedName","src":"3360:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3374:4:34","nodeType":"YulTypedName","src":"3374:4:34","type":""}],"src":"3209:340:34"},{"body":{"nativeSrc":"3600:134:34","nodeType":"YulBlock","src":"3600:134:34","statements":[{"nativeSrc":"3610:33:34","nodeType":"YulVariableDeclaration","src":"3610:33:34","value":{"arguments":[{"name":"value","nativeSrc":"3629:5:34","nodeType":"YulIdentifier","src":"3629:5:34"},{"kind":"number","nativeSrc":"3636:6:34","nodeType":"YulLiteral","src":"3636:6:34","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3625:3:34","nodeType":"YulIdentifier","src":"3625:3:34"},"nativeSrc":"3625:18:34","nodeType":"YulFunctionCall","src":"3625:18:34"},"variables":[{"name":"value_1","nativeSrc":"3614:7:34","nodeType":"YulTypedName","src":"3614:7:34","type":""}]},{"body":{"nativeSrc":"3675:22:34","nodeType":"YulBlock","src":"3675:22:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"3677:16:34","nodeType":"YulIdentifier","src":"3677:16:34"},"nativeSrc":"3677:18:34","nodeType":"YulFunctionCall","src":"3677:18:34"},"nativeSrc":"3677:18:34","nodeType":"YulExpressionStatement","src":"3677:18:34"}]},"condition":{"arguments":[{"name":"value_1","nativeSrc":"3658:7:34","nodeType":"YulIdentifier","src":"3658:7:34"},{"kind":"number","nativeSrc":"3667:6:34","nodeType":"YulLiteral","src":"3667:6:34","type":"","value":"0xffff"}],"functionName":{"name":"eq","nativeSrc":"3655:2:34","nodeType":"YulIdentifier","src":"3655:2:34"},"nativeSrc":"3655:19:34","nodeType":"YulFunctionCall","src":"3655:19:34"},"nativeSrc":"3652:45:34","nodeType":"YulIf","src":"3652:45:34"},{"nativeSrc":"3706:22:34","nodeType":"YulAssignment","src":"3706:22:34","value":{"arguments":[{"name":"value_1","nativeSrc":"3717:7:34","nodeType":"YulIdentifier","src":"3717:7:34"},{"kind":"number","nativeSrc":"3726:1:34","nodeType":"YulLiteral","src":"3726:1:34","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3713:3:34","nodeType":"YulIdentifier","src":"3713:3:34"},"nativeSrc":"3713:15:34","nodeType":"YulFunctionCall","src":"3713:15:34"},"variableNames":[{"name":"ret","nativeSrc":"3706:3:34","nodeType":"YulIdentifier","src":"3706:3:34"}]}]},"name":"increment_t_uint16","nativeSrc":"3554:180:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3582:5:34","nodeType":"YulTypedName","src":"3582:5:34","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"3592:3:34","nodeType":"YulTypedName","src":"3592:3:34","type":""}],"src":"3554:180:34"},{"body":{"nativeSrc":"3913:165:34","nodeType":"YulBlock","src":"3913:165:34","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3930:9:34","nodeType":"YulIdentifier","src":"3930:9:34"},{"kind":"number","nativeSrc":"3941:2:34","nodeType":"YulLiteral","src":"3941:2:34","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3923:6:34","nodeType":"YulIdentifier","src":"3923:6:34"},"nativeSrc":"3923:21:34","nodeType":"YulFunctionCall","src":"3923:21:34"},"nativeSrc":"3923:21:34","nodeType":"YulExpressionStatement","src":"3923:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3964:9:34","nodeType":"YulIdentifier","src":"3964:9:34"},{"kind":"number","nativeSrc":"3975:2:34","nodeType":"YulLiteral","src":"3975:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3960:3:34","nodeType":"YulIdentifier","src":"3960:3:34"},"nativeSrc":"3960:18:34","nodeType":"YulFunctionCall","src":"3960:18:34"},{"kind":"number","nativeSrc":"3980:2:34","nodeType":"YulLiteral","src":"3980:2:34","type":"","value":"15"}],"functionName":{"name":"mstore","nativeSrc":"3953:6:34","nodeType":"YulIdentifier","src":"3953:6:34"},"nativeSrc":"3953:30:34","nodeType":"YulFunctionCall","src":"3953:30:34"},"nativeSrc":"3953:30:34","nodeType":"YulExpressionStatement","src":"3953:30:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4003:9:34","nodeType":"YulIdentifier","src":"4003:9:34"},{"kind":"number","nativeSrc":"4014:2:34","nodeType":"YulLiteral","src":"4014:2:34","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3999:3:34","nodeType":"YulIdentifier","src":"3999:3:34"},"nativeSrc":"3999:18:34","nodeType":"YulFunctionCall","src":"3999:18:34"},{"hexValue":"746f6f206d616e7920766f74657273","kind":"string","nativeSrc":"4019:17:34","nodeType":"YulLiteral","src":"4019:17:34","type":"","value":"too many voters"}],"functionName":{"name":"mstore","nativeSrc":"3992:6:34","nodeType":"YulIdentifier","src":"3992:6:34"},"nativeSrc":"3992:45:34","nodeType":"YulFunctionCall","src":"3992:45:34"},"nativeSrc":"3992:45:34","nodeType":"YulExpressionStatement","src":"3992:45:34"},{"nativeSrc":"4046:26:34","nodeType":"YulAssignment","src":"4046:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"4058:9:34","nodeType":"YulIdentifier","src":"4058:9:34"},{"kind":"number","nativeSrc":"4069:2:34","nodeType":"YulLiteral","src":"4069:2:34","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4054:3:34","nodeType":"YulIdentifier","src":"4054:3:34"},"nativeSrc":"4054:18:34","nodeType":"YulFunctionCall","src":"4054:18:34"},"variableNames":[{"name":"tail","nativeSrc":"4046:4:34","nodeType":"YulIdentifier","src":"4046:4:34"}]}]},"name":"abi_encode_tuple_t_stringliteral_d1bc205a3fff4970024dfd61b2e1808a01cf394784bb003e93b2acdacd5c6869__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3739:339:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3890:9:34","nodeType":"YulTypedName","src":"3890:9:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3904:4:34","nodeType":"YulTypedName","src":"3904:4:34","type":""}],"src":"3739:339:34"},{"body":{"nativeSrc":"4184:76:34","nodeType":"YulBlock","src":"4184:76:34","statements":[{"nativeSrc":"4194:26:34","nodeType":"YulAssignment","src":"4194:26:34","value":{"arguments":[{"name":"headStart","nativeSrc":"4206:9:34","nodeType":"YulIdentifier","src":"4206:9:34"},{"kind":"number","nativeSrc":"4217:2:34","nodeType":"YulLiteral","src":"4217:2:34","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4202:3:34","nodeType":"YulIdentifier","src":"4202:3:34"},"nativeSrc":"4202:18:34","nodeType":"YulFunctionCall","src":"4202:18:34"},"variableNames":[{"name":"tail","nativeSrc":"4194:4:34","nodeType":"YulIdentifier","src":"4194:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4236:9:34","nodeType":"YulIdentifier","src":"4236:9:34"},{"name":"value0","nativeSrc":"4247:6:34","nodeType":"YulIdentifier","src":"4247:6:34"}],"functionName":{"name":"mstore","nativeSrc":"4229:6:34","nodeType":"YulIdentifier","src":"4229:6:34"},"nativeSrc":"4229:25:34","nodeType":"YulFunctionCall","src":"4229:25:34"},"nativeSrc":"4229:25:34","nodeType":"YulExpressionStatement","src":"4229:25:34"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"4083:177:34","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4153:9:34","nodeType":"YulTypedName","src":"4153:9:34","type":""},{"name":"value0","nativeSrc":"4164:6:34","nodeType":"YulTypedName","src":"4164:6:34","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4175:4:34","nodeType":"YulTypedName","src":"4175:4:34","type":""}],"src":"4083:177:34"}]},"contents":"{\n    { }\n    function abi_decode_bytes20(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, not(0xffffffffffffffffffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes20(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bytes20(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes20t_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_bytes20(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_873560222dc0f92eaf969bc27b1332bf2531ba58759b0850a597bdf9e9e44f21__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"voter not found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6aaee0322235e78e47597728e9235efb307ea6e350eef5561421443a33e1250d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"too few voters\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint16(value) -> ret\n    {\n        let value_1 := and(value, 0xffff)\n        if iszero(value_1) { panic_error_0x11() }\n        ret := add(value_1, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_17a7a094bed714d7a976817e1b97c661b5df5369664dcb0b5bf265f97b5fb68e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"duplicated key\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_62ed58227f24629179b3471ceab593c7808e28a9de10d196f617d0016115a7b5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"duplicated voter\")\n        tail := add(headStart, 96)\n    }\n    function increment_t_uint16(value) -> ret\n    {\n        let value_1 := and(value, 0xffff)\n        if eq(value_1, 0xffff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_d1bc205a3fff4970024dfd61b2e1808a01cf394784bb003e93b2acdacd5c6869__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"too many voters\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561000f575f80fd5b506004361061009f575f3560e01c8063827fb8111161007257806398611f121161005857806398611f1214610141578063d782d4f714610163578063f2fde38b14610176575f80fd5b8063827fb8111461011e5780638da5cb5b14610127575f80fd5b80631a41e890146100a35780632ddbd13a146100da5780636b75a2b314610101578063715018a614610116575b5f80fd5b6100c56100b13660046105cf565b60026020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b5f546100ee90600160a01b900461ffff1681565b60405161ffff90911681526020016100d1565b61011461010f3660046105cf565b610189565b005b6101146102f8565b6100ee61010081565b5f546040516001600160a01b0390911681526020016100d1565b6100c561014f3660046105ef565b60016020525f908152604090205460ff1681565b610114610171366004610606565b61030b565b61011461018436600461062e565b6104de565b61019161051b565b6bffffffffffffffffffffffff1981165f9081526002602052604090205460ff166102035760405162461bcd60e51b815260206004820152600f60248201527f766f746572206e6f7420666f756e64000000000000000000000000000000000060448201526064015b60405180910390fd5b5f546001600160a01b90910461ffff16116102605760405162461bcd60e51b815260206004820152600e60248201527f746f6f2066657720766f7465727300000000000000000000000000000000000060448201526064016101fa565b6bffffffffffffffffffffffff1981165f908152600260205260408120805460ff191690558054600160a01b900461ffff1690601461029e83610668565b91906101000a81548161ffff021916908361ffff16021790555050806bffffffffffffffffffffffff19167fa4d0070f0847ad2444266e520aecd08cc31d75b1f1facc657f007083f985777860405160405180910390a250565b61030061051b565b6103095f610547565b565b61031361051b565b5f8181526001602052604090205460ff16156103715760405162461bcd60e51b815260206004820152600e60248201527f6475706c696361746564206b657900000000000000000000000000000000000060448201526064016101fa565b6bffffffffffffffffffffffff1982165f9081526002602052604090205460ff16156103df5760405162461bcd60e51b815260206004820152601060248201527f6475706c69636174656420766f7465720000000000000000000000000000000060448201526064016101fa565b5f805461010091906014906103fe90600160a01b900461ffff16610684565b91906101000a81548161ffff021916908361ffff160217905561ffff16106104685760405162461bcd60e51b815260206004820152600f60248201527f746f6f206d616e7920766f74657273000000000000000000000000000000000060448201526064016101fa565b6bffffffffffffffffffffffff1982165f8181526002602090815260408083208054600160ff1991821681179092558685528184529382902080549094161790925590518381527f2940969868a5545331aa91a95aaa97def154a66f4ed34985622a4136be3b1b04910160405180910390a25050565b6104e661051b565b6001600160a01b03811661050f57604051631e4fbdf760e01b81525f60048201526024016101fa565b61051881610547565b50565b5f546001600160a01b031633146103095760405163118cdaa760e01b81523360048201526024016101fa565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356bffffffffffffffffffffffff19811681146105ca575f80fd5b919050565b5f602082840312156105df575f80fd5b6105e8826105ae565b9392505050565b5f602082840312156105ff575f80fd5b5035919050565b5f8060408385031215610617575f80fd5b610620836105ae565b946020939093013593505050565b5f6020828403121561063e575f80fd5b81356001600160a01b03811681146105e8575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f61ffff82168061067b5761067b610654565b5f190192915050565b5f61ffff821661ffff810361069b5761069b610654565b6001019291505056fea164736f6c634300081a000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x827FB811 GT PUSH2 0x72 JUMPI DUP1 PUSH4 0x98611F12 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x98611F12 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0xD782D4F7 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x176 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x827FB811 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x127 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1A41E890 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x2DDBD13A EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x6B75A2B3 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x116 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xC5 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5CF JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 SLOAD PUSH2 0xEE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x114 PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0xEE PUSH2 0x100 DUP2 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x171 CALLDATASIZE PUSH1 0x4 PUSH2 0x606 JUMP JUMPDEST PUSH2 0x30B JUMP JUMPDEST PUSH2 0x114 PUSH2 0x184 CALLDATASIZE PUSH1 0x4 PUSH2 0x62E JUMP JUMPDEST PUSH2 0x4DE JUMP JUMPDEST PUSH2 0x191 PUSH2 0x51B JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x203 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x766F746572206E6F7420666F756E640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH2 0xFFFF AND GT PUSH2 0x260 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6F2066657720766F74657273000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND SWAP1 PUSH1 0x14 PUSH2 0x29E DUP4 PUSH2 0x668 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH32 0xA4D0070F0847AD2444266E520AECD08CC31D75B1F1FACC657F007083F9857778 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x300 PUSH2 0x51B JUMP JUMPDEST PUSH2 0x309 PUSH0 PUSH2 0x547 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x313 PUSH2 0x51B JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x371 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6475706C696361746564206B6579000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6475706C69636174656420766F74657200000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH1 0x14 SWAP1 PUSH2 0x3FE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x684 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE PUSH2 0xFFFF AND LT PUSH2 0x468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6F206D616E7920766F746572730000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE DUP7 DUP6 MSTORE DUP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP5 AND OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP4 DUP2 MSTORE PUSH32 0x2940969868A5545331AA91A95AAA97DEF154A66F4ED34985622A4136BE3B1B04 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x4E6 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x50F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x518 DUP2 PUSH2 0x547 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1FA JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND DUP2 EQ PUSH2 0x5CA JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5DF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x5E8 DUP3 PUSH2 0x5AE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5FF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x617 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x620 DUP4 PUSH2 0x5AE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x63E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E8 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND DUP1 PUSH2 0x67B JUMPI PUSH2 0x67B PUSH2 0x654 JUMP JUMPDEST PUSH0 NOT ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND PUSH2 0xFFFF DUP2 SUB PUSH2 0x69B JUMPI PUSH2 0x69B PUSH2 0x654 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP ","sourceMap":"203:1841:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;458:51;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;560:14:34;;553:22;535:41;;523:2;508:18;458:51:33;;;;;;;;376:19;;;;;-1:-1:-1;;;376:19:33;;;;;;;;;761:6:34;749:19;;;731:38;;719:2;704:18;376:19:33;587:188:34;1734:308:33;;;;;;:::i;:::-;;:::i;:::-;;2293:101:0;;;:::i;325:44:33:-;;366:3;325:44;;1638:85:0;1684:7;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:0;;;926:74:34;;914:2;899:18;1638:85:0;780:226:34;401:51:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1194:343;;;;;;:::i;:::-;;:::i;2543:215:0:-;;;;;;:::i;:::-;;:::i;1734:308:33:-;1531:13:0;:11;:13::i;:::-;-1:-1:-1;;1807:13:33;::::1;;::::0;;;:6:::1;:13;::::0;;;;;::::1;;1799:41;;;::::0;-1:-1:-1;;;1799:41:33;;2063:2:34;1799:41:33::1;::::0;::::1;2045:21:34::0;2102:2;2082:18;;;2075:30;2141:17;2121:18;;;2114:45;2176:18;;1799:41:33::1;;;;;;;;;1858:5;::::0;1866:1:::1;-1:-1:-1::0;;;1858:5:33;;::::1;;;:9;1850:36;;;::::0;-1:-1:-1;;;1850:36:33;;2407:2:34;1850:36:33::1;::::0;::::1;2389:21:34::0;2446:2;2426:18;;;2419:30;2485:16;2465:18;;;2458:44;2519:18;;1850:36:33::1;2205:338:34::0;1850:36:33::1;-1:-1:-1::0;;1963:13:33;::::1;1979:5;1963:13:::0;;;:6:::1;:13;::::0;;;;:21;;-1:-1:-1;;1963:21:33::1;::::0;;1994:7;;-1:-1:-1;;;1994:7:33;::::1;;;::::0;:5:::1;:7;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;2029:5;2016:19;;;;;;;;;;;;;1734:308:::0;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1194:343:33:-;1531:13:0;:11;:13::i;:::-;1280:14:33::1;::::0;;;:7:::1;:14;::::0;;;;;::::1;;1279:15;1271:42;;;::::0;-1:-1:-1;;;1271:42:33;;3068:2:34;1271:42:33::1;::::0;::::1;3050:21:34::0;3107:2;3087:18;;;3080:30;3146:16;3126:18;;;3119:44;3180:18;;1271:42:33::1;2866:338:34::0;1271:42:33::1;-1:-1:-1::0;;1332:13:33;::::1;;::::0;;;:6:::1;:13;::::0;;;;;::::1;;1331:14;1323:43;;;::::0;-1:-1:-1;;;1323:43:33;;3411:2:34;1323:43:33::1;::::0;::::1;3393:21:34::0;3450:2;3430:18;;;3423:30;3489:18;3469;;;3462:46;3525:18;;1323:43:33::1;3209:340:34::0;1323:43:33::1;1386:5;1384:7:::0;;366:3:::1;::::0;1386:5;::::1;::::0;1384:7:::1;::::0;-1:-1:-1;;;1384:7:33;::::1;:25;:7;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:25;;;1376:53;;;::::0;-1:-1:-1;;;1376:53:33;;3941:2:34;1376:53:33::1;::::0;::::1;3923:21:34::0;3980:2;3960:18;;;3953:30;4019:17;3999:18;;;3992:45;4054:18;;1376:53:33::1;3739:339:34::0;1376:53:33::1;-1:-1:-1::0;;1440:13:33;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;:20;;1456:4:::1;-1:-1:-1::0;;1440:20:33;;::::1;::::0;::::1;::::0;;;1470:14;;;;;;;;;;:21;;;;::::1;;::::0;;;1506:24;;4229:25:34;;;1506:24:33::1;::::0;4202:18:34;1506:24:33::1;;;;;;;1194:343:::0;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;926:74:34::0;899:18;;2672:31:0::1;780:226:34::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:10;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:10;1901:40:0;;;926:74:34;899:18;;1901:40:0;780:226:34;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;;;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:185:34:-;82:20;;-1:-1:-1;;131:43:34;;121:54;;111:82;;189:1;186;179:12;111:82;14:185;;;:::o;204:186::-;263:6;316:2;304:9;295:7;291:23;287:32;284:52;;;332:1;329;322:12;284:52;355:29;374:9;355:29;:::i;:::-;345:39;204:186;-1:-1:-1;;;204:186:34:o;1011:226::-;1070:6;1123:2;1111:9;1102:7;1098:23;1094:32;1091:52;;;1139:1;1136;1129:12;1091:52;-1:-1:-1;1184:23:34;;1011:226;-1:-1:-1;1011:226:34:o;1242:300::-;1310:6;1318;1371:2;1359:9;1350:7;1346:23;1342:32;1339:52;;;1387:1;1384;1377:12;1339:52;1410:29;1429:9;1410:29;:::i;:::-;1400:39;1508:2;1493:18;;;;1480:32;;-1:-1:-1;;;1242:300:34:o;1547:309::-;1606:6;1659:2;1647:9;1638:7;1634:23;1630:32;1627:52;;;1675:1;1672;1665:12;1627:52;1714:9;1701:23;-1:-1:-1;;;;;1757:5:34;1753:54;1746:5;1743:65;1733:93;;1822:1;1819;1812:12;2548:127;2609:10;2604:3;2600:20;2597:1;2590:31;2640:4;2637:1;2630:15;2664:4;2661:1;2654:15;2680:181;2718:3;2762:6;2755:5;2751:18;2788:7;2778:41;;2799:18;;:::i;:::-;-1:-1:-1;;2835:20:34;;2680:181;-1:-1:-1;;2680:181:34:o;3554:180::-;3592:3;3636:6;3629:5;3625:18;3667:6;3658:7;3655:19;3652:45;;3677:18;;:::i;:::-;3726:1;3713:15;;3554:180;-1:-1:-1;;3554:180:34:o"},"methodIdentifiers":{"MAX_VOTER_COUNT()":"827fb811","addVoter(bytes20,bytes32)":"d782d4f7","owner()":"8da5cb5b","pubkeys(bytes32)":"98611f12","removeVoter(bytes20)":"6b75a2b3","renounceOwnership()":"715018a6","total()":"2ddbd13a","transferOwnership(address)":"f2fde38b","voters(bytes20)":"1a41e890"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"AddedVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"}],\"name\":\"RemovedVoter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_VOTER_COUNT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"},{\"internalType\":\"bytes32\",\"name\":\"vtkey\",\"type\":\"bytes32\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vtkh\",\"type\":\"bytes32\"}],\"name\":\"pubkeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"}],\"name\":\"removeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"voter\",\"type\":\"bytes20\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addVoter(bytes20,bytes32)\":{\"params\":{\"voter\":\"the address which derived from the tx key\",\"vtkey\":\"the hash which derived from the vote key the voter address = ripemd160(sha256(compressed secp256k1 public key)) the voter key hash = sha256(compressed bls12-381 public key in G2 group) we don't have heavy workload such as signature verification here a new voter needs to provide online proof which includes the signature to join the relayer network the adding will be activated after next relayer proposer election\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeVoter(bytes20)\":{\"params\":{\"voter\":\"the voter address the removal will be activated after next relayer proposer election\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addVoter(bytes20,bytes32)\":{\"notice\":\"addVoter adds a new voter to relayer network\"},\"removeVoter(bytes20)\":{\"notice\":\"removeVoter removes a voter from relayer network\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/relayer/relayer.sol\":\"Relayer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/interfaces/Relayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IRelayer {\\n    event AddedVoter(bytes20 indexed voter, bytes32 keyHash);\\n\\n    event RemovedVoter(bytes20 indexed voter);\\n\\n    function addVoter(bytes20 voter, bytes32 vtkey) external;\\n\\n    function removeVoter(bytes20 voter) external;\\n}\\n\",\"keccak256\":\"0xaab0ac9d0e26c562439a57c2589d5f84c46e0191e10121adeca830f950f6a23b\",\"license\":\"MIT\"},\"contracts/relayer/relayer.sol\":{\"content\":\"// SPDX-License-Identifier: Business Source License 1.1\\npragma solidity ^0.8.24;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IRelayer} from \\\"../interfaces/Relayer.sol\\\";\\n\\ncontract Relayer is Ownable, IRelayer {\\n    // It ensures efficiency for BLS signature aggregation and TSS operations\\n    uint16 public constant MAX_VOTER_COUNT = 256;\\n\\n    uint16 public total;\\n    mapping(bytes32 vtkh => bool exists) public pubkeys;\\n    mapping(bytes20 voter => bool exists) public voters;\\n\\n    constructor(address owner) Ownable(owner) {}\\n\\n    /**\\n     * addVoter adds a new voter to relayer network\\n     * @param voter the address which derived from the tx key\\n     * @param vtkey the hash which derived from the vote key\\n     *\\n     * the voter address = ripemd160(sha256(compressed secp256k1 public key))\\n     * the voter key hash = sha256(compressed bls12-381 public key in G2 group)\\n     *\\n     * we don't have heavy workload such as signature verification here\\n     * a new voter needs to provide online proof which includes the signature\\n     * to join the relayer network\\n     *\\n     * the adding will be activated after next relayer proposer election\\n     */\\n    function addVoter(bytes20 voter, bytes32 vtkey) external onlyOwner {\\n        require(!pubkeys[vtkey], \\\"duplicated key\\\");\\n        require(!voters[voter], \\\"duplicated voter\\\");\\n        require(++total < MAX_VOTER_COUNT, \\\"too many voters\\\");\\n\\n        voters[voter] = true;\\n        pubkeys[vtkey] = true;\\n        emit AddedVoter(voter, vtkey);\\n    }\\n\\n    /**\\n     * removeVoter removes a voter from relayer network\\n     * @param voter the voter address\\n     *\\n     * the removal will be activated after next relayer proposer election\\n     */\\n    function removeVoter(bytes20 voter) external onlyOwner {\\n        require(voters[voter], \\\"voter not found\\\");\\n        require(total > 1, \\\"too few voters\\\");\\n        // we don't delete the pubkey, it cant be reused next time\\n        voters[voter] = false;\\n        total--;\\n        emit RemovedVoter(voter);\\n    }\\n}\\n\",\"keccak256\":\"0xc92898da2d601f17d968cdcdc311e802d40a9b7a0a8732d7ca568a52f6c30d12\",\"license\":\"Business Source License 1.1\"}},\"version\":1}"}}}}}