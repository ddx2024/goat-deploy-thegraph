// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Canceled extends ethereum.Event {
  get params(): Canceled__Params {
    return new Canceled__Params(this);
  }
}

export class Canceled__Params {
  _event: Canceled;

  constructor(event: Canceled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Canceling extends ethereum.Event {
  get params(): Canceling__Params {
    return new Canceling__Params(this);
  }
}

export class Canceling__Params {
  _event: Canceling;

  constructor(event: Canceling) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get txid(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get txout(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tax(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DepositTaxUpdated extends ethereum.Event {
  get params(): DepositTaxUpdated__Params {
    return new DepositTaxUpdated__Params(this);
  }
}

export class DepositTaxUpdated__Params {
  _event: DepositTaxUpdated;

  constructor(event: DepositTaxUpdated) {
    this._event = event;
  }

  get rate(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get max(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paid extends ethereum.Event {
  get params(): Paid__Params {
    return new Paid__Params(this);
  }
}

export class Paid__Params {
  _event: Paid;

  constructor(event: Paid) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get txid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get txout(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RBF extends ethereum.Event {
  get params(): RBF__Params {
    return new RBF__Params(this);
  }
}

export class RBF__Params {
  _event: RBF;

  constructor(event: RBF) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxTxPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RateLimitUpdated extends ethereum.Event {
  get params(): RateLimitUpdated__Params {
    return new RateLimitUpdated__Params(this);
  }
}

export class RateLimitUpdated__Params {
  _event: RateLimitUpdated;

  constructor(event: RateLimitUpdated) {
    this._event = event;
  }

  get param0(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tax(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get maxTxPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get receiver(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class WithdrawalTaxUpdated extends ethereum.Event {
  get params(): WithdrawalTaxUpdated__Params {
    return new WithdrawalTaxUpdated__Params(this);
  }
}

export class WithdrawalTaxUpdated__Params {
  _event: WithdrawalTaxUpdated;

  constructor(event: WithdrawalTaxUpdated) {
    this._event = event;
  }

  get rate(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get max(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Bridge__paramResult {
  value0: i32;
  value1: i32;
  value2: BigInt;
  value3: i32;
  value4: BigInt;
  value5: i32;
  value6: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: BigInt,
    value3: i32,
    value4: BigInt,
    value5: i32,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5)),
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getRateLimit(): i32 {
    return this.value0;
  }

  getDepositTaxBP(): i32 {
    return this.value1;
  }

  getMaxDepositTax(): BigInt {
    return this.value2;
  }

  getWithdrawalTaxBP(): i32 {
    return this.value3;
  }

  getMaxWithdrawalTax(): BigInt {
    return this.value4;
  }

  get_res1(): i32 {
    return this.value5;
  }

  get_res2(): BigInt {
    return this.value6;
  }
}

export class Bridge__receiptsResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Bytes, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTxid(): Bytes {
    return this.value0;
  }

  getTxout(): BigInt {
    return this.value1;
  }

  getReceived(): BigInt {
    return this.value2;
  }
}

export class Bridge__withdrawalsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: string;
  value6: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: string,
    value6: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6)),
    );
    return map;
  }

  getSender(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getTax(): BigInt {
    return this.value2;
  }

  getMaxTxPrice(): BigInt {
    return this.value3;
  }

  getUpdatedAt(): BigInt {
    return this.value4;
  }

  getReceiver(): string {
    return this.value5;
  }

  getStatus(): i32 {
    return this.value6;
  }
}

export class Bridge extends ethereum.SmartContract {
  static bind(address: Address): Bridge {
    return new Bridge("Bridge", address);
  }

  deposit(
    _txid: Bytes,
    _txout: BigInt,
    _target: Address,
    _amount: BigInt,
  ): BigInt {
    let result = super.call(
      "deposit",
      "deposit(bytes32,uint32,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_txid),
        ethereum.Value.fromUnsignedBigInt(_txout),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_deposit(
    _txid: Bytes,
    _txout: BigInt,
    _target: Address,
    _amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(bytes32,uint32,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_txid),
        ethereum.Value.fromUnsignedBigInt(_txout),
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDeposited(_txid: Bytes, _txout: BigInt): boolean {
    let result = super.call(
      "isDeposited",
      "isDeposited(bytes32,uint32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_txid),
        ethereum.Value.fromUnsignedBigInt(_txout),
      ],
    );

    return result[0].toBoolean();
  }

  try_isDeposited(_txid: Bytes, _txout: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDeposited",
      "isDeposited(bytes32,uint32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_txid),
        ethereum.Value.fromUnsignedBigInt(_txout),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  param(): Bridge__paramResult {
    let result = super.call(
      "param",
      "param():(uint16,uint16,uint64,uint16,uint64,uint16,uint64)",
      [],
    );

    return new Bridge__paramResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toBigInt(),
    );
  }

  try_param(): ethereum.CallResult<Bridge__paramResult> {
    let result = super.tryCall(
      "param",
      "param():(uint16,uint16,uint64,uint16,uint64,uint16,uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bridge__paramResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toBigInt(),
      ),
    );
  }

  receipts(id: BigInt): Bridge__receiptsResult {
    let result = super.call(
      "receipts",
      "receipts(uint256):(bytes32,uint32,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return new Bridge__receiptsResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_receipts(id: BigInt): ethereum.CallResult<Bridge__receiptsResult> {
    let result = super.tryCall(
      "receipts",
      "receipts(uint256):(bytes32,uint32,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bridge__receiptsResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  supportsInterface(id: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(id: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawals(param0: BigInt): Bridge__withdrawalsResult {
    let result = super.call(
      "withdrawals",
      "withdrawals(uint256):(address,uint256,uint256,uint256,uint256,string,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Bridge__withdrawalsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toString(),
      result[6].toI32(),
    );
  }

  try_withdrawals(
    param0: BigInt,
  ): ethereum.CallResult<Bridge__withdrawalsResult> {
    let result = super.tryCall(
      "withdrawals",
      "withdrawals(uint256):(address,uint256,uint256,uint256,uint256,string,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bridge__withdrawalsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toString(),
        value[6].toI32(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Cancel1Call extends ethereum.Call {
  get inputs(): Cancel1Call__Inputs {
    return new Cancel1Call__Inputs(this);
  }

  get outputs(): Cancel1Call__Outputs {
    return new Cancel1Call__Outputs(this);
  }
}

export class Cancel1Call__Inputs {
  _call: Cancel1Call;

  constructor(call: Cancel1Call) {
    this._call = call;
  }

  get _wid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Cancel1Call__Outputs {
  _call: Cancel1Call;

  constructor(call: Cancel1Call) {
    this._call = call;
  }
}

export class Cancel2Call extends ethereum.Call {
  get inputs(): Cancel2Call__Inputs {
    return new Cancel2Call__Inputs(this);
  }

  get outputs(): Cancel2Call__Outputs {
    return new Cancel2Call__Outputs(this);
  }
}

export class Cancel2Call__Inputs {
  _call: Cancel2Call;

  constructor(call: Cancel2Call) {
    this._call = call;
  }

  get _wid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Cancel2Call__Outputs {
  _call: Cancel2Call;

  constructor(call: Cancel2Call) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _txid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _txout(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _target(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tax(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PaidCall extends ethereum.Call {
  get inputs(): PaidCall__Inputs {
    return new PaidCall__Inputs(this);
  }

  get outputs(): PaidCall__Outputs {
    return new PaidCall__Outputs(this);
  }
}

export class PaidCall__Inputs {
  _call: PaidCall;

  constructor(call: PaidCall) {
    this._call = call;
  }

  get _wid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _txid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _txout(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _received(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class PaidCall__Outputs {
  _call: PaidCall;

  constructor(call: PaidCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get _wid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReplaceByFeeCall extends ethereum.Call {
  get inputs(): ReplaceByFeeCall__Inputs {
    return new ReplaceByFeeCall__Inputs(this);
  }

  get outputs(): ReplaceByFeeCall__Outputs {
    return new ReplaceByFeeCall__Outputs(this);
  }
}

export class ReplaceByFeeCall__Inputs {
  _call: ReplaceByFeeCall;

  constructor(call: ReplaceByFeeCall) {
    this._call = call;
  }

  get _wid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxTxPrice(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ReplaceByFeeCall__Outputs {
  _call: ReplaceByFeeCall;

  constructor(call: ReplaceByFeeCall) {
    this._call = call;
  }
}

export class SetDepositTaxCall extends ethereum.Call {
  get inputs(): SetDepositTaxCall__Inputs {
    return new SetDepositTaxCall__Inputs(this);
  }

  get outputs(): SetDepositTaxCall__Outputs {
    return new SetDepositTaxCall__Outputs(this);
  }
}

export class SetDepositTaxCall__Inputs {
  _call: SetDepositTaxCall;

  constructor(call: SetDepositTaxCall) {
    this._call = call;
  }

  get _bp(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDepositTaxCall__Outputs {
  _call: SetDepositTaxCall;

  constructor(call: SetDepositTaxCall) {
    this._call = call;
  }
}

export class SetRateLimitCall extends ethereum.Call {
  get inputs(): SetRateLimitCall__Inputs {
    return new SetRateLimitCall__Inputs(this);
  }

  get outputs(): SetRateLimitCall__Outputs {
    return new SetRateLimitCall__Outputs(this);
  }
}

export class SetRateLimitCall__Inputs {
  _call: SetRateLimitCall;

  constructor(call: SetRateLimitCall) {
    this._call = call;
  }

  get _sec(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetRateLimitCall__Outputs {
  _call: SetRateLimitCall;

  constructor(call: SetRateLimitCall) {
    this._call = call;
  }
}

export class SetWithdrawalTaxCall extends ethereum.Call {
  get inputs(): SetWithdrawalTaxCall__Inputs {
    return new SetWithdrawalTaxCall__Inputs(this);
  }

  get outputs(): SetWithdrawalTaxCall__Outputs {
    return new SetWithdrawalTaxCall__Outputs(this);
  }
}

export class SetWithdrawalTaxCall__Inputs {
  _call: SetWithdrawalTaxCall;

  constructor(call: SetWithdrawalTaxCall) {
    this._call = call;
  }

  get _bp(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetWithdrawalTaxCall__Outputs {
  _call: SetWithdrawalTaxCall;

  constructor(call: SetWithdrawalTaxCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _receiver(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _maxTxPrice(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
